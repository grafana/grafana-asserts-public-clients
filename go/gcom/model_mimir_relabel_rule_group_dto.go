/*
Asserts, Inc

Asserts Public API

API version: 1.0.1
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the MimirRelabelRuleGroupDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MimirRelabelRuleGroupDto{}

// MimirRelabelRuleGroupDto struct for MimirRelabelRuleGroupDto
type MimirRelabelRuleGroupDto struct {
	Name                 *string               `json:"name,omitempty"`
	Order                *int32                `json:"order,omitempty"`
	Selector             *string               `json:"selector,omitempty"`
	Rules                []MimirRelabelRuleDto `json:"rules,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MimirRelabelRuleGroupDto MimirRelabelRuleGroupDto

// NewMimirRelabelRuleGroupDto instantiates a new MimirRelabelRuleGroupDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMimirRelabelRuleGroupDto() *MimirRelabelRuleGroupDto {
	this := MimirRelabelRuleGroupDto{}
	return &this
}

// NewMimirRelabelRuleGroupDtoWithDefaults instantiates a new MimirRelabelRuleGroupDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMimirRelabelRuleGroupDtoWithDefaults() *MimirRelabelRuleGroupDto {
	this := MimirRelabelRuleGroupDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MimirRelabelRuleGroupDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MimirRelabelRuleGroupDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MimirRelabelRuleGroupDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MimirRelabelRuleGroupDto) SetName(v string) {
	o.Name = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *MimirRelabelRuleGroupDto) GetOrder() int32 {
	if o == nil || IsNil(o.Order) {
		var ret int32
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MimirRelabelRuleGroupDto) GetOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *MimirRelabelRuleGroupDto) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given int32 and assigns it to the Order field.
func (o *MimirRelabelRuleGroupDto) SetOrder(v int32) {
	o.Order = &v
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *MimirRelabelRuleGroupDto) GetSelector() string {
	if o == nil || IsNil(o.Selector) {
		var ret string
		return ret
	}
	return *o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MimirRelabelRuleGroupDto) GetSelectorOk() (*string, bool) {
	if o == nil || IsNil(o.Selector) {
		return nil, false
	}
	return o.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *MimirRelabelRuleGroupDto) HasSelector() bool {
	if o != nil && !IsNil(o.Selector) {
		return true
	}

	return false
}

// SetSelector gets a reference to the given string and assigns it to the Selector field.
func (o *MimirRelabelRuleGroupDto) SetSelector(v string) {
	o.Selector = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *MimirRelabelRuleGroupDto) GetRules() []MimirRelabelRuleDto {
	if o == nil || IsNil(o.Rules) {
		var ret []MimirRelabelRuleDto
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MimirRelabelRuleGroupDto) GetRulesOk() ([]MimirRelabelRuleDto, bool) {
	if o == nil || IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *MimirRelabelRuleGroupDto) HasRules() bool {
	if o != nil && !IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []MimirRelabelRuleDto and assigns it to the Rules field.
func (o *MimirRelabelRuleGroupDto) SetRules(v []MimirRelabelRuleDto) {
	o.Rules = v
}

func (o MimirRelabelRuleGroupDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MimirRelabelRuleGroupDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.Selector) {
		toSerialize["selector"] = o.Selector
	}
	if !IsNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MimirRelabelRuleGroupDto) UnmarshalJSON(data []byte) (err error) {
	varMimirRelabelRuleGroupDto := _MimirRelabelRuleGroupDto{}

	err = json.Unmarshal(data, &varMimirRelabelRuleGroupDto)

	if err != nil {
		return err
	}

	*o = MimirRelabelRuleGroupDto(varMimirRelabelRuleGroupDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "order")
		delete(additionalProperties, "selector")
		delete(additionalProperties, "rules")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMimirRelabelRuleGroupDto struct {
	value *MimirRelabelRuleGroupDto
	isSet bool
}

func (v NullableMimirRelabelRuleGroupDto) Get() *MimirRelabelRuleGroupDto {
	return v.value
}

func (v *NullableMimirRelabelRuleGroupDto) Set(val *MimirRelabelRuleGroupDto) {
	v.value = val
	v.isSet = true
}

func (v NullableMimirRelabelRuleGroupDto) IsSet() bool {
	return v.isSet
}

func (v *NullableMimirRelabelRuleGroupDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMimirRelabelRuleGroupDto(val *MimirRelabelRuleGroupDto) *NullableMimirRelabelRuleGroupDto {
	return &NullableMimirRelabelRuleGroupDto{value: val, isSet: true}
}

func (v NullableMimirRelabelRuleGroupDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMimirRelabelRuleGroupDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
