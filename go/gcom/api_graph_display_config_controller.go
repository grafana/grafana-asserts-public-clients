/*
Asserts, Inc

Asserts Public API

API version: 1.0.4
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// GraphDisplayConfigControllerAPIService GraphDisplayConfigControllerAPI service
type GraphDisplayConfigControllerAPIService service

type ApiDeleteGraphEdgeDisplayConfigRequest struct {
	ctx         context.Context
	ApiService  *GraphDisplayConfigControllerAPIService
	name        string
	xScopeOrgID *string
}

// Grafana Tenant/Stack ID
func (r ApiDeleteGraphEdgeDisplayConfigRequest) XScopeOrgID(xScopeOrgID string) ApiDeleteGraphEdgeDisplayConfigRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiDeleteGraphEdgeDisplayConfigRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteGraphEdgeDisplayConfigExecute(r)
}

/*
DeleteGraphEdgeDisplayConfig Method for DeleteGraphEdgeDisplayConfig

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name
	@return ApiDeleteGraphEdgeDisplayConfigRequest
*/
func (a *GraphDisplayConfigControllerAPIService) DeleteGraphEdgeDisplayConfig(ctx context.Context, name string) ApiDeleteGraphEdgeDisplayConfigRequest {
	return ApiDeleteGraphEdgeDisplayConfigRequest{
		ApiService: a,
		ctx:        ctx,
		name:       name,
	}
}

// Execute executes the request
func (a *GraphDisplayConfigControllerAPIService) DeleteGraphEdgeDisplayConfigExecute(r ApiDeleteGraphEdgeDisplayConfigRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GraphDisplayConfigControllerAPIService.DeleteGraphEdgeDisplayConfig")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config/display/graph/edge_type/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteGraphEntityDisplayConfigRequest struct {
	ctx         context.Context
	ApiService  *GraphDisplayConfigControllerAPIService
	name        string
	xScopeOrgID *string
}

// Grafana Tenant/Stack ID
func (r ApiDeleteGraphEntityDisplayConfigRequest) XScopeOrgID(xScopeOrgID string) ApiDeleteGraphEntityDisplayConfigRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiDeleteGraphEntityDisplayConfigRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteGraphEntityDisplayConfigExecute(r)
}

/*
DeleteGraphEntityDisplayConfig Method for DeleteGraphEntityDisplayConfig

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name
	@return ApiDeleteGraphEntityDisplayConfigRequest
*/
func (a *GraphDisplayConfigControllerAPIService) DeleteGraphEntityDisplayConfig(ctx context.Context, name string) ApiDeleteGraphEntityDisplayConfigRequest {
	return ApiDeleteGraphEntityDisplayConfigRequest{
		ApiService: a,
		ctx:        ctx,
		name:       name,
	}
}

// Execute executes the request
func (a *GraphDisplayConfigControllerAPIService) DeleteGraphEntityDisplayConfigExecute(r ApiDeleteGraphEntityDisplayConfigRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GraphDisplayConfigControllerAPIService.DeleteGraphEntityDisplayConfig")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config/display/graph/entity_type/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetGraphDisplayConfigRequest struct {
	ctx         context.Context
	ApiService  *GraphDisplayConfigControllerAPIService
	xScopeOrgID *string
}

// Grafana Tenant/Stack ID
func (r ApiGetGraphDisplayConfigRequest) XScopeOrgID(xScopeOrgID string) ApiGetGraphDisplayConfigRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiGetGraphDisplayConfigRequest) Execute() (*GraphDisplayConfigDto, *http.Response, error) {
	return r.ApiService.GetGraphDisplayConfigExecute(r)
}

/*
GetGraphDisplayConfig Method for GetGraphDisplayConfig

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetGraphDisplayConfigRequest
*/
func (a *GraphDisplayConfigControllerAPIService) GetGraphDisplayConfig(ctx context.Context) ApiGetGraphDisplayConfigRequest {
	return ApiGetGraphDisplayConfigRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return GraphDisplayConfigDto
func (a *GraphDisplayConfigControllerAPIService) GetGraphDisplayConfigExecute(r ApiGetGraphDisplayConfigRequest) (*GraphDisplayConfigDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GraphDisplayConfigDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GraphDisplayConfigControllerAPIService.GetGraphDisplayConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config/display/graph"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutGraphDisplayConfigRequest struct {
	ctx                   context.Context
	ApiService            *GraphDisplayConfigControllerAPIService
	graphDisplayConfigDto *GraphDisplayConfigDto
	xScopeOrgID           *string
}

func (r ApiPutGraphDisplayConfigRequest) GraphDisplayConfigDto(graphDisplayConfigDto GraphDisplayConfigDto) ApiPutGraphDisplayConfigRequest {
	r.graphDisplayConfigDto = &graphDisplayConfigDto
	return r
}

// Grafana Tenant/Stack ID
func (r ApiPutGraphDisplayConfigRequest) XScopeOrgID(xScopeOrgID string) ApiPutGraphDisplayConfigRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiPutGraphDisplayConfigRequest) Execute() (*http.Response, error) {
	return r.ApiService.PutGraphDisplayConfigExecute(r)
}

/*
PutGraphDisplayConfig Method for PutGraphDisplayConfig

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPutGraphDisplayConfigRequest
*/
func (a *GraphDisplayConfigControllerAPIService) PutGraphDisplayConfig(ctx context.Context) ApiPutGraphDisplayConfigRequest {
	return ApiPutGraphDisplayConfigRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GraphDisplayConfigControllerAPIService) PutGraphDisplayConfigExecute(r ApiPutGraphDisplayConfigRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GraphDisplayConfigControllerAPIService.PutGraphDisplayConfig")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config/display/graph"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.graphDisplayConfigDto == nil {
		return nil, reportError("graphDisplayConfigDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	// body params
	localVarPostBody = r.graphDisplayConfigDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
