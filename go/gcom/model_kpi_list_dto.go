/*
Asserts, Inc

Asserts Public API

API version: 2025.09.11-132913
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the KpiListDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KpiListDto{}

// KpiListDto struct for KpiListDto
type KpiListDto struct {
	KpiGroups            []KpiGroupDto       `json:"kpiGroups,omitempty"`
	KpisByEntityType     []EntityKpiScopeDto `json:"kpisByEntityType,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _KpiListDto KpiListDto

// NewKpiListDto instantiates a new KpiListDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKpiListDto() *KpiListDto {
	this := KpiListDto{}
	return &this
}

// NewKpiListDtoWithDefaults instantiates a new KpiListDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKpiListDtoWithDefaults() *KpiListDto {
	this := KpiListDto{}
	return &this
}

// GetKpiGroups returns the KpiGroups field value if set, zero value otherwise.
func (o *KpiListDto) GetKpiGroups() []KpiGroupDto {
	if o == nil || IsNil(o.KpiGroups) {
		var ret []KpiGroupDto
		return ret
	}
	return o.KpiGroups
}

// GetKpiGroupsOk returns a tuple with the KpiGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KpiListDto) GetKpiGroupsOk() ([]KpiGroupDto, bool) {
	if o == nil || IsNil(o.KpiGroups) {
		return nil, false
	}
	return o.KpiGroups, true
}

// HasKpiGroups returns a boolean if a field has been set.
func (o *KpiListDto) HasKpiGroups() bool {
	if o != nil && !IsNil(o.KpiGroups) {
		return true
	}

	return false
}

// SetKpiGroups gets a reference to the given []KpiGroupDto and assigns it to the KpiGroups field.
func (o *KpiListDto) SetKpiGroups(v []KpiGroupDto) {
	o.KpiGroups = v
}

// GetKpisByEntityType returns the KpisByEntityType field value if set, zero value otherwise.
func (o *KpiListDto) GetKpisByEntityType() []EntityKpiScopeDto {
	if o == nil || IsNil(o.KpisByEntityType) {
		var ret []EntityKpiScopeDto
		return ret
	}
	return o.KpisByEntityType
}

// GetKpisByEntityTypeOk returns a tuple with the KpisByEntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KpiListDto) GetKpisByEntityTypeOk() ([]EntityKpiScopeDto, bool) {
	if o == nil || IsNil(o.KpisByEntityType) {
		return nil, false
	}
	return o.KpisByEntityType, true
}

// HasKpisByEntityType returns a boolean if a field has been set.
func (o *KpiListDto) HasKpisByEntityType() bool {
	if o != nil && !IsNil(o.KpisByEntityType) {
		return true
	}

	return false
}

// SetKpisByEntityType gets a reference to the given []EntityKpiScopeDto and assigns it to the KpisByEntityType field.
func (o *KpiListDto) SetKpisByEntityType(v []EntityKpiScopeDto) {
	o.KpisByEntityType = v
}

func (o KpiListDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KpiListDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.KpiGroups) {
		toSerialize["kpiGroups"] = o.KpiGroups
	}
	if !IsNil(o.KpisByEntityType) {
		toSerialize["kpisByEntityType"] = o.KpisByEntityType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KpiListDto) UnmarshalJSON(data []byte) (err error) {
	varKpiListDto := _KpiListDto{}

	err = json.Unmarshal(data, &varKpiListDto)

	if err != nil {
		return err
	}

	*o = KpiListDto(varKpiListDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "kpiGroups")
		delete(additionalProperties, "kpisByEntityType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKpiListDto struct {
	value *KpiListDto
	isSet bool
}

func (v NullableKpiListDto) Get() *KpiListDto {
	return v.value
}

func (v *NullableKpiListDto) Set(val *KpiListDto) {
	v.value = val
	v.isSet = true
}

func (v NullableKpiListDto) IsSet() bool {
	return v.isSet
}

func (v *NullableKpiListDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKpiListDto(val *KpiListDto) *NullableKpiListDto {
	return &NullableKpiListDto{value: val, isSet: true}
}

func (v NullableKpiListDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKpiListDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
