/*
Asserts, Inc

Asserts Public API

API version: 2025.08.25-143624
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the ModelMappingEntityDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelMappingEntityDto{}

// ModelMappingEntityDto struct for ModelMappingEntityDto
type ModelMappingEntityDto struct {
	Id                   *string                             `json:"id,omitempty"`
	EntityType           string                              `json:"entityType" validate:"regexp=Service|DataSource|Topic"`
	Signals              []ModelMappingEntityDtoSignalsInner `json:"signals"`
	AdditionalProperties map[string]interface{}
}

type _ModelMappingEntityDto ModelMappingEntityDto

// NewModelMappingEntityDto instantiates a new ModelMappingEntityDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelMappingEntityDto(entityType string, signals []ModelMappingEntityDtoSignalsInner) *ModelMappingEntityDto {
	this := ModelMappingEntityDto{}
	this.EntityType = entityType
	this.Signals = signals
	return &this
}

// NewModelMappingEntityDtoWithDefaults instantiates a new ModelMappingEntityDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelMappingEntityDtoWithDefaults() *ModelMappingEntityDto {
	this := ModelMappingEntityDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelMappingEntityDto) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMappingEntityDto) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelMappingEntityDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ModelMappingEntityDto) SetId(v string) {
	o.Id = &v
}

// GetEntityType returns the EntityType field value
func (o *ModelMappingEntityDto) GetEntityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value
// and a boolean to check if the value has been set.
func (o *ModelMappingEntityDto) GetEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityType, true
}

// SetEntityType sets field value
func (o *ModelMappingEntityDto) SetEntityType(v string) {
	o.EntityType = v
}

// GetSignals returns the Signals field value
func (o *ModelMappingEntityDto) GetSignals() []ModelMappingEntityDtoSignalsInner {
	if o == nil {
		var ret []ModelMappingEntityDtoSignalsInner
		return ret
	}

	return o.Signals
}

// GetSignalsOk returns a tuple with the Signals field value
// and a boolean to check if the value has been set.
func (o *ModelMappingEntityDto) GetSignalsOk() ([]ModelMappingEntityDtoSignalsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Signals, true
}

// SetSignals sets field value
func (o *ModelMappingEntityDto) SetSignals(v []ModelMappingEntityDtoSignalsInner) {
	o.Signals = v
}

func (o ModelMappingEntityDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelMappingEntityDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["entityType"] = o.EntityType
	toSerialize["signals"] = o.Signals

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelMappingEntityDto) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varModelMappingEntityDto := _ModelMappingEntityDto{}

	err = json.Unmarshal(data, &varModelMappingEntityDto)

	if err != nil {
		return err
	}

	*o = ModelMappingEntityDto(varModelMappingEntityDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "entityType")
		delete(additionalProperties, "signals")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelMappingEntityDto struct {
	value *ModelMappingEntityDto
	isSet bool
}

func (v NullableModelMappingEntityDto) Get() *ModelMappingEntityDto {
	return v.value
}

func (v *NullableModelMappingEntityDto) Set(val *ModelMappingEntityDto) {
	v.value = val
	v.isSet = true
}

func (v NullableModelMappingEntityDto) IsSet() bool {
	return v.isSet
}

func (v *NullableModelMappingEntityDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelMappingEntityDto(val *ModelMappingEntityDto) *NullableModelMappingEntityDto {
	return &NullableModelMappingEntityDto{value: val, isSet: true}
}

func (v NullableModelMappingEntityDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelMappingEntityDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
