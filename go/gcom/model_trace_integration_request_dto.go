/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-062139
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the TraceIntegrationRequestDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TraceIntegrationRequestDto{}

// TraceIntegrationRequestDto struct for TraceIntegrationRequestDto
type TraceIntegrationRequestDto struct {
	Start                int64                     `json:"start"`
	End                  int64                     `json:"end"`
	Properties           map[string]string         `json:"properties,omitempty"`
	Values               []MetricValueDto          `json:"values,omitempty"`
	ThresholdBands       []ThresholdValueMinMaxDto `json:"thresholdBands,omitempty"`
	SingleThreshold      *float64                  `json:"singleThreshold,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TraceIntegrationRequestDto TraceIntegrationRequestDto

// NewTraceIntegrationRequestDto instantiates a new TraceIntegrationRequestDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTraceIntegrationRequestDto(start int64, end int64) *TraceIntegrationRequestDto {
	this := TraceIntegrationRequestDto{}
	this.Start = start
	this.End = end
	return &this
}

// NewTraceIntegrationRequestDtoWithDefaults instantiates a new TraceIntegrationRequestDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraceIntegrationRequestDtoWithDefaults() *TraceIntegrationRequestDto {
	this := TraceIntegrationRequestDto{}
	return &this
}

// GetStart returns the Start field value
func (o *TraceIntegrationRequestDto) GetStart() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Start
}

// GetStartOk returns a tuple with the Start field value
// and a boolean to check if the value has been set.
func (o *TraceIntegrationRequestDto) GetStartOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Start, true
}

// SetStart sets field value
func (o *TraceIntegrationRequestDto) SetStart(v int64) {
	o.Start = v
}

// GetEnd returns the End field value
func (o *TraceIntegrationRequestDto) GetEnd() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.End
}

// GetEndOk returns a tuple with the End field value
// and a boolean to check if the value has been set.
func (o *TraceIntegrationRequestDto) GetEndOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.End, true
}

// SetEnd sets field value
func (o *TraceIntegrationRequestDto) SetEnd(v int64) {
	o.End = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *TraceIntegrationRequestDto) GetProperties() map[string]string {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]string
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceIntegrationRequestDto) GetPropertiesOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]string{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *TraceIntegrationRequestDto) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *TraceIntegrationRequestDto) SetProperties(v map[string]string) {
	o.Properties = v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *TraceIntegrationRequestDto) GetValues() []MetricValueDto {
	if o == nil || IsNil(o.Values) {
		var ret []MetricValueDto
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceIntegrationRequestDto) GetValuesOk() ([]MetricValueDto, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *TraceIntegrationRequestDto) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []MetricValueDto and assigns it to the Values field.
func (o *TraceIntegrationRequestDto) SetValues(v []MetricValueDto) {
	o.Values = v
}

// GetThresholdBands returns the ThresholdBands field value if set, zero value otherwise.
func (o *TraceIntegrationRequestDto) GetThresholdBands() []ThresholdValueMinMaxDto {
	if o == nil || IsNil(o.ThresholdBands) {
		var ret []ThresholdValueMinMaxDto
		return ret
	}
	return o.ThresholdBands
}

// GetThresholdBandsOk returns a tuple with the ThresholdBands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceIntegrationRequestDto) GetThresholdBandsOk() ([]ThresholdValueMinMaxDto, bool) {
	if o == nil || IsNil(o.ThresholdBands) {
		return nil, false
	}
	return o.ThresholdBands, true
}

// HasThresholdBands returns a boolean if a field has been set.
func (o *TraceIntegrationRequestDto) HasThresholdBands() bool {
	if o != nil && !IsNil(o.ThresholdBands) {
		return true
	}

	return false
}

// SetThresholdBands gets a reference to the given []ThresholdValueMinMaxDto and assigns it to the ThresholdBands field.
func (o *TraceIntegrationRequestDto) SetThresholdBands(v []ThresholdValueMinMaxDto) {
	o.ThresholdBands = v
}

// GetSingleThreshold returns the SingleThreshold field value if set, zero value otherwise.
func (o *TraceIntegrationRequestDto) GetSingleThreshold() float64 {
	if o == nil || IsNil(o.SingleThreshold) {
		var ret float64
		return ret
	}
	return *o.SingleThreshold
}

// GetSingleThresholdOk returns a tuple with the SingleThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceIntegrationRequestDto) GetSingleThresholdOk() (*float64, bool) {
	if o == nil || IsNil(o.SingleThreshold) {
		return nil, false
	}
	return o.SingleThreshold, true
}

// HasSingleThreshold returns a boolean if a field has been set.
func (o *TraceIntegrationRequestDto) HasSingleThreshold() bool {
	if o != nil && !IsNil(o.SingleThreshold) {
		return true
	}

	return false
}

// SetSingleThreshold gets a reference to the given float64 and assigns it to the SingleThreshold field.
func (o *TraceIntegrationRequestDto) SetSingleThreshold(v float64) {
	o.SingleThreshold = &v
}

func (o TraceIntegrationRequestDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TraceIntegrationRequestDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["start"] = o.Start
	toSerialize["end"] = o.End
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	if !IsNil(o.ThresholdBands) {
		toSerialize["thresholdBands"] = o.ThresholdBands
	}
	if !IsNil(o.SingleThreshold) {
		toSerialize["singleThreshold"] = o.SingleThreshold
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TraceIntegrationRequestDto) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varTraceIntegrationRequestDto := _TraceIntegrationRequestDto{}

	err = json.Unmarshal(data, &varTraceIntegrationRequestDto)

	if err != nil {
		return err
	}

	*o = TraceIntegrationRequestDto(varTraceIntegrationRequestDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "start")
		delete(additionalProperties, "end")
		delete(additionalProperties, "properties")
		delete(additionalProperties, "values")
		delete(additionalProperties, "thresholdBands")
		delete(additionalProperties, "singleThreshold")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTraceIntegrationRequestDto struct {
	value *TraceIntegrationRequestDto
	isSet bool
}

func (v NullableTraceIntegrationRequestDto) Get() *TraceIntegrationRequestDto {
	return v.value
}

func (v *NullableTraceIntegrationRequestDto) Set(val *TraceIntegrationRequestDto) {
	v.value = val
	v.isSet = true
}

func (v NullableTraceIntegrationRequestDto) IsSet() bool {
	return v.isSet
}

func (v *NullableTraceIntegrationRequestDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTraceIntegrationRequestDto(val *TraceIntegrationRequestDto) *NullableTraceIntegrationRequestDto {
	return &NullableTraceIntegrationRequestDto{value: val, isSet: true}
}

func (v NullableTraceIntegrationRequestDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTraceIntegrationRequestDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
