/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-110859
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the DatasetSanityCheckStepResultDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatasetSanityCheckStepResultDto{}

// DatasetSanityCheckStepResultDto struct for DatasetSanityCheckStepResultDto
type DatasetSanityCheckStepResultDto struct {
	Name                 *string  `json:"name,omitempty"`
	Troubleshoot         *string  `json:"troubleshoot,omitempty"`
	Blockers             []string `json:"blockers,omitempty"`
	Warnings             []string `json:"warnings,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DatasetSanityCheckStepResultDto DatasetSanityCheckStepResultDto

// NewDatasetSanityCheckStepResultDto instantiates a new DatasetSanityCheckStepResultDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatasetSanityCheckStepResultDto() *DatasetSanityCheckStepResultDto {
	this := DatasetSanityCheckStepResultDto{}
	return &this
}

// NewDatasetSanityCheckStepResultDtoWithDefaults instantiates a new DatasetSanityCheckStepResultDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatasetSanityCheckStepResultDtoWithDefaults() *DatasetSanityCheckStepResultDto {
	this := DatasetSanityCheckStepResultDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DatasetSanityCheckStepResultDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetSanityCheckStepResultDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DatasetSanityCheckStepResultDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DatasetSanityCheckStepResultDto) SetName(v string) {
	o.Name = &v
}

// GetTroubleshoot returns the Troubleshoot field value if set, zero value otherwise.
func (o *DatasetSanityCheckStepResultDto) GetTroubleshoot() string {
	if o == nil || IsNil(o.Troubleshoot) {
		var ret string
		return ret
	}
	return *o.Troubleshoot
}

// GetTroubleshootOk returns a tuple with the Troubleshoot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetSanityCheckStepResultDto) GetTroubleshootOk() (*string, bool) {
	if o == nil || IsNil(o.Troubleshoot) {
		return nil, false
	}
	return o.Troubleshoot, true
}

// HasTroubleshoot returns a boolean if a field has been set.
func (o *DatasetSanityCheckStepResultDto) HasTroubleshoot() bool {
	if o != nil && !IsNil(o.Troubleshoot) {
		return true
	}

	return false
}

// SetTroubleshoot gets a reference to the given string and assigns it to the Troubleshoot field.
func (o *DatasetSanityCheckStepResultDto) SetTroubleshoot(v string) {
	o.Troubleshoot = &v
}

// GetBlockers returns the Blockers field value if set, zero value otherwise.
func (o *DatasetSanityCheckStepResultDto) GetBlockers() []string {
	if o == nil || IsNil(o.Blockers) {
		var ret []string
		return ret
	}
	return o.Blockers
}

// GetBlockersOk returns a tuple with the Blockers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetSanityCheckStepResultDto) GetBlockersOk() ([]string, bool) {
	if o == nil || IsNil(o.Blockers) {
		return nil, false
	}
	return o.Blockers, true
}

// HasBlockers returns a boolean if a field has been set.
func (o *DatasetSanityCheckStepResultDto) HasBlockers() bool {
	if o != nil && !IsNil(o.Blockers) {
		return true
	}

	return false
}

// SetBlockers gets a reference to the given []string and assigns it to the Blockers field.
func (o *DatasetSanityCheckStepResultDto) SetBlockers(v []string) {
	o.Blockers = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *DatasetSanityCheckStepResultDto) GetWarnings() []string {
	if o == nil || IsNil(o.Warnings) {
		var ret []string
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetSanityCheckStepResultDto) GetWarningsOk() ([]string, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *DatasetSanityCheckStepResultDto) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []string and assigns it to the Warnings field.
func (o *DatasetSanityCheckStepResultDto) SetWarnings(v []string) {
	o.Warnings = v
}

func (o DatasetSanityCheckStepResultDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatasetSanityCheckStepResultDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Troubleshoot) {
		toSerialize["troubleshoot"] = o.Troubleshoot
	}
	if !IsNil(o.Blockers) {
		toSerialize["blockers"] = o.Blockers
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DatasetSanityCheckStepResultDto) UnmarshalJSON(data []byte) (err error) {
	varDatasetSanityCheckStepResultDto := _DatasetSanityCheckStepResultDto{}

	err = json.Unmarshal(data, &varDatasetSanityCheckStepResultDto)

	if err != nil {
		return err
	}

	*o = DatasetSanityCheckStepResultDto(varDatasetSanityCheckStepResultDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "troubleshoot")
		delete(additionalProperties, "blockers")
		delete(additionalProperties, "warnings")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDatasetSanityCheckStepResultDto struct {
	value *DatasetSanityCheckStepResultDto
	isSet bool
}

func (v NullableDatasetSanityCheckStepResultDto) Get() *DatasetSanityCheckStepResultDto {
	return v.value
}

func (v *NullableDatasetSanityCheckStepResultDto) Set(val *DatasetSanityCheckStepResultDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDatasetSanityCheckStepResultDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDatasetSanityCheckStepResultDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatasetSanityCheckStepResultDto(val *DatasetSanityCheckStepResultDto) *NullableDatasetSanityCheckStepResultDto {
	return &NullableDatasetSanityCheckStepResultDto{value: val, isSet: true}
}

func (v NullableDatasetSanityCheckStepResultDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatasetSanityCheckStepResultDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
