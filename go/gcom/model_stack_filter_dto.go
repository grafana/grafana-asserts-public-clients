/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-062139
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the StackFilterDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StackFilterDto{}

// StackFilterDto struct for StackFilterDto
type StackFilterDto struct {
	Name                 *string  `json:"name,omitempty"`
	Operator             *string  `json:"operator,omitempty"`
	Values               []string `json:"values,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StackFilterDto StackFilterDto

// NewStackFilterDto instantiates a new StackFilterDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStackFilterDto() *StackFilterDto {
	this := StackFilterDto{}
	return &this
}

// NewStackFilterDtoWithDefaults instantiates a new StackFilterDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStackFilterDtoWithDefaults() *StackFilterDto {
	this := StackFilterDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StackFilterDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackFilterDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StackFilterDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StackFilterDto) SetName(v string) {
	o.Name = &v
}

// GetOperator returns the Operator field value if set, zero value otherwise.
func (o *StackFilterDto) GetOperator() string {
	if o == nil || IsNil(o.Operator) {
		var ret string
		return ret
	}
	return *o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackFilterDto) GetOperatorOk() (*string, bool) {
	if o == nil || IsNil(o.Operator) {
		return nil, false
	}
	return o.Operator, true
}

// HasOperator returns a boolean if a field has been set.
func (o *StackFilterDto) HasOperator() bool {
	if o != nil && !IsNil(o.Operator) {
		return true
	}

	return false
}

// SetOperator gets a reference to the given string and assigns it to the Operator field.
func (o *StackFilterDto) SetOperator(v string) {
	o.Operator = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *StackFilterDto) GetValues() []string {
	if o == nil || IsNil(o.Values) {
		var ret []string
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackFilterDto) GetValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *StackFilterDto) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *StackFilterDto) SetValues(v []string) {
	o.Values = v
}

func (o StackFilterDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StackFilterDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Operator) {
		toSerialize["operator"] = o.Operator
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StackFilterDto) UnmarshalJSON(data []byte) (err error) {
	varStackFilterDto := _StackFilterDto{}

	err = json.Unmarshal(data, &varStackFilterDto)

	if err != nil {
		return err
	}

	*o = StackFilterDto(varStackFilterDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "operator")
		delete(additionalProperties, "values")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStackFilterDto struct {
	value *StackFilterDto
	isSet bool
}

func (v NullableStackFilterDto) Get() *StackFilterDto {
	return v.value
}

func (v *NullableStackFilterDto) Set(val *StackFilterDto) {
	v.value = val
	v.isSet = true
}

func (v NullableStackFilterDto) IsSet() bool {
	return v.isSet
}

func (v *NullableStackFilterDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStackFilterDto(val *StackFilterDto) *NullableStackFilterDto {
	return &NullableStackFilterDto{value: val, isSet: true}
}

func (v NullableStackFilterDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStackFilterDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
