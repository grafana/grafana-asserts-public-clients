/*
Asserts, Inc

Asserts Public API

API version: 2025.08.25-143403
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the StackDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StackDto{}

// StackDto struct for StackDto
type StackDto struct {
	GcomToken              *string `json:"gcomToken,omitempty"`
	MimirToken             *string `json:"mimirToken,omitempty"`
	AssertionDetectorToken *string `json:"assertionDetectorToken,omitempty"`
	GrafanaToken           *string `json:"grafanaToken,omitempty"`
	AdditionalProperties   map[string]interface{}
}

type _StackDto StackDto

// NewStackDto instantiates a new StackDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStackDto() *StackDto {
	this := StackDto{}
	return &this
}

// NewStackDtoWithDefaults instantiates a new StackDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStackDtoWithDefaults() *StackDto {
	this := StackDto{}
	return &this
}

// GetGcomToken returns the GcomToken field value if set, zero value otherwise.
func (o *StackDto) GetGcomToken() string {
	if o == nil || IsNil(o.GcomToken) {
		var ret string
		return ret
	}
	return *o.GcomToken
}

// GetGcomTokenOk returns a tuple with the GcomToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackDto) GetGcomTokenOk() (*string, bool) {
	if o == nil || IsNil(o.GcomToken) {
		return nil, false
	}
	return o.GcomToken, true
}

// HasGcomToken returns a boolean if a field has been set.
func (o *StackDto) HasGcomToken() bool {
	if o != nil && !IsNil(o.GcomToken) {
		return true
	}

	return false
}

// SetGcomToken gets a reference to the given string and assigns it to the GcomToken field.
func (o *StackDto) SetGcomToken(v string) {
	o.GcomToken = &v
}

// GetMimirToken returns the MimirToken field value if set, zero value otherwise.
func (o *StackDto) GetMimirToken() string {
	if o == nil || IsNil(o.MimirToken) {
		var ret string
		return ret
	}
	return *o.MimirToken
}

// GetMimirTokenOk returns a tuple with the MimirToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackDto) GetMimirTokenOk() (*string, bool) {
	if o == nil || IsNil(o.MimirToken) {
		return nil, false
	}
	return o.MimirToken, true
}

// HasMimirToken returns a boolean if a field has been set.
func (o *StackDto) HasMimirToken() bool {
	if o != nil && !IsNil(o.MimirToken) {
		return true
	}

	return false
}

// SetMimirToken gets a reference to the given string and assigns it to the MimirToken field.
func (o *StackDto) SetMimirToken(v string) {
	o.MimirToken = &v
}

// GetAssertionDetectorToken returns the AssertionDetectorToken field value if set, zero value otherwise.
func (o *StackDto) GetAssertionDetectorToken() string {
	if o == nil || IsNil(o.AssertionDetectorToken) {
		var ret string
		return ret
	}
	return *o.AssertionDetectorToken
}

// GetAssertionDetectorTokenOk returns a tuple with the AssertionDetectorToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackDto) GetAssertionDetectorTokenOk() (*string, bool) {
	if o == nil || IsNil(o.AssertionDetectorToken) {
		return nil, false
	}
	return o.AssertionDetectorToken, true
}

// HasAssertionDetectorToken returns a boolean if a field has been set.
func (o *StackDto) HasAssertionDetectorToken() bool {
	if o != nil && !IsNil(o.AssertionDetectorToken) {
		return true
	}

	return false
}

// SetAssertionDetectorToken gets a reference to the given string and assigns it to the AssertionDetectorToken field.
func (o *StackDto) SetAssertionDetectorToken(v string) {
	o.AssertionDetectorToken = &v
}

// GetGrafanaToken returns the GrafanaToken field value if set, zero value otherwise.
func (o *StackDto) GetGrafanaToken() string {
	if o == nil || IsNil(o.GrafanaToken) {
		var ret string
		return ret
	}
	return *o.GrafanaToken
}

// GetGrafanaTokenOk returns a tuple with the GrafanaToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackDto) GetGrafanaTokenOk() (*string, bool) {
	if o == nil || IsNil(o.GrafanaToken) {
		return nil, false
	}
	return o.GrafanaToken, true
}

// HasGrafanaToken returns a boolean if a field has been set.
func (o *StackDto) HasGrafanaToken() bool {
	if o != nil && !IsNil(o.GrafanaToken) {
		return true
	}

	return false
}

// SetGrafanaToken gets a reference to the given string and assigns it to the GrafanaToken field.
func (o *StackDto) SetGrafanaToken(v string) {
	o.GrafanaToken = &v
}

func (o StackDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StackDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GcomToken) {
		toSerialize["gcomToken"] = o.GcomToken
	}
	if !IsNil(o.MimirToken) {
		toSerialize["mimirToken"] = o.MimirToken
	}
	if !IsNil(o.AssertionDetectorToken) {
		toSerialize["assertionDetectorToken"] = o.AssertionDetectorToken
	}
	if !IsNil(o.GrafanaToken) {
		toSerialize["grafanaToken"] = o.GrafanaToken
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StackDto) UnmarshalJSON(data []byte) (err error) {
	varStackDto := _StackDto{}

	err = json.Unmarshal(data, &varStackDto)

	if err != nil {
		return err
	}

	*o = StackDto(varStackDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "gcomToken")
		delete(additionalProperties, "mimirToken")
		delete(additionalProperties, "assertionDetectorToken")
		delete(additionalProperties, "grafanaToken")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStackDto struct {
	value *StackDto
	isSet bool
}

func (v NullableStackDto) Get() *StackDto {
	return v.value
}

func (v *NullableStackDto) Set(val *StackDto) {
	v.value = val
	v.isSet = true
}

func (v NullableStackDto) IsSet() bool {
	return v.isSet
}

func (v *NullableStackDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStackDto(val *StackDto) *NullableStackDto {
	return &NullableStackDto{value: val, isSet: true}
}

func (v NullableStackDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStackDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
