/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-161538
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the AffectedEntityDetailDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AffectedEntityDetailDto{}

// AffectedEntityDetailDto struct for AffectedEntityDetailDto
type AffectedEntityDetailDto struct {
	Name                 *string           `json:"name,omitempty"`
	ExtraLabels          map[string]string `json:"extraLabels,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AffectedEntityDetailDto AffectedEntityDetailDto

// NewAffectedEntityDetailDto instantiates a new AffectedEntityDetailDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAffectedEntityDetailDto() *AffectedEntityDetailDto {
	this := AffectedEntityDetailDto{}
	return &this
}

// NewAffectedEntityDetailDtoWithDefaults instantiates a new AffectedEntityDetailDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAffectedEntityDetailDtoWithDefaults() *AffectedEntityDetailDto {
	this := AffectedEntityDetailDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AffectedEntityDetailDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AffectedEntityDetailDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AffectedEntityDetailDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AffectedEntityDetailDto) SetName(v string) {
	o.Name = &v
}

// GetExtraLabels returns the ExtraLabels field value if set, zero value otherwise.
func (o *AffectedEntityDetailDto) GetExtraLabels() map[string]string {
	if o == nil || IsNil(o.ExtraLabels) {
		var ret map[string]string
		return ret
	}
	return o.ExtraLabels
}

// GetExtraLabelsOk returns a tuple with the ExtraLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AffectedEntityDetailDto) GetExtraLabelsOk() (map[string]string, bool) {
	if o == nil || IsNil(o.ExtraLabels) {
		return map[string]string{}, false
	}
	return o.ExtraLabels, true
}

// HasExtraLabels returns a boolean if a field has been set.
func (o *AffectedEntityDetailDto) HasExtraLabels() bool {
	if o != nil && !IsNil(o.ExtraLabels) {
		return true
	}

	return false
}

// SetExtraLabels gets a reference to the given map[string]string and assigns it to the ExtraLabels field.
func (o *AffectedEntityDetailDto) SetExtraLabels(v map[string]string) {
	o.ExtraLabels = v
}

func (o AffectedEntityDetailDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AffectedEntityDetailDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ExtraLabels) {
		toSerialize["extraLabels"] = o.ExtraLabels
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AffectedEntityDetailDto) UnmarshalJSON(data []byte) (err error) {
	varAffectedEntityDetailDto := _AffectedEntityDetailDto{}

	err = json.Unmarshal(data, &varAffectedEntityDetailDto)

	if err != nil {
		return err
	}

	*o = AffectedEntityDetailDto(varAffectedEntityDetailDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "extraLabels")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAffectedEntityDetailDto struct {
	value *AffectedEntityDetailDto
	isSet bool
}

func (v NullableAffectedEntityDetailDto) Get() *AffectedEntityDetailDto {
	return v.value
}

func (v *NullableAffectedEntityDetailDto) Set(val *AffectedEntityDetailDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAffectedEntityDetailDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAffectedEntityDetailDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAffectedEntityDetailDto(val *AffectedEntityDetailDto) *NullableAffectedEntityDetailDto {
	return &NullableAffectedEntityDetailDto{value: val, isSet: true}
}

func (v NullableAffectedEntityDetailDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAffectedEntityDetailDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
