/*
Asserts, Inc

Asserts Public API

API version: 2025.08.25-143403
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// ProductActivationControllerAPIService ProductActivationControllerAPI service
type ProductActivationControllerAPIService service

type ApiUpsertProductActivationRequest struct {
	ctx                  context.Context
	ApiService           *ProductActivationControllerAPIService
	productActivationDto *ProductActivationDto
	xScopeOrgID          *string
}

func (r ApiUpsertProductActivationRequest) ProductActivationDto(productActivationDto ProductActivationDto) ApiUpsertProductActivationRequest {
	r.productActivationDto = &productActivationDto
	return r
}

// Grafana Tenant/Stack ID
func (r ApiUpsertProductActivationRequest) XScopeOrgID(xScopeOrgID string) ApiUpsertProductActivationRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiUpsertProductActivationRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpsertProductActivationExecute(r)
}

/*
UpsertProductActivation Method for UpsertProductActivation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiUpsertProductActivationRequest
*/
func (a *ProductActivationControllerAPIService) UpsertProductActivation(ctx context.Context) ApiUpsertProductActivationRequest {
	return ApiUpsertProductActivationRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *ProductActivationControllerAPIService) UpsertProductActivationExecute(r ApiUpsertProductActivationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductActivationControllerAPIService.UpsertProductActivation")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/product/activation"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.productActivationDto == nil {
		return nil, reportError("productActivationDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	// body params
	localVarPostBody = r.productActivationDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
