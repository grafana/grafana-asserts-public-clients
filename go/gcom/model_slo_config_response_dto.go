/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-062139
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the SloConfigResponseDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SloConfigResponseDto{}

// SloConfigResponseDto struct for SloConfigResponseDto
type SloConfigResponseDto struct {
	Active               *bool                         `json:"active,omitempty"`
	Name                 *string                       `json:"name,omitempty"`
	Status               *string                       `json:"status,omitempty"`
	Indicator            *SloConfigRequestDtoIndicator `json:"indicator,omitempty"`
	Objectives           []SloConfigDto                `json:"objectives,omitempty"`
	EntitySearch         *string                       `json:"entitySearch,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SloConfigResponseDto SloConfigResponseDto

// NewSloConfigResponseDto instantiates a new SloConfigResponseDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSloConfigResponseDto() *SloConfigResponseDto {
	this := SloConfigResponseDto{}
	return &this
}

// NewSloConfigResponseDtoWithDefaults instantiates a new SloConfigResponseDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSloConfigResponseDtoWithDefaults() *SloConfigResponseDto {
	this := SloConfigResponseDto{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *SloConfigResponseDto) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloConfigResponseDto) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *SloConfigResponseDto) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *SloConfigResponseDto) SetActive(v bool) {
	o.Active = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SloConfigResponseDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloConfigResponseDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SloConfigResponseDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SloConfigResponseDto) SetName(v string) {
	o.Name = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SloConfigResponseDto) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloConfigResponseDto) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SloConfigResponseDto) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SloConfigResponseDto) SetStatus(v string) {
	o.Status = &v
}

// GetIndicator returns the Indicator field value if set, zero value otherwise.
func (o *SloConfigResponseDto) GetIndicator() SloConfigRequestDtoIndicator {
	if o == nil || IsNil(o.Indicator) {
		var ret SloConfigRequestDtoIndicator
		return ret
	}
	return *o.Indicator
}

// GetIndicatorOk returns a tuple with the Indicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloConfigResponseDto) GetIndicatorOk() (*SloConfigRequestDtoIndicator, bool) {
	if o == nil || IsNil(o.Indicator) {
		return nil, false
	}
	return o.Indicator, true
}

// HasIndicator returns a boolean if a field has been set.
func (o *SloConfigResponseDto) HasIndicator() bool {
	if o != nil && !IsNil(o.Indicator) {
		return true
	}

	return false
}

// SetIndicator gets a reference to the given SloConfigRequestDtoIndicator and assigns it to the Indicator field.
func (o *SloConfigResponseDto) SetIndicator(v SloConfigRequestDtoIndicator) {
	o.Indicator = &v
}

// GetObjectives returns the Objectives field value if set, zero value otherwise.
func (o *SloConfigResponseDto) GetObjectives() []SloConfigDto {
	if o == nil || IsNil(o.Objectives) {
		var ret []SloConfigDto
		return ret
	}
	return o.Objectives
}

// GetObjectivesOk returns a tuple with the Objectives field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloConfigResponseDto) GetObjectivesOk() ([]SloConfigDto, bool) {
	if o == nil || IsNil(o.Objectives) {
		return nil, false
	}
	return o.Objectives, true
}

// HasObjectives returns a boolean if a field has been set.
func (o *SloConfigResponseDto) HasObjectives() bool {
	if o != nil && !IsNil(o.Objectives) {
		return true
	}

	return false
}

// SetObjectives gets a reference to the given []SloConfigDto and assigns it to the Objectives field.
func (o *SloConfigResponseDto) SetObjectives(v []SloConfigDto) {
	o.Objectives = v
}

// GetEntitySearch returns the EntitySearch field value if set, zero value otherwise.
func (o *SloConfigResponseDto) GetEntitySearch() string {
	if o == nil || IsNil(o.EntitySearch) {
		var ret string
		return ret
	}
	return *o.EntitySearch
}

// GetEntitySearchOk returns a tuple with the EntitySearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloConfigResponseDto) GetEntitySearchOk() (*string, bool) {
	if o == nil || IsNil(o.EntitySearch) {
		return nil, false
	}
	return o.EntitySearch, true
}

// HasEntitySearch returns a boolean if a field has been set.
func (o *SloConfigResponseDto) HasEntitySearch() bool {
	if o != nil && !IsNil(o.EntitySearch) {
		return true
	}

	return false
}

// SetEntitySearch gets a reference to the given string and assigns it to the EntitySearch field.
func (o *SloConfigResponseDto) SetEntitySearch(v string) {
	o.EntitySearch = &v
}

func (o SloConfigResponseDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SloConfigResponseDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Indicator) {
		toSerialize["indicator"] = o.Indicator
	}
	if !IsNil(o.Objectives) {
		toSerialize["objectives"] = o.Objectives
	}
	if !IsNil(o.EntitySearch) {
		toSerialize["entitySearch"] = o.EntitySearch
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SloConfigResponseDto) UnmarshalJSON(data []byte) (err error) {
	varSloConfigResponseDto := _SloConfigResponseDto{}

	err = json.Unmarshal(data, &varSloConfigResponseDto)

	if err != nil {
		return err
	}

	*o = SloConfigResponseDto(varSloConfigResponseDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "active")
		delete(additionalProperties, "name")
		delete(additionalProperties, "status")
		delete(additionalProperties, "indicator")
		delete(additionalProperties, "objectives")
		delete(additionalProperties, "entitySearch")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSloConfigResponseDto struct {
	value *SloConfigResponseDto
	isSet bool
}

func (v NullableSloConfigResponseDto) Get() *SloConfigResponseDto {
	return v.value
}

func (v *NullableSloConfigResponseDto) Set(val *SloConfigResponseDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSloConfigResponseDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSloConfigResponseDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloConfigResponseDto(val *SloConfigResponseDto) *NullableSloConfigResponseDto {
	return &NullableSloConfigResponseDto{value: val, isSet: true}
}

func (v NullableSloConfigResponseDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloConfigResponseDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
