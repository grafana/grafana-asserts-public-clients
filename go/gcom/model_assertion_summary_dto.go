/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-110859
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the AssertionSummaryDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssertionSummaryDto{}

// AssertionSummaryDto struct for AssertionSummaryDto
type AssertionSummaryDto struct {
	Category             *string `json:"category,omitempty"`
	Summary              *string `json:"summary,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AssertionSummaryDto AssertionSummaryDto

// NewAssertionSummaryDto instantiates a new AssertionSummaryDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssertionSummaryDto() *AssertionSummaryDto {
	this := AssertionSummaryDto{}
	return &this
}

// NewAssertionSummaryDtoWithDefaults instantiates a new AssertionSummaryDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssertionSummaryDtoWithDefaults() *AssertionSummaryDto {
	this := AssertionSummaryDto{}
	return &this
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *AssertionSummaryDto) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionSummaryDto) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *AssertionSummaryDto) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *AssertionSummaryDto) SetCategory(v string) {
	o.Category = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *AssertionSummaryDto) GetSummary() string {
	if o == nil || IsNil(o.Summary) {
		var ret string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionSummaryDto) GetSummaryOk() (*string, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *AssertionSummaryDto) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given string and assigns it to the Summary field.
func (o *AssertionSummaryDto) SetSummary(v string) {
	o.Summary = &v
}

func (o AssertionSummaryDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssertionSummaryDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AssertionSummaryDto) UnmarshalJSON(data []byte) (err error) {
	varAssertionSummaryDto := _AssertionSummaryDto{}

	err = json.Unmarshal(data, &varAssertionSummaryDto)

	if err != nil {
		return err
	}

	*o = AssertionSummaryDto(varAssertionSummaryDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "category")
		delete(additionalProperties, "summary")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAssertionSummaryDto struct {
	value *AssertionSummaryDto
	isSet bool
}

func (v NullableAssertionSummaryDto) Get() *AssertionSummaryDto {
	return v.value
}

func (v *NullableAssertionSummaryDto) Set(val *AssertionSummaryDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAssertionSummaryDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAssertionSummaryDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssertionSummaryDto(val *AssertionSummaryDto) *NullableAssertionSummaryDto {
	return &NullableAssertionSummaryDto{value: val, isSet: true}
}

func (v NullableAssertionSummaryDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssertionSummaryDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
