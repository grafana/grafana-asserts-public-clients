/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-055054
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the SearchDefinitionBindingDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchDefinitionBindingDto{}

// SearchDefinitionBindingDto struct for SearchDefinitionBindingDto
type SearchDefinitionBindingDto struct {
	Query                *string `json:"query,omitempty"`
	Type                 *string `json:"type,omitempty"`
	SubType              *string `json:"subType,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SearchDefinitionBindingDto SearchDefinitionBindingDto

// NewSearchDefinitionBindingDto instantiates a new SearchDefinitionBindingDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchDefinitionBindingDto() *SearchDefinitionBindingDto {
	this := SearchDefinitionBindingDto{}
	return &this
}

// NewSearchDefinitionBindingDtoWithDefaults instantiates a new SearchDefinitionBindingDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchDefinitionBindingDtoWithDefaults() *SearchDefinitionBindingDto {
	this := SearchDefinitionBindingDto{}
	return &this
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *SearchDefinitionBindingDto) GetQuery() string {
	if o == nil || IsNil(o.Query) {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchDefinitionBindingDto) GetQueryOk() (*string, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *SearchDefinitionBindingDto) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *SearchDefinitionBindingDto) SetQuery(v string) {
	o.Query = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SearchDefinitionBindingDto) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchDefinitionBindingDto) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SearchDefinitionBindingDto) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SearchDefinitionBindingDto) SetType(v string) {
	o.Type = &v
}

// GetSubType returns the SubType field value if set, zero value otherwise.
func (o *SearchDefinitionBindingDto) GetSubType() string {
	if o == nil || IsNil(o.SubType) {
		var ret string
		return ret
	}
	return *o.SubType
}

// GetSubTypeOk returns a tuple with the SubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchDefinitionBindingDto) GetSubTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SubType) {
		return nil, false
	}
	return o.SubType, true
}

// HasSubType returns a boolean if a field has been set.
func (o *SearchDefinitionBindingDto) HasSubType() bool {
	if o != nil && !IsNil(o.SubType) {
		return true
	}

	return false
}

// SetSubType gets a reference to the given string and assigns it to the SubType field.
func (o *SearchDefinitionBindingDto) SetSubType(v string) {
	o.SubType = &v
}

func (o SearchDefinitionBindingDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchDefinitionBindingDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.SubType) {
		toSerialize["subType"] = o.SubType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SearchDefinitionBindingDto) UnmarshalJSON(data []byte) (err error) {
	varSearchDefinitionBindingDto := _SearchDefinitionBindingDto{}

	err = json.Unmarshal(data, &varSearchDefinitionBindingDto)

	if err != nil {
		return err
	}

	*o = SearchDefinitionBindingDto(varSearchDefinitionBindingDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "query")
		delete(additionalProperties, "type")
		delete(additionalProperties, "subType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSearchDefinitionBindingDto struct {
	value *SearchDefinitionBindingDto
	isSet bool
}

func (v NullableSearchDefinitionBindingDto) Get() *SearchDefinitionBindingDto {
	return v.value
}

func (v *NullableSearchDefinitionBindingDto) Set(val *SearchDefinitionBindingDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchDefinitionBindingDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchDefinitionBindingDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchDefinitionBindingDto(val *SearchDefinitionBindingDto) *NullableSearchDefinitionBindingDto {
	return &NullableSearchDefinitionBindingDto{value: val, isSet: true}
}

func (v NullableSearchDefinitionBindingDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchDefinitionBindingDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
