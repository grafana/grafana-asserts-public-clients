/*
Asserts, Inc

Asserts Public API

API version: 2025.08.07-125604
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the RelationRuleDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RelationRuleDto{}

// RelationRuleDto struct for RelationRuleDto
type RelationRuleDto struct {
	Type                 *string                   `json:"type,omitempty"`
	StartEntityType      *string                   `json:"startEntityType,omitempty"`
	EndEntityType        *string                   `json:"endEntityType,omitempty"`
	DefinedBy            *RelationRuleDtoDefinedBy `json:"definedBy,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RelationRuleDto RelationRuleDto

// NewRelationRuleDto instantiates a new RelationRuleDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelationRuleDto() *RelationRuleDto {
	this := RelationRuleDto{}
	return &this
}

// NewRelationRuleDtoWithDefaults instantiates a new RelationRuleDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationRuleDtoWithDefaults() *RelationRuleDto {
	this := RelationRuleDto{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RelationRuleDto) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationRuleDto) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RelationRuleDto) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RelationRuleDto) SetType(v string) {
	o.Type = &v
}

// GetStartEntityType returns the StartEntityType field value if set, zero value otherwise.
func (o *RelationRuleDto) GetStartEntityType() string {
	if o == nil || IsNil(o.StartEntityType) {
		var ret string
		return ret
	}
	return *o.StartEntityType
}

// GetStartEntityTypeOk returns a tuple with the StartEntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationRuleDto) GetStartEntityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.StartEntityType) {
		return nil, false
	}
	return o.StartEntityType, true
}

// HasStartEntityType returns a boolean if a field has been set.
func (o *RelationRuleDto) HasStartEntityType() bool {
	if o != nil && !IsNil(o.StartEntityType) {
		return true
	}

	return false
}

// SetStartEntityType gets a reference to the given string and assigns it to the StartEntityType field.
func (o *RelationRuleDto) SetStartEntityType(v string) {
	o.StartEntityType = &v
}

// GetEndEntityType returns the EndEntityType field value if set, zero value otherwise.
func (o *RelationRuleDto) GetEndEntityType() string {
	if o == nil || IsNil(o.EndEntityType) {
		var ret string
		return ret
	}
	return *o.EndEntityType
}

// GetEndEntityTypeOk returns a tuple with the EndEntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationRuleDto) GetEndEntityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EndEntityType) {
		return nil, false
	}
	return o.EndEntityType, true
}

// HasEndEntityType returns a boolean if a field has been set.
func (o *RelationRuleDto) HasEndEntityType() bool {
	if o != nil && !IsNil(o.EndEntityType) {
		return true
	}

	return false
}

// SetEndEntityType gets a reference to the given string and assigns it to the EndEntityType field.
func (o *RelationRuleDto) SetEndEntityType(v string) {
	o.EndEntityType = &v
}

// GetDefinedBy returns the DefinedBy field value if set, zero value otherwise.
func (o *RelationRuleDto) GetDefinedBy() RelationRuleDtoDefinedBy {
	if o == nil || IsNil(o.DefinedBy) {
		var ret RelationRuleDtoDefinedBy
		return ret
	}
	return *o.DefinedBy
}

// GetDefinedByOk returns a tuple with the DefinedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationRuleDto) GetDefinedByOk() (*RelationRuleDtoDefinedBy, bool) {
	if o == nil || IsNil(o.DefinedBy) {
		return nil, false
	}
	return o.DefinedBy, true
}

// HasDefinedBy returns a boolean if a field has been set.
func (o *RelationRuleDto) HasDefinedBy() bool {
	if o != nil && !IsNil(o.DefinedBy) {
		return true
	}

	return false
}

// SetDefinedBy gets a reference to the given RelationRuleDtoDefinedBy and assigns it to the DefinedBy field.
func (o *RelationRuleDto) SetDefinedBy(v RelationRuleDtoDefinedBy) {
	o.DefinedBy = &v
}

func (o RelationRuleDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RelationRuleDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.StartEntityType) {
		toSerialize["startEntityType"] = o.StartEntityType
	}
	if !IsNil(o.EndEntityType) {
		toSerialize["endEntityType"] = o.EndEntityType
	}
	if !IsNil(o.DefinedBy) {
		toSerialize["definedBy"] = o.DefinedBy
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RelationRuleDto) UnmarshalJSON(data []byte) (err error) {
	varRelationRuleDto := _RelationRuleDto{}

	err = json.Unmarshal(data, &varRelationRuleDto)

	if err != nil {
		return err
	}

	*o = RelationRuleDto(varRelationRuleDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "startEntityType")
		delete(additionalProperties, "endEntityType")
		delete(additionalProperties, "definedBy")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRelationRuleDto struct {
	value *RelationRuleDto
	isSet bool
}

func (v NullableRelationRuleDto) Get() *RelationRuleDto {
	return v.value
}

func (v *NullableRelationRuleDto) Set(val *RelationRuleDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationRuleDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationRuleDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationRuleDto(val *RelationRuleDto) *NullableRelationRuleDto {
	return &NullableRelationRuleDto{value: val, isSet: true}
}

func (v NullableRelationRuleDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationRuleDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
