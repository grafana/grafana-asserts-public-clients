/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-110859
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// IncidentControllerAPIService IncidentControllerAPI service
type IncidentControllerAPIService service

type ApiGetIncidentsRequest struct {
	ctx                context.Context
	ApiService         *IncidentControllerAPIService
	incidentRequestDto *IncidentRequestDto
	xScopeOrgID        *string
}

func (r ApiGetIncidentsRequest) IncidentRequestDto(incidentRequestDto IncidentRequestDto) ApiGetIncidentsRequest {
	r.incidentRequestDto = &incidentRequestDto
	return r
}

// Grafana Tenant/Stack ID
func (r ApiGetIncidentsRequest) XScopeOrgID(xScopeOrgID string) ApiGetIncidentsRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiGetIncidentsRequest) Execute() (*IncidentGroupListDto, *http.Response, error) {
	return r.ApiService.GetIncidentsExecute(r)
}

/*
GetIncidents Method for GetIncidents

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetIncidentsRequest
*/
func (a *IncidentControllerAPIService) GetIncidents(ctx context.Context) ApiGetIncidentsRequest {
	return ApiGetIncidentsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return IncidentGroupListDto
func (a *IncidentControllerAPIService) GetIncidentsExecute(r ApiGetIncidentsRequest) (*IncidentGroupListDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *IncidentGroupListDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IncidentControllerAPIService.GetIncidents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/incidents"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.incidentRequestDto == nil {
		return localVarReturnValue, nil, reportError("incidentRequestDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	// body params
	localVarPostBody = r.incidentRequestDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSloIncidentsRequest struct {
	ctx                   context.Context
	ApiService            *IncidentControllerAPIService
	sloIncidentRequestDto *SloIncidentRequestDto
	xScopeOrgID           *string
}

func (r ApiGetSloIncidentsRequest) SloIncidentRequestDto(sloIncidentRequestDto SloIncidentRequestDto) ApiGetSloIncidentsRequest {
	r.sloIncidentRequestDto = &sloIncidentRequestDto
	return r
}

// Grafana Tenant/Stack ID
func (r ApiGetSloIncidentsRequest) XScopeOrgID(xScopeOrgID string) ApiGetSloIncidentsRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiGetSloIncidentsRequest) Execute() (*SloIncidentListDto, *http.Response, error) {
	return r.ApiService.GetSloIncidentsExecute(r)
}

/*
GetSloIncidents Method for GetSloIncidents

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSloIncidentsRequest
*/
func (a *IncidentControllerAPIService) GetSloIncidents(ctx context.Context) ApiGetSloIncidentsRequest {
	return ApiGetSloIncidentsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SloIncidentListDto
func (a *IncidentControllerAPIService) GetSloIncidentsExecute(r ApiGetSloIncidentsRequest) (*SloIncidentListDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SloIncidentListDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IncidentControllerAPIService.GetSloIncidents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/slo/incidents"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sloIncidentRequestDto == nil {
		return localVarReturnValue, nil, reportError("sloIncidentRequestDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	// body params
	localVarPostBody = r.sloIncidentRequestDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTopIncidentsRequest struct {
	ctx                context.Context
	ApiService         *IncidentControllerAPIService
	incidentRequestDto *IncidentRequestDto
	xScopeOrgID        *string
}

func (r ApiGetTopIncidentsRequest) IncidentRequestDto(incidentRequestDto IncidentRequestDto) ApiGetTopIncidentsRequest {
	r.incidentRequestDto = &incidentRequestDto
	return r
}

// Grafana Tenant/Stack ID
func (r ApiGetTopIncidentsRequest) XScopeOrgID(xScopeOrgID string) ApiGetTopIncidentsRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiGetTopIncidentsRequest) Execute() (*IncidentSummaryListDto, *http.Response, error) {
	return r.ApiService.GetTopIncidentsExecute(r)
}

/*
GetTopIncidents Method for GetTopIncidents

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetTopIncidentsRequest
*/
func (a *IncidentControllerAPIService) GetTopIncidents(ctx context.Context) ApiGetTopIncidentsRequest {
	return ApiGetTopIncidentsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return IncidentSummaryListDto
func (a *IncidentControllerAPIService) GetTopIncidentsExecute(r ApiGetTopIncidentsRequest) (*IncidentSummaryListDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *IncidentSummaryListDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IncidentControllerAPIService.GetTopIncidents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/incidents/top"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.incidentRequestDto == nil {
		return localVarReturnValue, nil, reportError("incidentRequestDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	// body params
	localVarPostBody = r.incidentRequestDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
