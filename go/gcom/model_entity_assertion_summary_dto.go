/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-110859
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the EntityAssertionSummaryDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntityAssertionSummaryDto{}

// EntityAssertionSummaryDto struct for EntityAssertionSummaryDto
type EntityAssertionSummaryDto struct {
	Type                 *string                             `json:"type,omitempty"`
	Name                 *string                             `json:"name,omitempty"`
	Scope                map[string]interface{}              `json:"scope,omitempty"`
	TimeLines            []EntityAssertionSummaryTimeLineDto `json:"timeLines,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EntityAssertionSummaryDto EntityAssertionSummaryDto

// NewEntityAssertionSummaryDto instantiates a new EntityAssertionSummaryDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityAssertionSummaryDto() *EntityAssertionSummaryDto {
	this := EntityAssertionSummaryDto{}
	return &this
}

// NewEntityAssertionSummaryDtoWithDefaults instantiates a new EntityAssertionSummaryDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityAssertionSummaryDtoWithDefaults() *EntityAssertionSummaryDto {
	this := EntityAssertionSummaryDto{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EntityAssertionSummaryDto) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityAssertionSummaryDto) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EntityAssertionSummaryDto) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EntityAssertionSummaryDto) SetType(v string) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EntityAssertionSummaryDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityAssertionSummaryDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EntityAssertionSummaryDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EntityAssertionSummaryDto) SetName(v string) {
	o.Name = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *EntityAssertionSummaryDto) GetScope() map[string]interface{} {
	if o == nil || IsNil(o.Scope) {
		var ret map[string]interface{}
		return ret
	}
	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityAssertionSummaryDto) GetScopeOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Scope) {
		return map[string]interface{}{}, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *EntityAssertionSummaryDto) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given map[string]interface{} and assigns it to the Scope field.
func (o *EntityAssertionSummaryDto) SetScope(v map[string]interface{}) {
	o.Scope = v
}

// GetTimeLines returns the TimeLines field value if set, zero value otherwise.
func (o *EntityAssertionSummaryDto) GetTimeLines() []EntityAssertionSummaryTimeLineDto {
	if o == nil || IsNil(o.TimeLines) {
		var ret []EntityAssertionSummaryTimeLineDto
		return ret
	}
	return o.TimeLines
}

// GetTimeLinesOk returns a tuple with the TimeLines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityAssertionSummaryDto) GetTimeLinesOk() ([]EntityAssertionSummaryTimeLineDto, bool) {
	if o == nil || IsNil(o.TimeLines) {
		return nil, false
	}
	return o.TimeLines, true
}

// HasTimeLines returns a boolean if a field has been set.
func (o *EntityAssertionSummaryDto) HasTimeLines() bool {
	if o != nil && !IsNil(o.TimeLines) {
		return true
	}

	return false
}

// SetTimeLines gets a reference to the given []EntityAssertionSummaryTimeLineDto and assigns it to the TimeLines field.
func (o *EntityAssertionSummaryDto) SetTimeLines(v []EntityAssertionSummaryTimeLineDto) {
	o.TimeLines = v
}

func (o EntityAssertionSummaryDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntityAssertionSummaryDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.TimeLines) {
		toSerialize["timeLines"] = o.TimeLines
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EntityAssertionSummaryDto) UnmarshalJSON(data []byte) (err error) {
	varEntityAssertionSummaryDto := _EntityAssertionSummaryDto{}

	err = json.Unmarshal(data, &varEntityAssertionSummaryDto)

	if err != nil {
		return err
	}

	*o = EntityAssertionSummaryDto(varEntityAssertionSummaryDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "scope")
		delete(additionalProperties, "timeLines")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEntityAssertionSummaryDto struct {
	value *EntityAssertionSummaryDto
	isSet bool
}

func (v NullableEntityAssertionSummaryDto) Get() *EntityAssertionSummaryDto {
	return v.value
}

func (v *NullableEntityAssertionSummaryDto) Set(val *EntityAssertionSummaryDto) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityAssertionSummaryDto) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityAssertionSummaryDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityAssertionSummaryDto(val *EntityAssertionSummaryDto) *NullableEntityAssertionSummaryDto {
	return &NullableEntityAssertionSummaryDto{value: val, isSet: true}
}

func (v NullableEntityAssertionSummaryDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityAssertionSummaryDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
