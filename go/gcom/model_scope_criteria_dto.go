/*
Asserts, Inc

Asserts Public API

API version: 1.0.0
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the ScopeCriteriaDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScopeCriteriaDto{}

// ScopeCriteriaDto struct for ScopeCriteriaDto
type ScopeCriteriaDto struct {
	NameAndValues        map[string][]string `json:"nameAndValues,omitempty"`
	ScopeCriteriaMap     map[string][]string `json:"scopeCriteriaMap,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ScopeCriteriaDto ScopeCriteriaDto

// NewScopeCriteriaDto instantiates a new ScopeCriteriaDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScopeCriteriaDto() *ScopeCriteriaDto {
	this := ScopeCriteriaDto{}
	return &this
}

// NewScopeCriteriaDtoWithDefaults instantiates a new ScopeCriteriaDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScopeCriteriaDtoWithDefaults() *ScopeCriteriaDto {
	this := ScopeCriteriaDto{}
	return &this
}

// GetNameAndValues returns the NameAndValues field value if set, zero value otherwise.
func (o *ScopeCriteriaDto) GetNameAndValues() map[string][]string {
	if o == nil || IsNil(o.NameAndValues) {
		var ret map[string][]string
		return ret
	}
	return o.NameAndValues
}

// GetNameAndValuesOk returns a tuple with the NameAndValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopeCriteriaDto) GetNameAndValuesOk() (map[string][]string, bool) {
	if o == nil || IsNil(o.NameAndValues) {
		return map[string][]string{}, false
	}
	return o.NameAndValues, true
}

// HasNameAndValues returns a boolean if a field has been set.
func (o *ScopeCriteriaDto) HasNameAndValues() bool {
	if o != nil && !IsNil(o.NameAndValues) {
		return true
	}

	return false
}

// SetNameAndValues gets a reference to the given map[string][]string and assigns it to the NameAndValues field.
func (o *ScopeCriteriaDto) SetNameAndValues(v map[string][]string) {
	o.NameAndValues = v
}

// GetScopeCriteriaMap returns the ScopeCriteriaMap field value if set, zero value otherwise.
func (o *ScopeCriteriaDto) GetScopeCriteriaMap() map[string][]string {
	if o == nil || IsNil(o.ScopeCriteriaMap) {
		var ret map[string][]string
		return ret
	}
	return o.ScopeCriteriaMap
}

// GetScopeCriteriaMapOk returns a tuple with the ScopeCriteriaMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopeCriteriaDto) GetScopeCriteriaMapOk() (map[string][]string, bool) {
	if o == nil || IsNil(o.ScopeCriteriaMap) {
		return map[string][]string{}, false
	}
	return o.ScopeCriteriaMap, true
}

// HasScopeCriteriaMap returns a boolean if a field has been set.
func (o *ScopeCriteriaDto) HasScopeCriteriaMap() bool {
	if o != nil && !IsNil(o.ScopeCriteriaMap) {
		return true
	}

	return false
}

// SetScopeCriteriaMap gets a reference to the given map[string][]string and assigns it to the ScopeCriteriaMap field.
func (o *ScopeCriteriaDto) SetScopeCriteriaMap(v map[string][]string) {
	o.ScopeCriteriaMap = v
}

func (o ScopeCriteriaDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScopeCriteriaDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NameAndValues) {
		toSerialize["nameAndValues"] = o.NameAndValues
	}
	if !IsNil(o.ScopeCriteriaMap) {
		toSerialize["scopeCriteriaMap"] = o.ScopeCriteriaMap
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ScopeCriteriaDto) UnmarshalJSON(data []byte) (err error) {
	varScopeCriteriaDto := _ScopeCriteriaDto{}

	err = json.Unmarshal(data, &varScopeCriteriaDto)

	if err != nil {
		return err
	}

	*o = ScopeCriteriaDto(varScopeCriteriaDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "nameAndValues")
		delete(additionalProperties, "scopeCriteriaMap")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableScopeCriteriaDto struct {
	value *ScopeCriteriaDto
	isSet bool
}

func (v NullableScopeCriteriaDto) Get() *ScopeCriteriaDto {
	return v.value
}

func (v *NullableScopeCriteriaDto) Set(val *ScopeCriteriaDto) {
	v.value = val
	v.isSet = true
}

func (v NullableScopeCriteriaDto) IsSet() bool {
	return v.isSet
}

func (v *NullableScopeCriteriaDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScopeCriteriaDto(val *ScopeCriteriaDto) *NullableScopeCriteriaDto {
	return &NullableScopeCriteriaDto{value: val, isSet: true}
}

func (v NullableScopeCriteriaDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScopeCriteriaDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
