/*
Asserts, Inc

Asserts Public API

API version: 1.0.0
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
	"reflect"
	"strings"
)

// checks if the RequestSliConfigDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequestSliConfigDto{}

// RequestSliConfigDto struct for RequestSliConfigDto
type RequestSliConfigDto struct {
	SliConfigDto
	BadEventCount        *string `json:"badEventCount,omitempty"`
	TotalEventCount      *string `json:"totalEventCount,omitempty"`
	Gauge                *bool   `json:"gauge,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RequestSliConfigDto RequestSliConfigDto

// NewRequestSliConfigDto instantiates a new RequestSliConfigDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestSliConfigDto(kind string) *RequestSliConfigDto {
	this := RequestSliConfigDto{}
	this.Kind = kind
	return &this
}

// NewRequestSliConfigDtoWithDefaults instantiates a new RequestSliConfigDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestSliConfigDtoWithDefaults() *RequestSliConfigDto {
	this := RequestSliConfigDto{}
	return &this
}

// GetBadEventCount returns the BadEventCount field value if set, zero value otherwise.
func (o *RequestSliConfigDto) GetBadEventCount() string {
	if o == nil || IsNil(o.BadEventCount) {
		var ret string
		return ret
	}
	return *o.BadEventCount
}

// GetBadEventCountOk returns a tuple with the BadEventCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestSliConfigDto) GetBadEventCountOk() (*string, bool) {
	if o == nil || IsNil(o.BadEventCount) {
		return nil, false
	}
	return o.BadEventCount, true
}

// HasBadEventCount returns a boolean if a field has been set.
func (o *RequestSliConfigDto) HasBadEventCount() bool {
	if o != nil && !IsNil(o.BadEventCount) {
		return true
	}

	return false
}

// SetBadEventCount gets a reference to the given string and assigns it to the BadEventCount field.
func (o *RequestSliConfigDto) SetBadEventCount(v string) {
	o.BadEventCount = &v
}

// GetTotalEventCount returns the TotalEventCount field value if set, zero value otherwise.
func (o *RequestSliConfigDto) GetTotalEventCount() string {
	if o == nil || IsNil(o.TotalEventCount) {
		var ret string
		return ret
	}
	return *o.TotalEventCount
}

// GetTotalEventCountOk returns a tuple with the TotalEventCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestSliConfigDto) GetTotalEventCountOk() (*string, bool) {
	if o == nil || IsNil(o.TotalEventCount) {
		return nil, false
	}
	return o.TotalEventCount, true
}

// HasTotalEventCount returns a boolean if a field has been set.
func (o *RequestSliConfigDto) HasTotalEventCount() bool {
	if o != nil && !IsNil(o.TotalEventCount) {
		return true
	}

	return false
}

// SetTotalEventCount gets a reference to the given string and assigns it to the TotalEventCount field.
func (o *RequestSliConfigDto) SetTotalEventCount(v string) {
	o.TotalEventCount = &v
}

// GetGauge returns the Gauge field value if set, zero value otherwise.
func (o *RequestSliConfigDto) GetGauge() bool {
	if o == nil || IsNil(o.Gauge) {
		var ret bool
		return ret
	}
	return *o.Gauge
}

// GetGaugeOk returns a tuple with the Gauge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestSliConfigDto) GetGaugeOk() (*bool, bool) {
	if o == nil || IsNil(o.Gauge) {
		return nil, false
	}
	return o.Gauge, true
}

// HasGauge returns a boolean if a field has been set.
func (o *RequestSliConfigDto) HasGauge() bool {
	if o != nil && !IsNil(o.Gauge) {
		return true
	}

	return false
}

// SetGauge gets a reference to the given bool and assigns it to the Gauge field.
func (o *RequestSliConfigDto) SetGauge(v bool) {
	o.Gauge = &v
}

func (o RequestSliConfigDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequestSliConfigDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedSliConfigDto, errSliConfigDto := json.Marshal(o.SliConfigDto)
	if errSliConfigDto != nil {
		return map[string]interface{}{}, errSliConfigDto
	}
	errSliConfigDto = json.Unmarshal([]byte(serializedSliConfigDto), &toSerialize)
	if errSliConfigDto != nil {
		return map[string]interface{}{}, errSliConfigDto
	}
	if !IsNil(o.BadEventCount) {
		toSerialize["badEventCount"] = o.BadEventCount
	}
	if !IsNil(o.TotalEventCount) {
		toSerialize["totalEventCount"] = o.TotalEventCount
	}
	if !IsNil(o.Gauge) {
		toSerialize["gauge"] = o.Gauge
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RequestSliConfigDto) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	type RequestSliConfigDtoWithoutEmbeddedStruct struct {
		BadEventCount   *string `json:"badEventCount,omitempty"`
		TotalEventCount *string `json:"totalEventCount,omitempty"`
		Gauge           *bool   `json:"gauge,omitempty"`
	}

	varRequestSliConfigDtoWithoutEmbeddedStruct := RequestSliConfigDtoWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varRequestSliConfigDtoWithoutEmbeddedStruct)
	if err == nil {
		varRequestSliConfigDto := _RequestSliConfigDto{}
		varRequestSliConfigDto.BadEventCount = varRequestSliConfigDtoWithoutEmbeddedStruct.BadEventCount
		varRequestSliConfigDto.TotalEventCount = varRequestSliConfigDtoWithoutEmbeddedStruct.TotalEventCount
		varRequestSliConfigDto.Gauge = varRequestSliConfigDtoWithoutEmbeddedStruct.Gauge
		*o = RequestSliConfigDto(varRequestSliConfigDto)
	} else {
		return err
	}

	varRequestSliConfigDto := _RequestSliConfigDto{}

	err = json.Unmarshal(data, &varRequestSliConfigDto)
	if err == nil {
		o.SliConfigDto = varRequestSliConfigDto.SliConfigDto
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "badEventCount")
		delete(additionalProperties, "totalEventCount")
		delete(additionalProperties, "gauge")

		// remove fields from embedded structs
		reflectSliConfigDto := reflect.ValueOf(o.SliConfigDto)
		for i := 0; i < reflectSliConfigDto.Type().NumField(); i++ {
			t := reflectSliConfigDto.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRequestSliConfigDto struct {
	value *RequestSliConfigDto
	isSet bool
}

func (v NullableRequestSliConfigDto) Get() *RequestSliConfigDto {
	return v.value
}

func (v *NullableRequestSliConfigDto) Set(val *RequestSliConfigDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestSliConfigDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestSliConfigDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestSliConfigDto(val *RequestSliConfigDto) *NullableRequestSliConfigDto {
	return &NullableRequestSliConfigDto{value: val, isSet: true}
}

func (v NullableRequestSliConfigDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestSliConfigDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
