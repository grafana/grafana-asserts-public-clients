/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-110859
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the AlertConfigDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertConfigDto{}

// AlertConfigDto struct for AlertConfigDto
type AlertConfigDto struct {
	Name                 *string           `json:"name,omitempty"`
	MatchLabels          map[string]string `json:"matchLabels,omitempty"`
	AlertLabels          map[string]string `json:"alertLabels,omitempty"`
	Silenced             *bool             `json:"silenced,omitempty"`
	For                  *string           `json:"for,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AlertConfigDto AlertConfigDto

// NewAlertConfigDto instantiates a new AlertConfigDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertConfigDto() *AlertConfigDto {
	this := AlertConfigDto{}
	return &this
}

// NewAlertConfigDtoWithDefaults instantiates a new AlertConfigDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertConfigDtoWithDefaults() *AlertConfigDto {
	this := AlertConfigDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AlertConfigDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertConfigDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AlertConfigDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AlertConfigDto) SetName(v string) {
	o.Name = &v
}

// GetMatchLabels returns the MatchLabels field value if set, zero value otherwise.
func (o *AlertConfigDto) GetMatchLabels() map[string]string {
	if o == nil || IsNil(o.MatchLabels) {
		var ret map[string]string
		return ret
	}
	return o.MatchLabels
}

// GetMatchLabelsOk returns a tuple with the MatchLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertConfigDto) GetMatchLabelsOk() (map[string]string, bool) {
	if o == nil || IsNil(o.MatchLabels) {
		return map[string]string{}, false
	}
	return o.MatchLabels, true
}

// HasMatchLabels returns a boolean if a field has been set.
func (o *AlertConfigDto) HasMatchLabels() bool {
	if o != nil && !IsNil(o.MatchLabels) {
		return true
	}

	return false
}

// SetMatchLabels gets a reference to the given map[string]string and assigns it to the MatchLabels field.
func (o *AlertConfigDto) SetMatchLabels(v map[string]string) {
	o.MatchLabels = v
}

// GetAlertLabels returns the AlertLabels field value if set, zero value otherwise.
func (o *AlertConfigDto) GetAlertLabels() map[string]string {
	if o == nil || IsNil(o.AlertLabels) {
		var ret map[string]string
		return ret
	}
	return o.AlertLabels
}

// GetAlertLabelsOk returns a tuple with the AlertLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertConfigDto) GetAlertLabelsOk() (map[string]string, bool) {
	if o == nil || IsNil(o.AlertLabels) {
		return map[string]string{}, false
	}
	return o.AlertLabels, true
}

// HasAlertLabels returns a boolean if a field has been set.
func (o *AlertConfigDto) HasAlertLabels() bool {
	if o != nil && !IsNil(o.AlertLabels) {
		return true
	}

	return false
}

// SetAlertLabels gets a reference to the given map[string]string and assigns it to the AlertLabels field.
func (o *AlertConfigDto) SetAlertLabels(v map[string]string) {
	o.AlertLabels = v
}

// GetSilenced returns the Silenced field value if set, zero value otherwise.
func (o *AlertConfigDto) GetSilenced() bool {
	if o == nil || IsNil(o.Silenced) {
		var ret bool
		return ret
	}
	return *o.Silenced
}

// GetSilencedOk returns a tuple with the Silenced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertConfigDto) GetSilencedOk() (*bool, bool) {
	if o == nil || IsNil(o.Silenced) {
		return nil, false
	}
	return o.Silenced, true
}

// HasSilenced returns a boolean if a field has been set.
func (o *AlertConfigDto) HasSilenced() bool {
	if o != nil && !IsNil(o.Silenced) {
		return true
	}

	return false
}

// SetSilenced gets a reference to the given bool and assigns it to the Silenced field.
func (o *AlertConfigDto) SetSilenced(v bool) {
	o.Silenced = &v
}

// GetFor returns the For field value if set, zero value otherwise.
func (o *AlertConfigDto) GetFor() string {
	if o == nil || IsNil(o.For) {
		var ret string
		return ret
	}
	return *o.For
}

// GetForOk returns a tuple with the For field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertConfigDto) GetForOk() (*string, bool) {
	if o == nil || IsNil(o.For) {
		return nil, false
	}
	return o.For, true
}

// HasFor returns a boolean if a field has been set.
func (o *AlertConfigDto) HasFor() bool {
	if o != nil && !IsNil(o.For) {
		return true
	}

	return false
}

// SetFor gets a reference to the given string and assigns it to the For field.
func (o *AlertConfigDto) SetFor(v string) {
	o.For = &v
}

func (o AlertConfigDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertConfigDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.MatchLabels) {
		toSerialize["matchLabels"] = o.MatchLabels
	}
	if !IsNil(o.AlertLabels) {
		toSerialize["alertLabels"] = o.AlertLabels
	}
	if !IsNil(o.Silenced) {
		toSerialize["silenced"] = o.Silenced
	}
	if !IsNil(o.For) {
		toSerialize["for"] = o.For
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AlertConfigDto) UnmarshalJSON(data []byte) (err error) {
	varAlertConfigDto := _AlertConfigDto{}

	err = json.Unmarshal(data, &varAlertConfigDto)

	if err != nil {
		return err
	}

	*o = AlertConfigDto(varAlertConfigDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "matchLabels")
		delete(additionalProperties, "alertLabels")
		delete(additionalProperties, "silenced")
		delete(additionalProperties, "for")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAlertConfigDto struct {
	value *AlertConfigDto
	isSet bool
}

func (v NullableAlertConfigDto) Get() *AlertConfigDto {
	return v.value
}

func (v *NullableAlertConfigDto) Set(val *AlertConfigDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertConfigDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertConfigDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertConfigDto(val *AlertConfigDto) *NullableAlertConfigDto {
	return &NullableAlertConfigDto{value: val, isSet: true}
}

func (v NullableAlertConfigDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertConfigDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
