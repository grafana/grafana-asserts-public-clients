/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-110859
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the AssertionInfoDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssertionInfoDto{}

// AssertionInfoDto struct for AssertionInfoDto
type AssertionInfoDto struct {
	Name                 *string                    `json:"name,omitempty"`
	Description          *string                    `json:"description,omitempty"`
	Group                *string                    `json:"group,omitempty"`
	Expression           *string                    `json:"expression,omitempty"`
	Interval             *string                    `json:"interval,omitempty"`
	Labels               map[string]string          `json:"labels,omitempty"`
	Metrics              []AssertionMetricDetailDto `json:"metrics,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AssertionInfoDto AssertionInfoDto

// NewAssertionInfoDto instantiates a new AssertionInfoDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssertionInfoDto() *AssertionInfoDto {
	this := AssertionInfoDto{}
	return &this
}

// NewAssertionInfoDtoWithDefaults instantiates a new AssertionInfoDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssertionInfoDtoWithDefaults() *AssertionInfoDto {
	this := AssertionInfoDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AssertionInfoDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionInfoDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AssertionInfoDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AssertionInfoDto) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AssertionInfoDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionInfoDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AssertionInfoDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AssertionInfoDto) SetDescription(v string) {
	o.Description = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *AssertionInfoDto) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionInfoDto) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *AssertionInfoDto) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *AssertionInfoDto) SetGroup(v string) {
	o.Group = &v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *AssertionInfoDto) GetExpression() string {
	if o == nil || IsNil(o.Expression) {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionInfoDto) GetExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.Expression) {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *AssertionInfoDto) HasExpression() bool {
	if o != nil && !IsNil(o.Expression) {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *AssertionInfoDto) SetExpression(v string) {
	o.Expression = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *AssertionInfoDto) GetInterval() string {
	if o == nil || IsNil(o.Interval) {
		var ret string
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionInfoDto) GetIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *AssertionInfoDto) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given string and assigns it to the Interval field.
func (o *AssertionInfoDto) SetInterval(v string) {
	o.Interval = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *AssertionInfoDto) GetLabels() map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionInfoDto) GetLabelsOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return map[string]string{}, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *AssertionInfoDto) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *AssertionInfoDto) SetLabels(v map[string]string) {
	o.Labels = v
}

// GetMetrics returns the Metrics field value if set, zero value otherwise.
func (o *AssertionInfoDto) GetMetrics() []AssertionMetricDetailDto {
	if o == nil || IsNil(o.Metrics) {
		var ret []AssertionMetricDetailDto
		return ret
	}
	return o.Metrics
}

// GetMetricsOk returns a tuple with the Metrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionInfoDto) GetMetricsOk() ([]AssertionMetricDetailDto, bool) {
	if o == nil || IsNil(o.Metrics) {
		return nil, false
	}
	return o.Metrics, true
}

// HasMetrics returns a boolean if a field has been set.
func (o *AssertionInfoDto) HasMetrics() bool {
	if o != nil && !IsNil(o.Metrics) {
		return true
	}

	return false
}

// SetMetrics gets a reference to the given []AssertionMetricDetailDto and assigns it to the Metrics field.
func (o *AssertionInfoDto) SetMetrics(v []AssertionMetricDetailDto) {
	o.Metrics = v
}

func (o AssertionInfoDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssertionInfoDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Expression) {
		toSerialize["expression"] = o.Expression
	}
	if !IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Metrics) {
		toSerialize["metrics"] = o.Metrics
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AssertionInfoDto) UnmarshalJSON(data []byte) (err error) {
	varAssertionInfoDto := _AssertionInfoDto{}

	err = json.Unmarshal(data, &varAssertionInfoDto)

	if err != nil {
		return err
	}

	*o = AssertionInfoDto(varAssertionInfoDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "group")
		delete(additionalProperties, "expression")
		delete(additionalProperties, "interval")
		delete(additionalProperties, "labels")
		delete(additionalProperties, "metrics")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAssertionInfoDto struct {
	value *AssertionInfoDto
	isSet bool
}

func (v NullableAssertionInfoDto) Get() *AssertionInfoDto {
	return v.value
}

func (v *NullableAssertionInfoDto) Set(val *AssertionInfoDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAssertionInfoDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAssertionInfoDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssertionInfoDto(val *AssertionInfoDto) *NullableAssertionInfoDto {
	return &NullableAssertionInfoDto{value: val, isSet: true}
}

func (v NullableAssertionInfoDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssertionInfoDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
