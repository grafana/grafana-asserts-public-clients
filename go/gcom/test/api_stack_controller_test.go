/*
Asserts, Inc

Testing StackControllerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package gcom

import (
	"context"
	"testing"

	openapiclient "github.com/grafana/grafana-asserts-public-clients/go/gcom"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_gcom_StackControllerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test StackControllerAPIService CreateStack", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.StackControllerAPI.CreateStack(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StackControllerAPIService DetectAndAutoConfigureDatasets", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.StackControllerAPI.DetectAndAutoConfigureDatasets(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StackControllerAPIService DisableStack", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.StackControllerAPI.DisableStack(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StackControllerAPIService DiscoverVendorsForCurrentTenant", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.StackControllerAPI.DiscoverVendorsForCurrentTenant(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StackControllerAPIService EnableStack", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.StackControllerAPI.EnableStack(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StackControllerAPIService EnableV2Stack", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.StackControllerAPI.EnableV2Stack(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StackControllerAPIService FetchDataset", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dataset string

		resp, httpRes, err := apiClient.StackControllerAPI.FetchDataset(context.Background(), dataset).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StackControllerAPIService GetDatasetVendors", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dataset string

		resp, httpRes, err := apiClient.StackControllerAPI.GetDatasetVendors(context.Background(), dataset).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StackControllerAPIService GetDatasets", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.StackControllerAPI.GetDatasets(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StackControllerAPIService GetStackDetail", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.StackControllerAPI.GetStackDetail(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StackControllerAPIService GetStackEnable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.StackControllerAPI.GetStackEnable(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StackControllerAPIService GetStackUpdateBucket", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.StackControllerAPI.GetStackUpdateBucket(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StackControllerAPIService GetStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.StackControllerAPI.GetStatus(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StackControllerAPIService PutV2Stack", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.StackControllerAPI.PutV2Stack(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StackControllerAPIService RunDatasetSanityChecks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dataset string

		resp, httpRes, err := apiClient.StackControllerAPI.RunDatasetSanityChecks(context.Background(), dataset).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StackControllerAPIService RunMetricSanityChecks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.StackControllerAPI.RunMetricSanityChecks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StackControllerAPIService UpdateDataset", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.StackControllerAPI.UpdateDataset(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StackControllerAPIService UpdateStack", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.StackControllerAPI.UpdateStack(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StackControllerAPIService UpdateStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var status string

		resp, httpRes, err := apiClient.StackControllerAPI.UpdateStatus(context.Background(), status).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
