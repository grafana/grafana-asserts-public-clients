/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-112305
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// EntityAssertionsControllerAPIService EntityAssertionsControllerAPI service
type EntityAssertionsControllerAPIService service

type ApiEntityAssertionsDetailsRequest struct {
	ctx                             context.Context
	ApiService                      *EntityAssertionsControllerAPIService
	entityAssertionMetricRequestDto *EntityAssertionMetricRequestDto
	xScopeOrgID                     *string
}

func (r ApiEntityAssertionsDetailsRequest) EntityAssertionMetricRequestDto(entityAssertionMetricRequestDto EntityAssertionMetricRequestDto) ApiEntityAssertionsDetailsRequest {
	r.entityAssertionMetricRequestDto = &entityAssertionMetricRequestDto
	return r
}

// Grafana Tenant/Stack ID
func (r ApiEntityAssertionsDetailsRequest) XScopeOrgID(xScopeOrgID string) ApiEntityAssertionsDetailsRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiEntityAssertionsDetailsRequest) Execute() (*EntityAssertionDetailsDto, *http.Response, error) {
	return r.ApiService.EntityAssertionsDetailsExecute(r)
}

/*
EntityAssertionsDetails Method for EntityAssertionsDetails

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiEntityAssertionsDetailsRequest
*/
func (a *EntityAssertionsControllerAPIService) EntityAssertionsDetails(ctx context.Context) ApiEntityAssertionsDetailsRequest {
	return ApiEntityAssertionsDetailsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EntityAssertionDetailsDto
func (a *EntityAssertionsControllerAPIService) EntityAssertionsDetailsExecute(r ApiEntityAssertionsDetailsRequest) (*EntityAssertionDetailsDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EntityAssertionDetailsDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntityAssertionsControllerAPIService.EntityAssertionsDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/assertions/entity-metric"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.entityAssertionMetricRequestDto == nil {
		return localVarReturnValue, nil, reportError("entityAssertionMetricRequestDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	// body params
	localVarPostBody = r.entityAssertionMetricRequestDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAssertionAffectedEntitiesRequest struct {
	ctx                             context.Context
	ApiService                      *EntityAssertionsControllerAPIService
	entityAssertionMetricRequestDto *EntityAssertionMetricRequestDto
	xScopeOrgID                     *string
}

func (r ApiGetAssertionAffectedEntitiesRequest) EntityAssertionMetricRequestDto(entityAssertionMetricRequestDto EntityAssertionMetricRequestDto) ApiGetAssertionAffectedEntitiesRequest {
	r.entityAssertionMetricRequestDto = &entityAssertionMetricRequestDto
	return r
}

// Grafana Tenant/Stack ID
func (r ApiGetAssertionAffectedEntitiesRequest) XScopeOrgID(xScopeOrgID string) ApiGetAssertionAffectedEntitiesRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiGetAssertionAffectedEntitiesRequest) Execute() (*AffectedEntityDetailsDto, *http.Response, error) {
	return r.ApiService.GetAssertionAffectedEntitiesExecute(r)
}

/*
GetAssertionAffectedEntities Method for GetAssertionAffectedEntities

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetAssertionAffectedEntitiesRequest
*/
func (a *EntityAssertionsControllerAPIService) GetAssertionAffectedEntities(ctx context.Context) ApiGetAssertionAffectedEntitiesRequest {
	return ApiGetAssertionAffectedEntitiesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AffectedEntityDetailsDto
func (a *EntityAssertionsControllerAPIService) GetAssertionAffectedEntitiesExecute(r ApiGetAssertionAffectedEntitiesRequest) (*AffectedEntityDetailsDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AffectedEntityDetailsDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntityAssertionsControllerAPIService.GetAssertionAffectedEntities")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/assertion/affected-entities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.entityAssertionMetricRequestDto == nil {
		return localVarReturnValue, nil, reportError("entityAssertionMetricRequestDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	// body params
	localVarPostBody = r.entityAssertionMetricRequestDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAssertionEntityNamesRequest struct {
	ctx                             context.Context
	ApiService                      *EntityAssertionsControllerAPIService
	entityAssertionMetricRequestDto *EntityAssertionMetricRequestDto
	xScopeOrgID                     *string
}

func (r ApiGetAssertionEntityNamesRequest) EntityAssertionMetricRequestDto(entityAssertionMetricRequestDto EntityAssertionMetricRequestDto) ApiGetAssertionEntityNamesRequest {
	r.entityAssertionMetricRequestDto = &entityAssertionMetricRequestDto
	return r
}

// Grafana Tenant/Stack ID
func (r ApiGetAssertionEntityNamesRequest) XScopeOrgID(xScopeOrgID string) ApiGetAssertionEntityNamesRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiGetAssertionEntityNamesRequest) Execute() (*AffectedEntityNamesDto, *http.Response, error) {
	return r.ApiService.GetAssertionEntityNamesExecute(r)
}

/*
GetAssertionEntityNames Method for GetAssertionEntityNames

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetAssertionEntityNamesRequest
*/
func (a *EntityAssertionsControllerAPIService) GetAssertionEntityNames(ctx context.Context) ApiGetAssertionEntityNamesRequest {
	return ApiGetAssertionEntityNamesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AffectedEntityNamesDto
func (a *EntityAssertionsControllerAPIService) GetAssertionEntityNamesExecute(r ApiGetAssertionEntityNamesRequest) (*AffectedEntityNamesDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AffectedEntityNamesDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntityAssertionsControllerAPIService.GetAssertionEntityNames")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/assertion/affected-entity-names"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.entityAssertionMetricRequestDto == nil {
		return localVarReturnValue, nil, reportError("entityAssertionMetricRequestDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	// body params
	localVarPostBody = r.entityAssertionMetricRequestDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAssertionsRequest struct {
	ctx                  context.Context
	ApiService           *EntityAssertionsControllerAPIService
	assertionsRequestDto *AssertionsRequestDto
	withFilters          *bool
	xScopeOrgID          *string
}

func (r ApiGetAssertionsRequest) AssertionsRequestDto(assertionsRequestDto AssertionsRequestDto) ApiGetAssertionsRequest {
	r.assertionsRequestDto = &assertionsRequestDto
	return r
}

func (r ApiGetAssertionsRequest) WithFilters(withFilters bool) ApiGetAssertionsRequest {
	r.withFilters = &withFilters
	return r
}

// Grafana Tenant/Stack ID
func (r ApiGetAssertionsRequest) XScopeOrgID(xScopeOrgID string) ApiGetAssertionsRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiGetAssertionsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetAssertionsExecute(r)
}

/*
GetAssertions Method for GetAssertions

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetAssertionsRequest
*/
func (a *EntityAssertionsControllerAPIService) GetAssertions(ctx context.Context) ApiGetAssertionsRequest {
	return ApiGetAssertionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *EntityAssertionsControllerAPIService) GetAssertionsExecute(r ApiGetAssertionsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntityAssertionsControllerAPIService.GetAssertions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/assertions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.assertionsRequestDto == nil {
		return localVarReturnValue, nil, reportError("assertionsRequestDto is required and must be specified")
	}

	if r.withFilters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withFilters", r.withFilters, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	// body params
	localVarPostBody = r.assertionsRequestDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAssertionsSummaryRequest struct {
	ctx                  context.Context
	ApiService           *EntityAssertionsControllerAPIService
	assertionsRequestDto *AssertionsRequestDto
	withRCA              *bool
	xScopeOrgID          *string
}

func (r ApiGetAssertionsSummaryRequest) AssertionsRequestDto(assertionsRequestDto AssertionsRequestDto) ApiGetAssertionsSummaryRequest {
	r.assertionsRequestDto = &assertionsRequestDto
	return r
}

func (r ApiGetAssertionsSummaryRequest) WithRCA(withRCA bool) ApiGetAssertionsSummaryRequest {
	r.withRCA = &withRCA
	return r
}

// Grafana Tenant/Stack ID
func (r ApiGetAssertionsSummaryRequest) XScopeOrgID(xScopeOrgID string) ApiGetAssertionsSummaryRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiGetAssertionsSummaryRequest) Execute() (*EntityAssertionSummariesDto, *http.Response, error) {
	return r.ApiService.GetAssertionsSummaryExecute(r)
}

/*
GetAssertionsSummary Method for GetAssertionsSummary

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetAssertionsSummaryRequest
*/
func (a *EntityAssertionsControllerAPIService) GetAssertionsSummary(ctx context.Context) ApiGetAssertionsSummaryRequest {
	return ApiGetAssertionsSummaryRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EntityAssertionSummariesDto
func (a *EntityAssertionsControllerAPIService) GetAssertionsSummaryExecute(r ApiGetAssertionsSummaryRequest) (*EntityAssertionSummariesDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EntityAssertionSummariesDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntityAssertionsControllerAPIService.GetAssertionsSummary")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/assertions/summary"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.assertionsRequestDto == nil {
		return localVarReturnValue, nil, reportError("assertionsRequestDto is required and must be specified")
	}

	if r.withRCA != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withRCA", r.withRCA, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	// body params
	localVarPostBody = r.assertionsRequestDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetEntityAssertionsGraphRequest struct {
	ctx                  context.Context
	ApiService           *EntityAssertionsControllerAPIService
	assertionsRequestDto *AssertionsRequestDto
	xScopeOrgID          *string
}

func (r ApiGetEntityAssertionsGraphRequest) AssertionsRequestDto(assertionsRequestDto AssertionsRequestDto) ApiGetEntityAssertionsGraphRequest {
	r.assertionsRequestDto = &assertionsRequestDto
	return r
}

// Grafana Tenant/Stack ID
func (r ApiGetEntityAssertionsGraphRequest) XScopeOrgID(xScopeOrgID string) ApiGetEntityAssertionsGraphRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiGetEntityAssertionsGraphRequest) Execute() (*EntityAssertionsGraphDto, *http.Response, error) {
	return r.ApiService.GetEntityAssertionsGraphExecute(r)
}

/*
GetEntityAssertionsGraph Method for GetEntityAssertionsGraph

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetEntityAssertionsGraphRequest
*/
func (a *EntityAssertionsControllerAPIService) GetEntityAssertionsGraph(ctx context.Context) ApiGetEntityAssertionsGraphRequest {
	return ApiGetEntityAssertionsGraphRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EntityAssertionsGraphDto
func (a *EntityAssertionsControllerAPIService) GetEntityAssertionsGraphExecute(r ApiGetEntityAssertionsGraphRequest) (*EntityAssertionsGraphDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EntityAssertionsGraphDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntityAssertionsControllerAPIService.GetEntityAssertionsGraph")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/assertions/graph"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.assertionsRequestDto == nil {
		return localVarReturnValue, nil, reportError("assertionsRequestDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	// body params
	localVarPostBody = r.assertionsRequestDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchAssertionsRequest struct {
	ctx                       context.Context
	ApiService                *EntityAssertionsControllerAPIService
	assertionSearchRequestDto *AssertionSearchRequestDto
	withFilters               *bool
	xScopeOrgID               *string
}

func (r ApiSearchAssertionsRequest) AssertionSearchRequestDto(assertionSearchRequestDto AssertionSearchRequestDto) ApiSearchAssertionsRequest {
	r.assertionSearchRequestDto = &assertionSearchRequestDto
	return r
}

func (r ApiSearchAssertionsRequest) WithFilters(withFilters bool) ApiSearchAssertionsRequest {
	r.withFilters = &withFilters
	return r
}

// Grafana Tenant/Stack ID
func (r ApiSearchAssertionsRequest) XScopeOrgID(xScopeOrgID string) ApiSearchAssertionsRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiSearchAssertionsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.SearchAssertionsExecute(r)
}

/*
SearchAssertions Method for SearchAssertions

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSearchAssertionsRequest
*/
func (a *EntityAssertionsControllerAPIService) SearchAssertions(ctx context.Context) ApiSearchAssertionsRequest {
	return ApiSearchAssertionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *EntityAssertionsControllerAPIService) SearchAssertionsExecute(r ApiSearchAssertionsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntityAssertionsControllerAPIService.SearchAssertions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/search/assertions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.assertionSearchRequestDto == nil {
		return localVarReturnValue, nil, reportError("assertionSearchRequestDto is required and must be specified")
	}

	if r.withFilters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withFilters", r.withFilters, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	// body params
	localVarPostBody = r.assertionSearchRequestDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchAssertionsSummaryRequest struct {
	ctx                       context.Context
	ApiService                *EntityAssertionsControllerAPIService
	assertionSearchRequestDto *AssertionSearchRequestDto
	withRCA                   *bool
	xScopeOrgID               *string
}

func (r ApiSearchAssertionsSummaryRequest) AssertionSearchRequestDto(assertionSearchRequestDto AssertionSearchRequestDto) ApiSearchAssertionsSummaryRequest {
	r.assertionSearchRequestDto = &assertionSearchRequestDto
	return r
}

func (r ApiSearchAssertionsSummaryRequest) WithRCA(withRCA bool) ApiSearchAssertionsSummaryRequest {
	r.withRCA = &withRCA
	return r
}

// Grafana Tenant/Stack ID
func (r ApiSearchAssertionsSummaryRequest) XScopeOrgID(xScopeOrgID string) ApiSearchAssertionsSummaryRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiSearchAssertionsSummaryRequest) Execute() (*EntityAssertionSummariesDto, *http.Response, error) {
	return r.ApiService.SearchAssertionsSummaryExecute(r)
}

/*
SearchAssertionsSummary Method for SearchAssertionsSummary

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSearchAssertionsSummaryRequest
*/
func (a *EntityAssertionsControllerAPIService) SearchAssertionsSummary(ctx context.Context) ApiSearchAssertionsSummaryRequest {
	return ApiSearchAssertionsSummaryRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EntityAssertionSummariesDto
func (a *EntityAssertionsControllerAPIService) SearchAssertionsSummaryExecute(r ApiSearchAssertionsSummaryRequest) (*EntityAssertionSummariesDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EntityAssertionSummariesDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntityAssertionsControllerAPIService.SearchAssertionsSummary")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/search/assertions/summary"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.assertionSearchRequestDto == nil {
		return localVarReturnValue, nil, reportError("assertionSearchRequestDto is required and must be specified")
	}

	if r.withRCA != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withRCA", r.withRCA, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	// body params
	localVarPostBody = r.assertionSearchRequestDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
