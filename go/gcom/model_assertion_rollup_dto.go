/*
Asserts, Inc

Asserts Public API

API version: 1.0.1
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the AssertionRollupDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssertionRollupDto{}

// AssertionRollupDto struct for AssertionRollupDto
type AssertionRollupDto struct {
	Name                     *string                `json:"name,omitempty"`
	Type                     *string                `json:"type,omitempty"`
	Scope                    map[string]interface{} `json:"scope,omitempty"`
	Labels                   map[string]string      `json:"labels,omitempty"`
	AssertionCount           *int32                 `json:"assertionCount,omitempty"`
	WarningCount             *int32                 `json:"warningCount,omitempty"`
	CriticalCount            *int32                 `json:"criticalCount,omitempty"`
	InfoCount                *int32                 `json:"infoCount,omitempty"`
	TimelineIds              []int64                `json:"timelineIds,omitempty"`
	TimelineHashes           []string               `json:"timelineHashes,omitempty"`
	PathsToLinkedGroups      [][]int64              `json:"pathsToLinkedGroups,omitempty"`
	PathHashesToLinkedGroups [][]string             `json:"pathHashesToLinkedGroups,omitempty"`
	AdditionalProperties     map[string]interface{}
}

type _AssertionRollupDto AssertionRollupDto

// NewAssertionRollupDto instantiates a new AssertionRollupDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssertionRollupDto() *AssertionRollupDto {
	this := AssertionRollupDto{}
	return &this
}

// NewAssertionRollupDtoWithDefaults instantiates a new AssertionRollupDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssertionRollupDtoWithDefaults() *AssertionRollupDto {
	this := AssertionRollupDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AssertionRollupDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionRollupDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AssertionRollupDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AssertionRollupDto) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AssertionRollupDto) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionRollupDto) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AssertionRollupDto) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AssertionRollupDto) SetType(v string) {
	o.Type = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *AssertionRollupDto) GetScope() map[string]interface{} {
	if o == nil || IsNil(o.Scope) {
		var ret map[string]interface{}
		return ret
	}
	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionRollupDto) GetScopeOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Scope) {
		return map[string]interface{}{}, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *AssertionRollupDto) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given map[string]interface{} and assigns it to the Scope field.
func (o *AssertionRollupDto) SetScope(v map[string]interface{}) {
	o.Scope = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *AssertionRollupDto) GetLabels() map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionRollupDto) GetLabelsOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return map[string]string{}, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *AssertionRollupDto) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *AssertionRollupDto) SetLabels(v map[string]string) {
	o.Labels = v
}

// GetAssertionCount returns the AssertionCount field value if set, zero value otherwise.
func (o *AssertionRollupDto) GetAssertionCount() int32 {
	if o == nil || IsNil(o.AssertionCount) {
		var ret int32
		return ret
	}
	return *o.AssertionCount
}

// GetAssertionCountOk returns a tuple with the AssertionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionRollupDto) GetAssertionCountOk() (*int32, bool) {
	if o == nil || IsNil(o.AssertionCount) {
		return nil, false
	}
	return o.AssertionCount, true
}

// HasAssertionCount returns a boolean if a field has been set.
func (o *AssertionRollupDto) HasAssertionCount() bool {
	if o != nil && !IsNil(o.AssertionCount) {
		return true
	}

	return false
}

// SetAssertionCount gets a reference to the given int32 and assigns it to the AssertionCount field.
func (o *AssertionRollupDto) SetAssertionCount(v int32) {
	o.AssertionCount = &v
}

// GetWarningCount returns the WarningCount field value if set, zero value otherwise.
func (o *AssertionRollupDto) GetWarningCount() int32 {
	if o == nil || IsNil(o.WarningCount) {
		var ret int32
		return ret
	}
	return *o.WarningCount
}

// GetWarningCountOk returns a tuple with the WarningCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionRollupDto) GetWarningCountOk() (*int32, bool) {
	if o == nil || IsNil(o.WarningCount) {
		return nil, false
	}
	return o.WarningCount, true
}

// HasWarningCount returns a boolean if a field has been set.
func (o *AssertionRollupDto) HasWarningCount() bool {
	if o != nil && !IsNil(o.WarningCount) {
		return true
	}

	return false
}

// SetWarningCount gets a reference to the given int32 and assigns it to the WarningCount field.
func (o *AssertionRollupDto) SetWarningCount(v int32) {
	o.WarningCount = &v
}

// GetCriticalCount returns the CriticalCount field value if set, zero value otherwise.
func (o *AssertionRollupDto) GetCriticalCount() int32 {
	if o == nil || IsNil(o.CriticalCount) {
		var ret int32
		return ret
	}
	return *o.CriticalCount
}

// GetCriticalCountOk returns a tuple with the CriticalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionRollupDto) GetCriticalCountOk() (*int32, bool) {
	if o == nil || IsNil(o.CriticalCount) {
		return nil, false
	}
	return o.CriticalCount, true
}

// HasCriticalCount returns a boolean if a field has been set.
func (o *AssertionRollupDto) HasCriticalCount() bool {
	if o != nil && !IsNil(o.CriticalCount) {
		return true
	}

	return false
}

// SetCriticalCount gets a reference to the given int32 and assigns it to the CriticalCount field.
func (o *AssertionRollupDto) SetCriticalCount(v int32) {
	o.CriticalCount = &v
}

// GetInfoCount returns the InfoCount field value if set, zero value otherwise.
func (o *AssertionRollupDto) GetInfoCount() int32 {
	if o == nil || IsNil(o.InfoCount) {
		var ret int32
		return ret
	}
	return *o.InfoCount
}

// GetInfoCountOk returns a tuple with the InfoCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionRollupDto) GetInfoCountOk() (*int32, bool) {
	if o == nil || IsNil(o.InfoCount) {
		return nil, false
	}
	return o.InfoCount, true
}

// HasInfoCount returns a boolean if a field has been set.
func (o *AssertionRollupDto) HasInfoCount() bool {
	if o != nil && !IsNil(o.InfoCount) {
		return true
	}

	return false
}

// SetInfoCount gets a reference to the given int32 and assigns it to the InfoCount field.
func (o *AssertionRollupDto) SetInfoCount(v int32) {
	o.InfoCount = &v
}

// GetTimelineIds returns the TimelineIds field value if set, zero value otherwise.
func (o *AssertionRollupDto) GetTimelineIds() []int64 {
	if o == nil || IsNil(o.TimelineIds) {
		var ret []int64
		return ret
	}
	return o.TimelineIds
}

// GetTimelineIdsOk returns a tuple with the TimelineIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionRollupDto) GetTimelineIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.TimelineIds) {
		return nil, false
	}
	return o.TimelineIds, true
}

// HasTimelineIds returns a boolean if a field has been set.
func (o *AssertionRollupDto) HasTimelineIds() bool {
	if o != nil && !IsNil(o.TimelineIds) {
		return true
	}

	return false
}

// SetTimelineIds gets a reference to the given []int64 and assigns it to the TimelineIds field.
func (o *AssertionRollupDto) SetTimelineIds(v []int64) {
	o.TimelineIds = v
}

// GetTimelineHashes returns the TimelineHashes field value if set, zero value otherwise.
func (o *AssertionRollupDto) GetTimelineHashes() []string {
	if o == nil || IsNil(o.TimelineHashes) {
		var ret []string
		return ret
	}
	return o.TimelineHashes
}

// GetTimelineHashesOk returns a tuple with the TimelineHashes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionRollupDto) GetTimelineHashesOk() ([]string, bool) {
	if o == nil || IsNil(o.TimelineHashes) {
		return nil, false
	}
	return o.TimelineHashes, true
}

// HasTimelineHashes returns a boolean if a field has been set.
func (o *AssertionRollupDto) HasTimelineHashes() bool {
	if o != nil && !IsNil(o.TimelineHashes) {
		return true
	}

	return false
}

// SetTimelineHashes gets a reference to the given []string and assigns it to the TimelineHashes field.
func (o *AssertionRollupDto) SetTimelineHashes(v []string) {
	o.TimelineHashes = v
}

// GetPathsToLinkedGroups returns the PathsToLinkedGroups field value if set, zero value otherwise.
func (o *AssertionRollupDto) GetPathsToLinkedGroups() [][]int64 {
	if o == nil || IsNil(o.PathsToLinkedGroups) {
		var ret [][]int64
		return ret
	}
	return o.PathsToLinkedGroups
}

// GetPathsToLinkedGroupsOk returns a tuple with the PathsToLinkedGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionRollupDto) GetPathsToLinkedGroupsOk() ([][]int64, bool) {
	if o == nil || IsNil(o.PathsToLinkedGroups) {
		return nil, false
	}
	return o.PathsToLinkedGroups, true
}

// HasPathsToLinkedGroups returns a boolean if a field has been set.
func (o *AssertionRollupDto) HasPathsToLinkedGroups() bool {
	if o != nil && !IsNil(o.PathsToLinkedGroups) {
		return true
	}

	return false
}

// SetPathsToLinkedGroups gets a reference to the given [][]int64 and assigns it to the PathsToLinkedGroups field.
func (o *AssertionRollupDto) SetPathsToLinkedGroups(v [][]int64) {
	o.PathsToLinkedGroups = v
}

// GetPathHashesToLinkedGroups returns the PathHashesToLinkedGroups field value if set, zero value otherwise.
func (o *AssertionRollupDto) GetPathHashesToLinkedGroups() [][]string {
	if o == nil || IsNil(o.PathHashesToLinkedGroups) {
		var ret [][]string
		return ret
	}
	return o.PathHashesToLinkedGroups
}

// GetPathHashesToLinkedGroupsOk returns a tuple with the PathHashesToLinkedGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionRollupDto) GetPathHashesToLinkedGroupsOk() ([][]string, bool) {
	if o == nil || IsNil(o.PathHashesToLinkedGroups) {
		return nil, false
	}
	return o.PathHashesToLinkedGroups, true
}

// HasPathHashesToLinkedGroups returns a boolean if a field has been set.
func (o *AssertionRollupDto) HasPathHashesToLinkedGroups() bool {
	if o != nil && !IsNil(o.PathHashesToLinkedGroups) {
		return true
	}

	return false
}

// SetPathHashesToLinkedGroups gets a reference to the given [][]string and assigns it to the PathHashesToLinkedGroups field.
func (o *AssertionRollupDto) SetPathHashesToLinkedGroups(v [][]string) {
	o.PathHashesToLinkedGroups = v
}

func (o AssertionRollupDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssertionRollupDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.AssertionCount) {
		toSerialize["assertionCount"] = o.AssertionCount
	}
	if !IsNil(o.WarningCount) {
		toSerialize["warningCount"] = o.WarningCount
	}
	if !IsNil(o.CriticalCount) {
		toSerialize["criticalCount"] = o.CriticalCount
	}
	if !IsNil(o.InfoCount) {
		toSerialize["infoCount"] = o.InfoCount
	}
	if !IsNil(o.TimelineIds) {
		toSerialize["timelineIds"] = o.TimelineIds
	}
	if !IsNil(o.TimelineHashes) {
		toSerialize["timelineHashes"] = o.TimelineHashes
	}
	if !IsNil(o.PathsToLinkedGroups) {
		toSerialize["pathsToLinkedGroups"] = o.PathsToLinkedGroups
	}
	if !IsNil(o.PathHashesToLinkedGroups) {
		toSerialize["pathHashesToLinkedGroups"] = o.PathHashesToLinkedGroups
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AssertionRollupDto) UnmarshalJSON(data []byte) (err error) {
	varAssertionRollupDto := _AssertionRollupDto{}

	err = json.Unmarshal(data, &varAssertionRollupDto)

	if err != nil {
		return err
	}

	*o = AssertionRollupDto(varAssertionRollupDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "scope")
		delete(additionalProperties, "labels")
		delete(additionalProperties, "assertionCount")
		delete(additionalProperties, "warningCount")
		delete(additionalProperties, "criticalCount")
		delete(additionalProperties, "infoCount")
		delete(additionalProperties, "timelineIds")
		delete(additionalProperties, "timelineHashes")
		delete(additionalProperties, "pathsToLinkedGroups")
		delete(additionalProperties, "pathHashesToLinkedGroups")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAssertionRollupDto struct {
	value *AssertionRollupDto
	isSet bool
}

func (v NullableAssertionRollupDto) Get() *AssertionRollupDto {
	return v.value
}

func (v *NullableAssertionRollupDto) Set(val *AssertionRollupDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAssertionRollupDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAssertionRollupDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssertionRollupDto(val *AssertionRollupDto) *NullableAssertionRollupDto {
	return &NullableAssertionRollupDto{value: val, isSet: true}
}

func (v NullableAssertionRollupDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssertionRollupDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
