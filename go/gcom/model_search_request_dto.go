/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-112305
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the SearchRequestDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchRequestDto{}

// SearchRequestDto struct for SearchRequestDto
type SearchRequestDto struct {
	DefinitionId         *int32             `json:"definitionId,omitempty"`
	TimeCriteria         *TimeCriteriaDto   `json:"timeCriteria,omitempty"`
	ScopeCriteria        *ScopeCriteriaDto  `json:"scopeCriteria,omitempty"`
	PageNum              *int32             `json:"pageNum,omitempty"`
	Bindings             map[string]string  `json:"bindings,omitempty"`
	FilterCriteria       []EntityMatcherDto `json:"filterCriteria,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SearchRequestDto SearchRequestDto

// NewSearchRequestDto instantiates a new SearchRequestDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchRequestDto() *SearchRequestDto {
	this := SearchRequestDto{}
	return &this
}

// NewSearchRequestDtoWithDefaults instantiates a new SearchRequestDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchRequestDtoWithDefaults() *SearchRequestDto {
	this := SearchRequestDto{}
	return &this
}

// GetDefinitionId returns the DefinitionId field value if set, zero value otherwise.
func (o *SearchRequestDto) GetDefinitionId() int32 {
	if o == nil || IsNil(o.DefinitionId) {
		var ret int32
		return ret
	}
	return *o.DefinitionId
}

// GetDefinitionIdOk returns a tuple with the DefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequestDto) GetDefinitionIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DefinitionId) {
		return nil, false
	}
	return o.DefinitionId, true
}

// HasDefinitionId returns a boolean if a field has been set.
func (o *SearchRequestDto) HasDefinitionId() bool {
	if o != nil && !IsNil(o.DefinitionId) {
		return true
	}

	return false
}

// SetDefinitionId gets a reference to the given int32 and assigns it to the DefinitionId field.
func (o *SearchRequestDto) SetDefinitionId(v int32) {
	o.DefinitionId = &v
}

// GetTimeCriteria returns the TimeCriteria field value if set, zero value otherwise.
func (o *SearchRequestDto) GetTimeCriteria() TimeCriteriaDto {
	if o == nil || IsNil(o.TimeCriteria) {
		var ret TimeCriteriaDto
		return ret
	}
	return *o.TimeCriteria
}

// GetTimeCriteriaOk returns a tuple with the TimeCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequestDto) GetTimeCriteriaOk() (*TimeCriteriaDto, bool) {
	if o == nil || IsNil(o.TimeCriteria) {
		return nil, false
	}
	return o.TimeCriteria, true
}

// HasTimeCriteria returns a boolean if a field has been set.
func (o *SearchRequestDto) HasTimeCriteria() bool {
	if o != nil && !IsNil(o.TimeCriteria) {
		return true
	}

	return false
}

// SetTimeCriteria gets a reference to the given TimeCriteriaDto and assigns it to the TimeCriteria field.
func (o *SearchRequestDto) SetTimeCriteria(v TimeCriteriaDto) {
	o.TimeCriteria = &v
}

// GetScopeCriteria returns the ScopeCriteria field value if set, zero value otherwise.
func (o *SearchRequestDto) GetScopeCriteria() ScopeCriteriaDto {
	if o == nil || IsNil(o.ScopeCriteria) {
		var ret ScopeCriteriaDto
		return ret
	}
	return *o.ScopeCriteria
}

// GetScopeCriteriaOk returns a tuple with the ScopeCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequestDto) GetScopeCriteriaOk() (*ScopeCriteriaDto, bool) {
	if o == nil || IsNil(o.ScopeCriteria) {
		return nil, false
	}
	return o.ScopeCriteria, true
}

// HasScopeCriteria returns a boolean if a field has been set.
func (o *SearchRequestDto) HasScopeCriteria() bool {
	if o != nil && !IsNil(o.ScopeCriteria) {
		return true
	}

	return false
}

// SetScopeCriteria gets a reference to the given ScopeCriteriaDto and assigns it to the ScopeCriteria field.
func (o *SearchRequestDto) SetScopeCriteria(v ScopeCriteriaDto) {
	o.ScopeCriteria = &v
}

// GetPageNum returns the PageNum field value if set, zero value otherwise.
func (o *SearchRequestDto) GetPageNum() int32 {
	if o == nil || IsNil(o.PageNum) {
		var ret int32
		return ret
	}
	return *o.PageNum
}

// GetPageNumOk returns a tuple with the PageNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequestDto) GetPageNumOk() (*int32, bool) {
	if o == nil || IsNil(o.PageNum) {
		return nil, false
	}
	return o.PageNum, true
}

// HasPageNum returns a boolean if a field has been set.
func (o *SearchRequestDto) HasPageNum() bool {
	if o != nil && !IsNil(o.PageNum) {
		return true
	}

	return false
}

// SetPageNum gets a reference to the given int32 and assigns it to the PageNum field.
func (o *SearchRequestDto) SetPageNum(v int32) {
	o.PageNum = &v
}

// GetBindings returns the Bindings field value if set, zero value otherwise.
func (o *SearchRequestDto) GetBindings() map[string]string {
	if o == nil || IsNil(o.Bindings) {
		var ret map[string]string
		return ret
	}
	return o.Bindings
}

// GetBindingsOk returns a tuple with the Bindings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequestDto) GetBindingsOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Bindings) {
		return map[string]string{}, false
	}
	return o.Bindings, true
}

// HasBindings returns a boolean if a field has been set.
func (o *SearchRequestDto) HasBindings() bool {
	if o != nil && !IsNil(o.Bindings) {
		return true
	}

	return false
}

// SetBindings gets a reference to the given map[string]string and assigns it to the Bindings field.
func (o *SearchRequestDto) SetBindings(v map[string]string) {
	o.Bindings = v
}

// GetFilterCriteria returns the FilterCriteria field value if set, zero value otherwise.
func (o *SearchRequestDto) GetFilterCriteria() []EntityMatcherDto {
	if o == nil || IsNil(o.FilterCriteria) {
		var ret []EntityMatcherDto
		return ret
	}
	return o.FilterCriteria
}

// GetFilterCriteriaOk returns a tuple with the FilterCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequestDto) GetFilterCriteriaOk() ([]EntityMatcherDto, bool) {
	if o == nil || IsNil(o.FilterCriteria) {
		return nil, false
	}
	return o.FilterCriteria, true
}

// HasFilterCriteria returns a boolean if a field has been set.
func (o *SearchRequestDto) HasFilterCriteria() bool {
	if o != nil && !IsNil(o.FilterCriteria) {
		return true
	}

	return false
}

// SetFilterCriteria gets a reference to the given []EntityMatcherDto and assigns it to the FilterCriteria field.
func (o *SearchRequestDto) SetFilterCriteria(v []EntityMatcherDto) {
	o.FilterCriteria = v
}

func (o SearchRequestDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchRequestDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefinitionId) {
		toSerialize["definitionId"] = o.DefinitionId
	}
	if !IsNil(o.TimeCriteria) {
		toSerialize["timeCriteria"] = o.TimeCriteria
	}
	if !IsNil(o.ScopeCriteria) {
		toSerialize["scopeCriteria"] = o.ScopeCriteria
	}
	if !IsNil(o.PageNum) {
		toSerialize["pageNum"] = o.PageNum
	}
	if !IsNil(o.Bindings) {
		toSerialize["bindings"] = o.Bindings
	}
	if !IsNil(o.FilterCriteria) {
		toSerialize["filterCriteria"] = o.FilterCriteria
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SearchRequestDto) UnmarshalJSON(data []byte) (err error) {
	varSearchRequestDto := _SearchRequestDto{}

	err = json.Unmarshal(data, &varSearchRequestDto)

	if err != nil {
		return err
	}

	*o = SearchRequestDto(varSearchRequestDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "definitionId")
		delete(additionalProperties, "timeCriteria")
		delete(additionalProperties, "scopeCriteria")
		delete(additionalProperties, "pageNum")
		delete(additionalProperties, "bindings")
		delete(additionalProperties, "filterCriteria")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSearchRequestDto struct {
	value *SearchRequestDto
	isSet bool
}

func (v NullableSearchRequestDto) Get() *SearchRequestDto {
	return v.value
}

func (v *NullableSearchRequestDto) Set(val *SearchRequestDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchRequestDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchRequestDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchRequestDto(val *SearchRequestDto) *NullableSearchRequestDto {
	return &NullableSearchRequestDto{value: val, isSet: true}
}

func (v NullableSearchRequestDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchRequestDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
