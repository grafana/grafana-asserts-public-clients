/*
Asserts, Inc

Asserts Public API

API version: 1.0.4
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the DatasetVendorDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatasetVendorDto{}

// DatasetVendorDto struct for DatasetVendorDto
type DatasetVendorDto struct {
	Detected             *bool   `json:"detected,omitempty"`
	Enabled              *bool   `json:"enabled,omitempty"`
	Name                 *string `json:"name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DatasetVendorDto DatasetVendorDto

// NewDatasetVendorDto instantiates a new DatasetVendorDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatasetVendorDto() *DatasetVendorDto {
	this := DatasetVendorDto{}
	return &this
}

// NewDatasetVendorDtoWithDefaults instantiates a new DatasetVendorDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatasetVendorDtoWithDefaults() *DatasetVendorDto {
	this := DatasetVendorDto{}
	return &this
}

// GetDetected returns the Detected field value if set, zero value otherwise.
func (o *DatasetVendorDto) GetDetected() bool {
	if o == nil || IsNil(o.Detected) {
		var ret bool
		return ret
	}
	return *o.Detected
}

// GetDetectedOk returns a tuple with the Detected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetVendorDto) GetDetectedOk() (*bool, bool) {
	if o == nil || IsNil(o.Detected) {
		return nil, false
	}
	return o.Detected, true
}

// HasDetected returns a boolean if a field has been set.
func (o *DatasetVendorDto) HasDetected() bool {
	if o != nil && !IsNil(o.Detected) {
		return true
	}

	return false
}

// SetDetected gets a reference to the given bool and assigns it to the Detected field.
func (o *DatasetVendorDto) SetDetected(v bool) {
	o.Detected = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *DatasetVendorDto) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetVendorDto) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *DatasetVendorDto) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *DatasetVendorDto) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DatasetVendorDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetVendorDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DatasetVendorDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DatasetVendorDto) SetName(v string) {
	o.Name = &v
}

func (o DatasetVendorDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatasetVendorDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Detected) {
		toSerialize["detected"] = o.Detected
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DatasetVendorDto) UnmarshalJSON(data []byte) (err error) {
	varDatasetVendorDto := _DatasetVendorDto{}

	err = json.Unmarshal(data, &varDatasetVendorDto)

	if err != nil {
		return err
	}

	*o = DatasetVendorDto(varDatasetVendorDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "detected")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDatasetVendorDto struct {
	value *DatasetVendorDto
	isSet bool
}

func (v NullableDatasetVendorDto) Get() *DatasetVendorDto {
	return v.value
}

func (v *NullableDatasetVendorDto) Set(val *DatasetVendorDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDatasetVendorDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDatasetVendorDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatasetVendorDto(val *DatasetVendorDto) *NullableDatasetVendorDto {
	return &NullableDatasetVendorDto{value: val, isSet: true}
}

func (v NullableDatasetVendorDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatasetVendorDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
