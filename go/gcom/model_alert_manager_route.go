/*
Asserts, Inc

Asserts Public API

API version: 2025.09.11-132913
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the AlertManagerRoute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertManagerRoute{}

// AlertManagerRoute struct for AlertManagerRoute
type AlertManagerRoute struct {
	Receiver *string `json:"receiver,omitempty"`
	// Deprecated
	Match                map[string]string `json:"match,omitempty"`
	Matchers             []string          `json:"matchers,omitempty"`
	Routes               []interface{}     `json:"routes,omitempty"`
	GroupBy              []string          `json:"group_by,omitempty"`
	Continue             *bool             `json:"continue,omitempty"`
	MatchRe              map[string]string `json:"match_re,omitempty"`
	GroupWait            *string           `json:"group_wait,omitempty"`
	GroupInterval        *string           `json:"group_interval,omitempty"`
	RepeatInterval       *string           `json:"repeat_interval,omitempty"`
	MuteTimeIntervals    []string          `json:"mute_time_intervals,omitempty"`
	ActiveTimeIntervals  []string          `json:"active_time_intervals,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AlertManagerRoute AlertManagerRoute

// NewAlertManagerRoute instantiates a new AlertManagerRoute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertManagerRoute() *AlertManagerRoute {
	this := AlertManagerRoute{}
	return &this
}

// NewAlertManagerRouteWithDefaults instantiates a new AlertManagerRoute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertManagerRouteWithDefaults() *AlertManagerRoute {
	this := AlertManagerRoute{}
	return &this
}

// GetReceiver returns the Receiver field value if set, zero value otherwise.
func (o *AlertManagerRoute) GetReceiver() string {
	if o == nil || IsNil(o.Receiver) {
		var ret string
		return ret
	}
	return *o.Receiver
}

// GetReceiverOk returns a tuple with the Receiver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerRoute) GetReceiverOk() (*string, bool) {
	if o == nil || IsNil(o.Receiver) {
		return nil, false
	}
	return o.Receiver, true
}

// HasReceiver returns a boolean if a field has been set.
func (o *AlertManagerRoute) HasReceiver() bool {
	if o != nil && !IsNil(o.Receiver) {
		return true
	}

	return false
}

// SetReceiver gets a reference to the given string and assigns it to the Receiver field.
func (o *AlertManagerRoute) SetReceiver(v string) {
	o.Receiver = &v
}

// GetMatch returns the Match field value if set, zero value otherwise.
// Deprecated
func (o *AlertManagerRoute) GetMatch() map[string]string {
	if o == nil || IsNil(o.Match) {
		var ret map[string]string
		return ret
	}
	return o.Match
}

// GetMatchOk returns a tuple with the Match field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *AlertManagerRoute) GetMatchOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Match) {
		return map[string]string{}, false
	}
	return o.Match, true
}

// HasMatch returns a boolean if a field has been set.
func (o *AlertManagerRoute) HasMatch() bool {
	if o != nil && !IsNil(o.Match) {
		return true
	}

	return false
}

// SetMatch gets a reference to the given map[string]string and assigns it to the Match field.
// Deprecated
func (o *AlertManagerRoute) SetMatch(v map[string]string) {
	o.Match = v
}

// GetMatchers returns the Matchers field value if set, zero value otherwise.
func (o *AlertManagerRoute) GetMatchers() []string {
	if o == nil || IsNil(o.Matchers) {
		var ret []string
		return ret
	}
	return o.Matchers
}

// GetMatchersOk returns a tuple with the Matchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerRoute) GetMatchersOk() ([]string, bool) {
	if o == nil || IsNil(o.Matchers) {
		return nil, false
	}
	return o.Matchers, true
}

// HasMatchers returns a boolean if a field has been set.
func (o *AlertManagerRoute) HasMatchers() bool {
	if o != nil && !IsNil(o.Matchers) {
		return true
	}

	return false
}

// SetMatchers gets a reference to the given []string and assigns it to the Matchers field.
func (o *AlertManagerRoute) SetMatchers(v []string) {
	o.Matchers = v
}

// GetRoutes returns the Routes field value if set, zero value otherwise.
func (o *AlertManagerRoute) GetRoutes() []interface{} {
	if o == nil || IsNil(o.Routes) {
		var ret []interface{}
		return ret
	}
	return o.Routes
}

// GetRoutesOk returns a tuple with the Routes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerRoute) GetRoutesOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.Routes) {
		return nil, false
	}
	return o.Routes, true
}

// HasRoutes returns a boolean if a field has been set.
func (o *AlertManagerRoute) HasRoutes() bool {
	if o != nil && !IsNil(o.Routes) {
		return true
	}

	return false
}

// SetRoutes gets a reference to the given []interface{} and assigns it to the Routes field.
func (o *AlertManagerRoute) SetRoutes(v []interface{}) {
	o.Routes = v
}

// GetGroupBy returns the GroupBy field value if set, zero value otherwise.
func (o *AlertManagerRoute) GetGroupBy() []string {
	if o == nil || IsNil(o.GroupBy) {
		var ret []string
		return ret
	}
	return o.GroupBy
}

// GetGroupByOk returns a tuple with the GroupBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerRoute) GetGroupByOk() ([]string, bool) {
	if o == nil || IsNil(o.GroupBy) {
		return nil, false
	}
	return o.GroupBy, true
}

// HasGroupBy returns a boolean if a field has been set.
func (o *AlertManagerRoute) HasGroupBy() bool {
	if o != nil && !IsNil(o.GroupBy) {
		return true
	}

	return false
}

// SetGroupBy gets a reference to the given []string and assigns it to the GroupBy field.
func (o *AlertManagerRoute) SetGroupBy(v []string) {
	o.GroupBy = v
}

// GetContinue returns the Continue field value if set, zero value otherwise.
func (o *AlertManagerRoute) GetContinue() bool {
	if o == nil || IsNil(o.Continue) {
		var ret bool
		return ret
	}
	return *o.Continue
}

// GetContinueOk returns a tuple with the Continue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerRoute) GetContinueOk() (*bool, bool) {
	if o == nil || IsNil(o.Continue) {
		return nil, false
	}
	return o.Continue, true
}

// HasContinue returns a boolean if a field has been set.
func (o *AlertManagerRoute) HasContinue() bool {
	if o != nil && !IsNil(o.Continue) {
		return true
	}

	return false
}

// SetContinue gets a reference to the given bool and assigns it to the Continue field.
func (o *AlertManagerRoute) SetContinue(v bool) {
	o.Continue = &v
}

// GetMatchRe returns the MatchRe field value if set, zero value otherwise.
func (o *AlertManagerRoute) GetMatchRe() map[string]string {
	if o == nil || IsNil(o.MatchRe) {
		var ret map[string]string
		return ret
	}
	return o.MatchRe
}

// GetMatchReOk returns a tuple with the MatchRe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerRoute) GetMatchReOk() (map[string]string, bool) {
	if o == nil || IsNil(o.MatchRe) {
		return map[string]string{}, false
	}
	return o.MatchRe, true
}

// HasMatchRe returns a boolean if a field has been set.
func (o *AlertManagerRoute) HasMatchRe() bool {
	if o != nil && !IsNil(o.MatchRe) {
		return true
	}

	return false
}

// SetMatchRe gets a reference to the given map[string]string and assigns it to the MatchRe field.
func (o *AlertManagerRoute) SetMatchRe(v map[string]string) {
	o.MatchRe = v
}

// GetGroupWait returns the GroupWait field value if set, zero value otherwise.
func (o *AlertManagerRoute) GetGroupWait() string {
	if o == nil || IsNil(o.GroupWait) {
		var ret string
		return ret
	}
	return *o.GroupWait
}

// GetGroupWaitOk returns a tuple with the GroupWait field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerRoute) GetGroupWaitOk() (*string, bool) {
	if o == nil || IsNil(o.GroupWait) {
		return nil, false
	}
	return o.GroupWait, true
}

// HasGroupWait returns a boolean if a field has been set.
func (o *AlertManagerRoute) HasGroupWait() bool {
	if o != nil && !IsNil(o.GroupWait) {
		return true
	}

	return false
}

// SetGroupWait gets a reference to the given string and assigns it to the GroupWait field.
func (o *AlertManagerRoute) SetGroupWait(v string) {
	o.GroupWait = &v
}

// GetGroupInterval returns the GroupInterval field value if set, zero value otherwise.
func (o *AlertManagerRoute) GetGroupInterval() string {
	if o == nil || IsNil(o.GroupInterval) {
		var ret string
		return ret
	}
	return *o.GroupInterval
}

// GetGroupIntervalOk returns a tuple with the GroupInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerRoute) GetGroupIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.GroupInterval) {
		return nil, false
	}
	return o.GroupInterval, true
}

// HasGroupInterval returns a boolean if a field has been set.
func (o *AlertManagerRoute) HasGroupInterval() bool {
	if o != nil && !IsNil(o.GroupInterval) {
		return true
	}

	return false
}

// SetGroupInterval gets a reference to the given string and assigns it to the GroupInterval field.
func (o *AlertManagerRoute) SetGroupInterval(v string) {
	o.GroupInterval = &v
}

// GetRepeatInterval returns the RepeatInterval field value if set, zero value otherwise.
func (o *AlertManagerRoute) GetRepeatInterval() string {
	if o == nil || IsNil(o.RepeatInterval) {
		var ret string
		return ret
	}
	return *o.RepeatInterval
}

// GetRepeatIntervalOk returns a tuple with the RepeatInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerRoute) GetRepeatIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.RepeatInterval) {
		return nil, false
	}
	return o.RepeatInterval, true
}

// HasRepeatInterval returns a boolean if a field has been set.
func (o *AlertManagerRoute) HasRepeatInterval() bool {
	if o != nil && !IsNil(o.RepeatInterval) {
		return true
	}

	return false
}

// SetRepeatInterval gets a reference to the given string and assigns it to the RepeatInterval field.
func (o *AlertManagerRoute) SetRepeatInterval(v string) {
	o.RepeatInterval = &v
}

// GetMuteTimeIntervals returns the MuteTimeIntervals field value if set, zero value otherwise.
func (o *AlertManagerRoute) GetMuteTimeIntervals() []string {
	if o == nil || IsNil(o.MuteTimeIntervals) {
		var ret []string
		return ret
	}
	return o.MuteTimeIntervals
}

// GetMuteTimeIntervalsOk returns a tuple with the MuteTimeIntervals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerRoute) GetMuteTimeIntervalsOk() ([]string, bool) {
	if o == nil || IsNil(o.MuteTimeIntervals) {
		return nil, false
	}
	return o.MuteTimeIntervals, true
}

// HasMuteTimeIntervals returns a boolean if a field has been set.
func (o *AlertManagerRoute) HasMuteTimeIntervals() bool {
	if o != nil && !IsNil(o.MuteTimeIntervals) {
		return true
	}

	return false
}

// SetMuteTimeIntervals gets a reference to the given []string and assigns it to the MuteTimeIntervals field.
func (o *AlertManagerRoute) SetMuteTimeIntervals(v []string) {
	o.MuteTimeIntervals = v
}

// GetActiveTimeIntervals returns the ActiveTimeIntervals field value if set, zero value otherwise.
func (o *AlertManagerRoute) GetActiveTimeIntervals() []string {
	if o == nil || IsNil(o.ActiveTimeIntervals) {
		var ret []string
		return ret
	}
	return o.ActiveTimeIntervals
}

// GetActiveTimeIntervalsOk returns a tuple with the ActiveTimeIntervals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerRoute) GetActiveTimeIntervalsOk() ([]string, bool) {
	if o == nil || IsNil(o.ActiveTimeIntervals) {
		return nil, false
	}
	return o.ActiveTimeIntervals, true
}

// HasActiveTimeIntervals returns a boolean if a field has been set.
func (o *AlertManagerRoute) HasActiveTimeIntervals() bool {
	if o != nil && !IsNil(o.ActiveTimeIntervals) {
		return true
	}

	return false
}

// SetActiveTimeIntervals gets a reference to the given []string and assigns it to the ActiveTimeIntervals field.
func (o *AlertManagerRoute) SetActiveTimeIntervals(v []string) {
	o.ActiveTimeIntervals = v
}

func (o AlertManagerRoute) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertManagerRoute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Receiver) {
		toSerialize["receiver"] = o.Receiver
	}
	if !IsNil(o.Match) {
		toSerialize["match"] = o.Match
	}
	if !IsNil(o.Matchers) {
		toSerialize["matchers"] = o.Matchers
	}
	if !IsNil(o.Routes) {
		toSerialize["routes"] = o.Routes
	}
	if !IsNil(o.GroupBy) {
		toSerialize["group_by"] = o.GroupBy
	}
	if !IsNil(o.Continue) {
		toSerialize["continue"] = o.Continue
	}
	if !IsNil(o.MatchRe) {
		toSerialize["match_re"] = o.MatchRe
	}
	if !IsNil(o.GroupWait) {
		toSerialize["group_wait"] = o.GroupWait
	}
	if !IsNil(o.GroupInterval) {
		toSerialize["group_interval"] = o.GroupInterval
	}
	if !IsNil(o.RepeatInterval) {
		toSerialize["repeat_interval"] = o.RepeatInterval
	}
	if !IsNil(o.MuteTimeIntervals) {
		toSerialize["mute_time_intervals"] = o.MuteTimeIntervals
	}
	if !IsNil(o.ActiveTimeIntervals) {
		toSerialize["active_time_intervals"] = o.ActiveTimeIntervals
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AlertManagerRoute) UnmarshalJSON(data []byte) (err error) {
	varAlertManagerRoute := _AlertManagerRoute{}

	err = json.Unmarshal(data, &varAlertManagerRoute)

	if err != nil {
		return err
	}

	*o = AlertManagerRoute(varAlertManagerRoute)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "receiver")
		delete(additionalProperties, "match")
		delete(additionalProperties, "matchers")
		delete(additionalProperties, "routes")
		delete(additionalProperties, "group_by")
		delete(additionalProperties, "continue")
		delete(additionalProperties, "match_re")
		delete(additionalProperties, "group_wait")
		delete(additionalProperties, "group_interval")
		delete(additionalProperties, "repeat_interval")
		delete(additionalProperties, "mute_time_intervals")
		delete(additionalProperties, "active_time_intervals")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAlertManagerRoute struct {
	value *AlertManagerRoute
	isSet bool
}

func (v NullableAlertManagerRoute) Get() *AlertManagerRoute {
	return v.value
}

func (v *NullableAlertManagerRoute) Set(val *AlertManagerRoute) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertManagerRoute) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertManagerRoute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertManagerRoute(val *AlertManagerRoute) *NullableAlertManagerRoute {
	return &NullableAlertManagerRoute{value: val, isSet: true}
}

func (v NullableAlertManagerRoute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertManagerRoute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
