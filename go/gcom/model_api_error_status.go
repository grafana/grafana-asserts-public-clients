/*
Asserts, Inc

Asserts Public API

API version: 2025.08.25-143403
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// ApiErrorStatus - struct for ApiErrorStatus
type ApiErrorStatus struct {
	DefaultHttpStatusCode *DefaultHttpStatusCode
	HttpStatus            *HttpStatus
}

// DefaultHttpStatusCodeAsApiErrorStatus is a convenience function that returns DefaultHttpStatusCode wrapped in ApiErrorStatus
func DefaultHttpStatusCodeAsApiErrorStatus(v *DefaultHttpStatusCode) ApiErrorStatus {
	return ApiErrorStatus{
		DefaultHttpStatusCode: v,
	}
}

// HttpStatusAsApiErrorStatus is a convenience function that returns HttpStatus wrapped in ApiErrorStatus
func HttpStatusAsApiErrorStatus(v *HttpStatus) ApiErrorStatus {
	return ApiErrorStatus{
		HttpStatus: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ApiErrorStatus) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DefaultHttpStatusCode
	err = newStrictDecoder(data).Decode(&dst.DefaultHttpStatusCode)
	if err == nil {
		jsonDefaultHttpStatusCode, _ := json.Marshal(dst.DefaultHttpStatusCode)
		if string(jsonDefaultHttpStatusCode) == "{}" { // empty struct
			dst.DefaultHttpStatusCode = nil
		} else {
			if err = validator.Validate(dst.DefaultHttpStatusCode); err != nil {
				dst.DefaultHttpStatusCode = nil
			} else {
				match++
			}
		}
	} else {
		dst.DefaultHttpStatusCode = nil
	}

	// try to unmarshal data into HttpStatus
	err = newStrictDecoder(data).Decode(&dst.HttpStatus)
	if err == nil {
		jsonHttpStatus, _ := json.Marshal(dst.HttpStatus)
		if string(jsonHttpStatus) == "{}" { // empty struct
			dst.HttpStatus = nil
		} else {
			if err = validator.Validate(dst.HttpStatus); err != nil {
				dst.HttpStatus = nil
			} else {
				match++
			}
		}
	} else {
		dst.HttpStatus = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DefaultHttpStatusCode = nil
		dst.HttpStatus = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ApiErrorStatus)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ApiErrorStatus)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ApiErrorStatus) MarshalJSON() ([]byte, error) {
	if src.DefaultHttpStatusCode != nil {
		return json.Marshal(&src.DefaultHttpStatusCode)
	}

	if src.HttpStatus != nil {
		return json.Marshal(&src.HttpStatus)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ApiErrorStatus) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DefaultHttpStatusCode != nil {
		return obj.DefaultHttpStatusCode
	}

	if obj.HttpStatus != nil {
		return obj.HttpStatus
	}

	// all schemas are nil
	return nil
}

type NullableApiErrorStatus struct {
	value *ApiErrorStatus
	isSet bool
}

func (v NullableApiErrorStatus) Get() *ApiErrorStatus {
	return v.value
}

func (v *NullableApiErrorStatus) Set(val *ApiErrorStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableApiErrorStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableApiErrorStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiErrorStatus(val *ApiErrorStatus) *NullableApiErrorStatus {
	return &NullableApiErrorStatus{value: val, isSet: true}
}

func (v NullableApiErrorStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiErrorStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
