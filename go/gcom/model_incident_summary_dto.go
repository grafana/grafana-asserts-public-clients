/*
Asserts, Inc

Asserts Public API

API version: 1.0.0
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the IncidentSummaryDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IncidentSummaryDto{}

// IncidentSummaryDto struct for IncidentSummaryDto
type IncidentSummaryDto struct {
	Name                 *string                `json:"name,omitempty"`
	Type                 *string                `json:"type,omitempty"`
	Scope                map[string]interface{} `json:"scope,omitempty"`
	Incidents            *int32                 `json:"incidents,omitempty"`
	Status               *bool                  `json:"status,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IncidentSummaryDto IncidentSummaryDto

// NewIncidentSummaryDto instantiates a new IncidentSummaryDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncidentSummaryDto() *IncidentSummaryDto {
	this := IncidentSummaryDto{}
	return &this
}

// NewIncidentSummaryDtoWithDefaults instantiates a new IncidentSummaryDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentSummaryDtoWithDefaults() *IncidentSummaryDto {
	this := IncidentSummaryDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IncidentSummaryDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentSummaryDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IncidentSummaryDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IncidentSummaryDto) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IncidentSummaryDto) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentSummaryDto) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IncidentSummaryDto) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *IncidentSummaryDto) SetType(v string) {
	o.Type = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *IncidentSummaryDto) GetScope() map[string]interface{} {
	if o == nil || IsNil(o.Scope) {
		var ret map[string]interface{}
		return ret
	}
	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentSummaryDto) GetScopeOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Scope) {
		return map[string]interface{}{}, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *IncidentSummaryDto) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given map[string]interface{} and assigns it to the Scope field.
func (o *IncidentSummaryDto) SetScope(v map[string]interface{}) {
	o.Scope = v
}

// GetIncidents returns the Incidents field value if set, zero value otherwise.
func (o *IncidentSummaryDto) GetIncidents() int32 {
	if o == nil || IsNil(o.Incidents) {
		var ret int32
		return ret
	}
	return *o.Incidents
}

// GetIncidentsOk returns a tuple with the Incidents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentSummaryDto) GetIncidentsOk() (*int32, bool) {
	if o == nil || IsNil(o.Incidents) {
		return nil, false
	}
	return o.Incidents, true
}

// HasIncidents returns a boolean if a field has been set.
func (o *IncidentSummaryDto) HasIncidents() bool {
	if o != nil && !IsNil(o.Incidents) {
		return true
	}

	return false
}

// SetIncidents gets a reference to the given int32 and assigns it to the Incidents field.
func (o *IncidentSummaryDto) SetIncidents(v int32) {
	o.Incidents = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *IncidentSummaryDto) GetStatus() bool {
	if o == nil || IsNil(o.Status) {
		var ret bool
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentSummaryDto) GetStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *IncidentSummaryDto) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given bool and assigns it to the Status field.
func (o *IncidentSummaryDto) SetStatus(v bool) {
	o.Status = &v
}

func (o IncidentSummaryDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IncidentSummaryDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.Incidents) {
		toSerialize["incidents"] = o.Incidents
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IncidentSummaryDto) UnmarshalJSON(data []byte) (err error) {
	varIncidentSummaryDto := _IncidentSummaryDto{}

	err = json.Unmarshal(data, &varIncidentSummaryDto)

	if err != nil {
		return err
	}

	*o = IncidentSummaryDto(varIncidentSummaryDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "scope")
		delete(additionalProperties, "incidents")
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIncidentSummaryDto struct {
	value *IncidentSummaryDto
	isSet bool
}

func (v NullableIncidentSummaryDto) Get() *IncidentSummaryDto {
	return v.value
}

func (v *NullableIncidentSummaryDto) Set(val *IncidentSummaryDto) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentSummaryDto) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentSummaryDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentSummaryDto(val *IncidentSummaryDto) *NullableIncidentSummaryDto {
	return &NullableIncidentSummaryDto{value: val, isSet: true}
}

func (v NullableIncidentSummaryDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentSummaryDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
