/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-161538
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the StackUpdateBucketDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StackUpdateBucketDto{}

// StackUpdateBucketDto struct for StackUpdateBucketDto
type StackUpdateBucketDto struct {
	Bucket               *int32  `json:"bucket,omitempty"`
	StartDay             *string `json:"startDay,omitempty"`
	DurationFromStart    *string `json:"durationFromStart,omitempty"`
	StartTime            *string `json:"startTime,omitempty"`
	ZoneOffset           *string `json:"zoneOffset,omitempty"`
	Timestamp            *string `json:"timestamp,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StackUpdateBucketDto StackUpdateBucketDto

// NewStackUpdateBucketDto instantiates a new StackUpdateBucketDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStackUpdateBucketDto() *StackUpdateBucketDto {
	this := StackUpdateBucketDto{}
	return &this
}

// NewStackUpdateBucketDtoWithDefaults instantiates a new StackUpdateBucketDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStackUpdateBucketDtoWithDefaults() *StackUpdateBucketDto {
	this := StackUpdateBucketDto{}
	return &this
}

// GetBucket returns the Bucket field value if set, zero value otherwise.
func (o *StackUpdateBucketDto) GetBucket() int32 {
	if o == nil || IsNil(o.Bucket) {
		var ret int32
		return ret
	}
	return *o.Bucket
}

// GetBucketOk returns a tuple with the Bucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackUpdateBucketDto) GetBucketOk() (*int32, bool) {
	if o == nil || IsNil(o.Bucket) {
		return nil, false
	}
	return o.Bucket, true
}

// HasBucket returns a boolean if a field has been set.
func (o *StackUpdateBucketDto) HasBucket() bool {
	if o != nil && !IsNil(o.Bucket) {
		return true
	}

	return false
}

// SetBucket gets a reference to the given int32 and assigns it to the Bucket field.
func (o *StackUpdateBucketDto) SetBucket(v int32) {
	o.Bucket = &v
}

// GetStartDay returns the StartDay field value if set, zero value otherwise.
func (o *StackUpdateBucketDto) GetStartDay() string {
	if o == nil || IsNil(o.StartDay) {
		var ret string
		return ret
	}
	return *o.StartDay
}

// GetStartDayOk returns a tuple with the StartDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackUpdateBucketDto) GetStartDayOk() (*string, bool) {
	if o == nil || IsNil(o.StartDay) {
		return nil, false
	}
	return o.StartDay, true
}

// HasStartDay returns a boolean if a field has been set.
func (o *StackUpdateBucketDto) HasStartDay() bool {
	if o != nil && !IsNil(o.StartDay) {
		return true
	}

	return false
}

// SetStartDay gets a reference to the given string and assigns it to the StartDay field.
func (o *StackUpdateBucketDto) SetStartDay(v string) {
	o.StartDay = &v
}

// GetDurationFromStart returns the DurationFromStart field value if set, zero value otherwise.
func (o *StackUpdateBucketDto) GetDurationFromStart() string {
	if o == nil || IsNil(o.DurationFromStart) {
		var ret string
		return ret
	}
	return *o.DurationFromStart
}

// GetDurationFromStartOk returns a tuple with the DurationFromStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackUpdateBucketDto) GetDurationFromStartOk() (*string, bool) {
	if o == nil || IsNil(o.DurationFromStart) {
		return nil, false
	}
	return o.DurationFromStart, true
}

// HasDurationFromStart returns a boolean if a field has been set.
func (o *StackUpdateBucketDto) HasDurationFromStart() bool {
	if o != nil && !IsNil(o.DurationFromStart) {
		return true
	}

	return false
}

// SetDurationFromStart gets a reference to the given string and assigns it to the DurationFromStart field.
func (o *StackUpdateBucketDto) SetDurationFromStart(v string) {
	o.DurationFromStart = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *StackUpdateBucketDto) GetStartTime() string {
	if o == nil || IsNil(o.StartTime) {
		var ret string
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackUpdateBucketDto) GetStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *StackUpdateBucketDto) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given string and assigns it to the StartTime field.
func (o *StackUpdateBucketDto) SetStartTime(v string) {
	o.StartTime = &v
}

// GetZoneOffset returns the ZoneOffset field value if set, zero value otherwise.
func (o *StackUpdateBucketDto) GetZoneOffset() string {
	if o == nil || IsNil(o.ZoneOffset) {
		var ret string
		return ret
	}
	return *o.ZoneOffset
}

// GetZoneOffsetOk returns a tuple with the ZoneOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackUpdateBucketDto) GetZoneOffsetOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneOffset) {
		return nil, false
	}
	return o.ZoneOffset, true
}

// HasZoneOffset returns a boolean if a field has been set.
func (o *StackUpdateBucketDto) HasZoneOffset() bool {
	if o != nil && !IsNil(o.ZoneOffset) {
		return true
	}

	return false
}

// SetZoneOffset gets a reference to the given string and assigns it to the ZoneOffset field.
func (o *StackUpdateBucketDto) SetZoneOffset(v string) {
	o.ZoneOffset = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *StackUpdateBucketDto) GetTimestamp() string {
	if o == nil || IsNil(o.Timestamp) {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackUpdateBucketDto) GetTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *StackUpdateBucketDto) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *StackUpdateBucketDto) SetTimestamp(v string) {
	o.Timestamp = &v
}

func (o StackUpdateBucketDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StackUpdateBucketDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Bucket) {
		toSerialize["bucket"] = o.Bucket
	}
	if !IsNil(o.StartDay) {
		toSerialize["startDay"] = o.StartDay
	}
	if !IsNil(o.DurationFromStart) {
		toSerialize["durationFromStart"] = o.DurationFromStart
	}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !IsNil(o.ZoneOffset) {
		toSerialize["zoneOffset"] = o.ZoneOffset
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StackUpdateBucketDto) UnmarshalJSON(data []byte) (err error) {
	varStackUpdateBucketDto := _StackUpdateBucketDto{}

	err = json.Unmarshal(data, &varStackUpdateBucketDto)

	if err != nil {
		return err
	}

	*o = StackUpdateBucketDto(varStackUpdateBucketDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "bucket")
		delete(additionalProperties, "startDay")
		delete(additionalProperties, "durationFromStart")
		delete(additionalProperties, "startTime")
		delete(additionalProperties, "zoneOffset")
		delete(additionalProperties, "timestamp")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStackUpdateBucketDto struct {
	value *StackUpdateBucketDto
	isSet bool
}

func (v NullableStackUpdateBucketDto) Get() *StackUpdateBucketDto {
	return v.value
}

func (v *NullableStackUpdateBucketDto) Set(val *StackUpdateBucketDto) {
	v.value = val
	v.isSet = true
}

func (v NullableStackUpdateBucketDto) IsSet() bool {
	return v.isSet
}

func (v *NullableStackUpdateBucketDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStackUpdateBucketDto(val *StackUpdateBucketDto) *NullableStackUpdateBucketDto {
	return &NullableStackUpdateBucketDto{value: val, isSet: true}
}

func (v NullableStackUpdateBucketDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStackUpdateBucketDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
