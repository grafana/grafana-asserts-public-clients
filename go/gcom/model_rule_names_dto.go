/*
Asserts, Inc

Asserts Public API

API version: 2025.08.25-143624
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the RuleNamesDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RuleNamesDto{}

// RuleNamesDto struct for RuleNamesDto
type RuleNamesDto struct {
	RuleNames            []string `json:"ruleNames,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RuleNamesDto RuleNamesDto

// NewRuleNamesDto instantiates a new RuleNamesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleNamesDto() *RuleNamesDto {
	this := RuleNamesDto{}
	return &this
}

// NewRuleNamesDtoWithDefaults instantiates a new RuleNamesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleNamesDtoWithDefaults() *RuleNamesDto {
	this := RuleNamesDto{}
	return &this
}

// GetRuleNames returns the RuleNames field value if set, zero value otherwise.
func (o *RuleNamesDto) GetRuleNames() []string {
	if o == nil || IsNil(o.RuleNames) {
		var ret []string
		return ret
	}
	return o.RuleNames
}

// GetRuleNamesOk returns a tuple with the RuleNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleNamesDto) GetRuleNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.RuleNames) {
		return nil, false
	}
	return o.RuleNames, true
}

// HasRuleNames returns a boolean if a field has been set.
func (o *RuleNamesDto) HasRuleNames() bool {
	if o != nil && !IsNil(o.RuleNames) {
		return true
	}

	return false
}

// SetRuleNames gets a reference to the given []string and assigns it to the RuleNames field.
func (o *RuleNamesDto) SetRuleNames(v []string) {
	o.RuleNames = v
}

func (o RuleNamesDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuleNamesDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RuleNames) {
		toSerialize["ruleNames"] = o.RuleNames
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RuleNamesDto) UnmarshalJSON(data []byte) (err error) {
	varRuleNamesDto := _RuleNamesDto{}

	err = json.Unmarshal(data, &varRuleNamesDto)

	if err != nil {
		return err
	}

	*o = RuleNamesDto(varRuleNamesDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ruleNames")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRuleNamesDto struct {
	value *RuleNamesDto
	isSet bool
}

func (v NullableRuleNamesDto) Get() *RuleNamesDto {
	return v.value
}

func (v *NullableRuleNamesDto) Set(val *RuleNamesDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleNamesDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleNamesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleNamesDto(val *RuleNamesDto) *NullableRuleNamesDto {
	return &NullableRuleNamesDto{value: val, isSet: true}
}

func (v NullableRuleNamesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleNamesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
