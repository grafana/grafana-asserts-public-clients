/*
Asserts, Inc

Asserts Public API

API version: 1.0.0
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the PrometheusRuleGroupDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrometheusRuleGroupDto{}

// PrometheusRuleGroupDto struct for PrometheusRuleGroupDto
type PrometheusRuleGroupDto struct {
	Name                 *string             `json:"name,omitempty"`
	Interval             *string             `json:"interval,omitempty"`
	Rules                []PrometheusRuleDto `json:"rules,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PrometheusRuleGroupDto PrometheusRuleGroupDto

// NewPrometheusRuleGroupDto instantiates a new PrometheusRuleGroupDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrometheusRuleGroupDto() *PrometheusRuleGroupDto {
	this := PrometheusRuleGroupDto{}
	return &this
}

// NewPrometheusRuleGroupDtoWithDefaults instantiates a new PrometheusRuleGroupDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrometheusRuleGroupDtoWithDefaults() *PrometheusRuleGroupDto {
	this := PrometheusRuleGroupDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PrometheusRuleGroupDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrometheusRuleGroupDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PrometheusRuleGroupDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PrometheusRuleGroupDto) SetName(v string) {
	o.Name = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *PrometheusRuleGroupDto) GetInterval() string {
	if o == nil || IsNil(o.Interval) {
		var ret string
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrometheusRuleGroupDto) GetIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *PrometheusRuleGroupDto) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given string and assigns it to the Interval field.
func (o *PrometheusRuleGroupDto) SetInterval(v string) {
	o.Interval = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *PrometheusRuleGroupDto) GetRules() []PrometheusRuleDto {
	if o == nil || IsNil(o.Rules) {
		var ret []PrometheusRuleDto
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrometheusRuleGroupDto) GetRulesOk() ([]PrometheusRuleDto, bool) {
	if o == nil || IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *PrometheusRuleGroupDto) HasRules() bool {
	if o != nil && !IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []PrometheusRuleDto and assigns it to the Rules field.
func (o *PrometheusRuleGroupDto) SetRules(v []PrometheusRuleDto) {
	o.Rules = v
}

func (o PrometheusRuleGroupDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrometheusRuleGroupDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	if !IsNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PrometheusRuleGroupDto) UnmarshalJSON(data []byte) (err error) {
	varPrometheusRuleGroupDto := _PrometheusRuleGroupDto{}

	err = json.Unmarshal(data, &varPrometheusRuleGroupDto)

	if err != nil {
		return err
	}

	*o = PrometheusRuleGroupDto(varPrometheusRuleGroupDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "interval")
		delete(additionalProperties, "rules")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePrometheusRuleGroupDto struct {
	value *PrometheusRuleGroupDto
	isSet bool
}

func (v NullablePrometheusRuleGroupDto) Get() *PrometheusRuleGroupDto {
	return v.value
}

func (v *NullablePrometheusRuleGroupDto) Set(val *PrometheusRuleGroupDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePrometheusRuleGroupDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePrometheusRuleGroupDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrometheusRuleGroupDto(val *PrometheusRuleGroupDto) *NullablePrometheusRuleGroupDto {
	return &NullablePrometheusRuleGroupDto{value: val, isSet: true}
}

func (v NullablePrometheusRuleGroupDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrometheusRuleGroupDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
