/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-112305
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the SloListDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SloListDto{}

// SloListDto struct for SloListDto
type SloListDto struct {
	Slos                 []SloDto `json:"slos,omitempty"`
	ChartNames           []string `json:"chartNames,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SloListDto SloListDto

// NewSloListDto instantiates a new SloListDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSloListDto() *SloListDto {
	this := SloListDto{}
	return &this
}

// NewSloListDtoWithDefaults instantiates a new SloListDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSloListDtoWithDefaults() *SloListDto {
	this := SloListDto{}
	return &this
}

// GetSlos returns the Slos field value if set, zero value otherwise.
func (o *SloListDto) GetSlos() []SloDto {
	if o == nil || IsNil(o.Slos) {
		var ret []SloDto
		return ret
	}
	return o.Slos
}

// GetSlosOk returns a tuple with the Slos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloListDto) GetSlosOk() ([]SloDto, bool) {
	if o == nil || IsNil(o.Slos) {
		return nil, false
	}
	return o.Slos, true
}

// HasSlos returns a boolean if a field has been set.
func (o *SloListDto) HasSlos() bool {
	if o != nil && !IsNil(o.Slos) {
		return true
	}

	return false
}

// SetSlos gets a reference to the given []SloDto and assigns it to the Slos field.
func (o *SloListDto) SetSlos(v []SloDto) {
	o.Slos = v
}

// GetChartNames returns the ChartNames field value if set, zero value otherwise.
func (o *SloListDto) GetChartNames() []string {
	if o == nil || IsNil(o.ChartNames) {
		var ret []string
		return ret
	}
	return o.ChartNames
}

// GetChartNamesOk returns a tuple with the ChartNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloListDto) GetChartNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.ChartNames) {
		return nil, false
	}
	return o.ChartNames, true
}

// HasChartNames returns a boolean if a field has been set.
func (o *SloListDto) HasChartNames() bool {
	if o != nil && !IsNil(o.ChartNames) {
		return true
	}

	return false
}

// SetChartNames gets a reference to the given []string and assigns it to the ChartNames field.
func (o *SloListDto) SetChartNames(v []string) {
	o.ChartNames = v
}

func (o SloListDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SloListDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Slos) {
		toSerialize["slos"] = o.Slos
	}
	if !IsNil(o.ChartNames) {
		toSerialize["chartNames"] = o.ChartNames
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SloListDto) UnmarshalJSON(data []byte) (err error) {
	varSloListDto := _SloListDto{}

	err = json.Unmarshal(data, &varSloListDto)

	if err != nil {
		return err
	}

	*o = SloListDto(varSloListDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "slos")
		delete(additionalProperties, "chartNames")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSloListDto struct {
	value *SloListDto
	isSet bool
}

func (v NullableSloListDto) Get() *SloListDto {
	return v.value
}

func (v *NullableSloListDto) Set(val *SloListDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSloListDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSloListDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloListDto(val *SloListDto) *NullableSloListDto {
	return &NullableSloListDto{value: val, isSet: true}
}

func (v NullableSloListDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloListDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
