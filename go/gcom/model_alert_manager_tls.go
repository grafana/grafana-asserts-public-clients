/*
Asserts, Inc

Asserts Public API

API version: 2025.08.07-125604
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the AlertManagerTls type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertManagerTls{}

// AlertManagerTls struct for AlertManagerTls
type AlertManagerTls struct {
	CaFile               *string `json:"ca_file,omitempty"`
	CertFile             *string `json:"cert_file,omitempty"`
	KeyFile              *string `json:"key_file,omitempty"`
	ServerName           *string `json:"server_name,omitempty"`
	InsecureSkipVerify   *bool   `json:"insecure_skip_verify,omitempty"`
	MinVersion           *string `json:"min_version,omitempty"`
	MaxVersion           *string `json:"max_version,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AlertManagerTls AlertManagerTls

// NewAlertManagerTls instantiates a new AlertManagerTls object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertManagerTls() *AlertManagerTls {
	this := AlertManagerTls{}
	return &this
}

// NewAlertManagerTlsWithDefaults instantiates a new AlertManagerTls object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertManagerTlsWithDefaults() *AlertManagerTls {
	this := AlertManagerTls{}
	return &this
}

// GetCaFile returns the CaFile field value if set, zero value otherwise.
func (o *AlertManagerTls) GetCaFile() string {
	if o == nil || IsNil(o.CaFile) {
		var ret string
		return ret
	}
	return *o.CaFile
}

// GetCaFileOk returns a tuple with the CaFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerTls) GetCaFileOk() (*string, bool) {
	if o == nil || IsNil(o.CaFile) {
		return nil, false
	}
	return o.CaFile, true
}

// HasCaFile returns a boolean if a field has been set.
func (o *AlertManagerTls) HasCaFile() bool {
	if o != nil && !IsNil(o.CaFile) {
		return true
	}

	return false
}

// SetCaFile gets a reference to the given string and assigns it to the CaFile field.
func (o *AlertManagerTls) SetCaFile(v string) {
	o.CaFile = &v
}

// GetCertFile returns the CertFile field value if set, zero value otherwise.
func (o *AlertManagerTls) GetCertFile() string {
	if o == nil || IsNil(o.CertFile) {
		var ret string
		return ret
	}
	return *o.CertFile
}

// GetCertFileOk returns a tuple with the CertFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerTls) GetCertFileOk() (*string, bool) {
	if o == nil || IsNil(o.CertFile) {
		return nil, false
	}
	return o.CertFile, true
}

// HasCertFile returns a boolean if a field has been set.
func (o *AlertManagerTls) HasCertFile() bool {
	if o != nil && !IsNil(o.CertFile) {
		return true
	}

	return false
}

// SetCertFile gets a reference to the given string and assigns it to the CertFile field.
func (o *AlertManagerTls) SetCertFile(v string) {
	o.CertFile = &v
}

// GetKeyFile returns the KeyFile field value if set, zero value otherwise.
func (o *AlertManagerTls) GetKeyFile() string {
	if o == nil || IsNil(o.KeyFile) {
		var ret string
		return ret
	}
	return *o.KeyFile
}

// GetKeyFileOk returns a tuple with the KeyFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerTls) GetKeyFileOk() (*string, bool) {
	if o == nil || IsNil(o.KeyFile) {
		return nil, false
	}
	return o.KeyFile, true
}

// HasKeyFile returns a boolean if a field has been set.
func (o *AlertManagerTls) HasKeyFile() bool {
	if o != nil && !IsNil(o.KeyFile) {
		return true
	}

	return false
}

// SetKeyFile gets a reference to the given string and assigns it to the KeyFile field.
func (o *AlertManagerTls) SetKeyFile(v string) {
	o.KeyFile = &v
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *AlertManagerTls) GetServerName() string {
	if o == nil || IsNil(o.ServerName) {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerTls) GetServerNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServerName) {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *AlertManagerTls) HasServerName() bool {
	if o != nil && !IsNil(o.ServerName) {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *AlertManagerTls) SetServerName(v string) {
	o.ServerName = &v
}

// GetInsecureSkipVerify returns the InsecureSkipVerify field value if set, zero value otherwise.
func (o *AlertManagerTls) GetInsecureSkipVerify() bool {
	if o == nil || IsNil(o.InsecureSkipVerify) {
		var ret bool
		return ret
	}
	return *o.InsecureSkipVerify
}

// GetInsecureSkipVerifyOk returns a tuple with the InsecureSkipVerify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerTls) GetInsecureSkipVerifyOk() (*bool, bool) {
	if o == nil || IsNil(o.InsecureSkipVerify) {
		return nil, false
	}
	return o.InsecureSkipVerify, true
}

// HasInsecureSkipVerify returns a boolean if a field has been set.
func (o *AlertManagerTls) HasInsecureSkipVerify() bool {
	if o != nil && !IsNil(o.InsecureSkipVerify) {
		return true
	}

	return false
}

// SetInsecureSkipVerify gets a reference to the given bool and assigns it to the InsecureSkipVerify field.
func (o *AlertManagerTls) SetInsecureSkipVerify(v bool) {
	o.InsecureSkipVerify = &v
}

// GetMinVersion returns the MinVersion field value if set, zero value otherwise.
func (o *AlertManagerTls) GetMinVersion() string {
	if o == nil || IsNil(o.MinVersion) {
		var ret string
		return ret
	}
	return *o.MinVersion
}

// GetMinVersionOk returns a tuple with the MinVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerTls) GetMinVersionOk() (*string, bool) {
	if o == nil || IsNil(o.MinVersion) {
		return nil, false
	}
	return o.MinVersion, true
}

// HasMinVersion returns a boolean if a field has been set.
func (o *AlertManagerTls) HasMinVersion() bool {
	if o != nil && !IsNil(o.MinVersion) {
		return true
	}

	return false
}

// SetMinVersion gets a reference to the given string and assigns it to the MinVersion field.
func (o *AlertManagerTls) SetMinVersion(v string) {
	o.MinVersion = &v
}

// GetMaxVersion returns the MaxVersion field value if set, zero value otherwise.
func (o *AlertManagerTls) GetMaxVersion() string {
	if o == nil || IsNil(o.MaxVersion) {
		var ret string
		return ret
	}
	return *o.MaxVersion
}

// GetMaxVersionOk returns a tuple with the MaxVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerTls) GetMaxVersionOk() (*string, bool) {
	if o == nil || IsNil(o.MaxVersion) {
		return nil, false
	}
	return o.MaxVersion, true
}

// HasMaxVersion returns a boolean if a field has been set.
func (o *AlertManagerTls) HasMaxVersion() bool {
	if o != nil && !IsNil(o.MaxVersion) {
		return true
	}

	return false
}

// SetMaxVersion gets a reference to the given string and assigns it to the MaxVersion field.
func (o *AlertManagerTls) SetMaxVersion(v string) {
	o.MaxVersion = &v
}

func (o AlertManagerTls) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertManagerTls) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CaFile) {
		toSerialize["ca_file"] = o.CaFile
	}
	if !IsNil(o.CertFile) {
		toSerialize["cert_file"] = o.CertFile
	}
	if !IsNil(o.KeyFile) {
		toSerialize["key_file"] = o.KeyFile
	}
	if !IsNil(o.ServerName) {
		toSerialize["server_name"] = o.ServerName
	}
	if !IsNil(o.InsecureSkipVerify) {
		toSerialize["insecure_skip_verify"] = o.InsecureSkipVerify
	}
	if !IsNil(o.MinVersion) {
		toSerialize["min_version"] = o.MinVersion
	}
	if !IsNil(o.MaxVersion) {
		toSerialize["max_version"] = o.MaxVersion
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AlertManagerTls) UnmarshalJSON(data []byte) (err error) {
	varAlertManagerTls := _AlertManagerTls{}

	err = json.Unmarshal(data, &varAlertManagerTls)

	if err != nil {
		return err
	}

	*o = AlertManagerTls(varAlertManagerTls)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ca_file")
		delete(additionalProperties, "cert_file")
		delete(additionalProperties, "key_file")
		delete(additionalProperties, "server_name")
		delete(additionalProperties, "insecure_skip_verify")
		delete(additionalProperties, "min_version")
		delete(additionalProperties, "max_version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAlertManagerTls struct {
	value *AlertManagerTls
	isSet bool
}

func (v NullableAlertManagerTls) Get() *AlertManagerTls {
	return v.value
}

func (v *NullableAlertManagerTls) Set(val *AlertManagerTls) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertManagerTls) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertManagerTls) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertManagerTls(val *AlertManagerTls) *NullableAlertManagerTls {
	return &NullableAlertManagerTls{value: val, isSet: true}
}

func (v NullableAlertManagerTls) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertManagerTls) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
