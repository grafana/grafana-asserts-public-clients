/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-112305
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the LogConfigDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogConfigDto{}

// LogConfigDto struct for LogConfigDto
type LogConfigDto struct {
	Tool                   *string                  `json:"tool,omitempty"`
	Url                    *string                  `json:"url,omitempty"`
	DateFormat             *string                  `json:"dateFormat,omitempty"`
	CorrelationLabels      *string                  `json:"correlationLabels,omitempty"`
	LabelToLogFieldMapping map[string]string        `json:"labelToLogFieldMapping,omitempty"`
	DefaultSearchText      *string                  `json:"defaultSearchText,omitempty"`
	ErrorFilter            *string                  `json:"errorFilter,omitempty"`
	Columns                []string                 `json:"columns,omitempty"`
	Filters                []map[string]interface{} `json:"filters,omitempty"`
	Index                  *string                  `json:"index,omitempty"`
	IndexMappings          []IndexMappingDto        `json:"indexMappings,omitempty"`
	Interval               *string                  `json:"interval,omitempty"`
	Query                  map[string]string        `json:"query,omitempty"`
	Sort                   []string                 `json:"sort,omitempty"`
	HttpResponseCodeField  *string                  `json:"httpResponseCodeField,omitempty"`
	OrgId                  *string                  `json:"orgId,omitempty"`
	DataSource             *string                  `json:"dataSource,omitempty"`
	AdditionalProperties   map[string]interface{}
}

type _LogConfigDto LogConfigDto

// NewLogConfigDto instantiates a new LogConfigDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogConfigDto() *LogConfigDto {
	this := LogConfigDto{}
	return &this
}

// NewLogConfigDtoWithDefaults instantiates a new LogConfigDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogConfigDtoWithDefaults() *LogConfigDto {
	this := LogConfigDto{}
	return &this
}

// GetTool returns the Tool field value if set, zero value otherwise.
func (o *LogConfigDto) GetTool() string {
	if o == nil || IsNil(o.Tool) {
		var ret string
		return ret
	}
	return *o.Tool
}

// GetToolOk returns a tuple with the Tool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogConfigDto) GetToolOk() (*string, bool) {
	if o == nil || IsNil(o.Tool) {
		return nil, false
	}
	return o.Tool, true
}

// HasTool returns a boolean if a field has been set.
func (o *LogConfigDto) HasTool() bool {
	if o != nil && !IsNil(o.Tool) {
		return true
	}

	return false
}

// SetTool gets a reference to the given string and assigns it to the Tool field.
func (o *LogConfigDto) SetTool(v string) {
	o.Tool = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *LogConfigDto) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogConfigDto) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *LogConfigDto) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *LogConfigDto) SetUrl(v string) {
	o.Url = &v
}

// GetDateFormat returns the DateFormat field value if set, zero value otherwise.
func (o *LogConfigDto) GetDateFormat() string {
	if o == nil || IsNil(o.DateFormat) {
		var ret string
		return ret
	}
	return *o.DateFormat
}

// GetDateFormatOk returns a tuple with the DateFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogConfigDto) GetDateFormatOk() (*string, bool) {
	if o == nil || IsNil(o.DateFormat) {
		return nil, false
	}
	return o.DateFormat, true
}

// HasDateFormat returns a boolean if a field has been set.
func (o *LogConfigDto) HasDateFormat() bool {
	if o != nil && !IsNil(o.DateFormat) {
		return true
	}

	return false
}

// SetDateFormat gets a reference to the given string and assigns it to the DateFormat field.
func (o *LogConfigDto) SetDateFormat(v string) {
	o.DateFormat = &v
}

// GetCorrelationLabels returns the CorrelationLabels field value if set, zero value otherwise.
func (o *LogConfigDto) GetCorrelationLabels() string {
	if o == nil || IsNil(o.CorrelationLabels) {
		var ret string
		return ret
	}
	return *o.CorrelationLabels
}

// GetCorrelationLabelsOk returns a tuple with the CorrelationLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogConfigDto) GetCorrelationLabelsOk() (*string, bool) {
	if o == nil || IsNil(o.CorrelationLabels) {
		return nil, false
	}
	return o.CorrelationLabels, true
}

// HasCorrelationLabels returns a boolean if a field has been set.
func (o *LogConfigDto) HasCorrelationLabels() bool {
	if o != nil && !IsNil(o.CorrelationLabels) {
		return true
	}

	return false
}

// SetCorrelationLabels gets a reference to the given string and assigns it to the CorrelationLabels field.
func (o *LogConfigDto) SetCorrelationLabels(v string) {
	o.CorrelationLabels = &v
}

// GetLabelToLogFieldMapping returns the LabelToLogFieldMapping field value if set, zero value otherwise.
func (o *LogConfigDto) GetLabelToLogFieldMapping() map[string]string {
	if o == nil || IsNil(o.LabelToLogFieldMapping) {
		var ret map[string]string
		return ret
	}
	return o.LabelToLogFieldMapping
}

// GetLabelToLogFieldMappingOk returns a tuple with the LabelToLogFieldMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogConfigDto) GetLabelToLogFieldMappingOk() (map[string]string, bool) {
	if o == nil || IsNil(o.LabelToLogFieldMapping) {
		return map[string]string{}, false
	}
	return o.LabelToLogFieldMapping, true
}

// HasLabelToLogFieldMapping returns a boolean if a field has been set.
func (o *LogConfigDto) HasLabelToLogFieldMapping() bool {
	if o != nil && !IsNil(o.LabelToLogFieldMapping) {
		return true
	}

	return false
}

// SetLabelToLogFieldMapping gets a reference to the given map[string]string and assigns it to the LabelToLogFieldMapping field.
func (o *LogConfigDto) SetLabelToLogFieldMapping(v map[string]string) {
	o.LabelToLogFieldMapping = v
}

// GetDefaultSearchText returns the DefaultSearchText field value if set, zero value otherwise.
func (o *LogConfigDto) GetDefaultSearchText() string {
	if o == nil || IsNil(o.DefaultSearchText) {
		var ret string
		return ret
	}
	return *o.DefaultSearchText
}

// GetDefaultSearchTextOk returns a tuple with the DefaultSearchText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogConfigDto) GetDefaultSearchTextOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultSearchText) {
		return nil, false
	}
	return o.DefaultSearchText, true
}

// HasDefaultSearchText returns a boolean if a field has been set.
func (o *LogConfigDto) HasDefaultSearchText() bool {
	if o != nil && !IsNil(o.DefaultSearchText) {
		return true
	}

	return false
}

// SetDefaultSearchText gets a reference to the given string and assigns it to the DefaultSearchText field.
func (o *LogConfigDto) SetDefaultSearchText(v string) {
	o.DefaultSearchText = &v
}

// GetErrorFilter returns the ErrorFilter field value if set, zero value otherwise.
func (o *LogConfigDto) GetErrorFilter() string {
	if o == nil || IsNil(o.ErrorFilter) {
		var ret string
		return ret
	}
	return *o.ErrorFilter
}

// GetErrorFilterOk returns a tuple with the ErrorFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogConfigDto) GetErrorFilterOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorFilter) {
		return nil, false
	}
	return o.ErrorFilter, true
}

// HasErrorFilter returns a boolean if a field has been set.
func (o *LogConfigDto) HasErrorFilter() bool {
	if o != nil && !IsNil(o.ErrorFilter) {
		return true
	}

	return false
}

// SetErrorFilter gets a reference to the given string and assigns it to the ErrorFilter field.
func (o *LogConfigDto) SetErrorFilter(v string) {
	o.ErrorFilter = &v
}

// GetColumns returns the Columns field value if set, zero value otherwise.
func (o *LogConfigDto) GetColumns() []string {
	if o == nil || IsNil(o.Columns) {
		var ret []string
		return ret
	}
	return o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogConfigDto) GetColumnsOk() ([]string, bool) {
	if o == nil || IsNil(o.Columns) {
		return nil, false
	}
	return o.Columns, true
}

// HasColumns returns a boolean if a field has been set.
func (o *LogConfigDto) HasColumns() bool {
	if o != nil && !IsNil(o.Columns) {
		return true
	}

	return false
}

// SetColumns gets a reference to the given []string and assigns it to the Columns field.
func (o *LogConfigDto) SetColumns(v []string) {
	o.Columns = v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *LogConfigDto) GetFilters() []map[string]interface{} {
	if o == nil || IsNil(o.Filters) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogConfigDto) GetFiltersOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *LogConfigDto) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []map[string]interface{} and assigns it to the Filters field.
func (o *LogConfigDto) SetFilters(v []map[string]interface{}) {
	o.Filters = v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *LogConfigDto) GetIndex() string {
	if o == nil || IsNil(o.Index) {
		var ret string
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogConfigDto) GetIndexOk() (*string, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *LogConfigDto) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given string and assigns it to the Index field.
func (o *LogConfigDto) SetIndex(v string) {
	o.Index = &v
}

// GetIndexMappings returns the IndexMappings field value if set, zero value otherwise.
func (o *LogConfigDto) GetIndexMappings() []IndexMappingDto {
	if o == nil || IsNil(o.IndexMappings) {
		var ret []IndexMappingDto
		return ret
	}
	return o.IndexMappings
}

// GetIndexMappingsOk returns a tuple with the IndexMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogConfigDto) GetIndexMappingsOk() ([]IndexMappingDto, bool) {
	if o == nil || IsNil(o.IndexMappings) {
		return nil, false
	}
	return o.IndexMappings, true
}

// HasIndexMappings returns a boolean if a field has been set.
func (o *LogConfigDto) HasIndexMappings() bool {
	if o != nil && !IsNil(o.IndexMappings) {
		return true
	}

	return false
}

// SetIndexMappings gets a reference to the given []IndexMappingDto and assigns it to the IndexMappings field.
func (o *LogConfigDto) SetIndexMappings(v []IndexMappingDto) {
	o.IndexMappings = v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *LogConfigDto) GetInterval() string {
	if o == nil || IsNil(o.Interval) {
		var ret string
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogConfigDto) GetIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *LogConfigDto) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given string and assigns it to the Interval field.
func (o *LogConfigDto) SetInterval(v string) {
	o.Interval = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *LogConfigDto) GetQuery() map[string]string {
	if o == nil || IsNil(o.Query) {
		var ret map[string]string
		return ret
	}
	return o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogConfigDto) GetQueryOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Query) {
		return map[string]string{}, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *LogConfigDto) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given map[string]string and assigns it to the Query field.
func (o *LogConfigDto) SetQuery(v map[string]string) {
	o.Query = v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *LogConfigDto) GetSort() []string {
	if o == nil || IsNil(o.Sort) {
		var ret []string
		return ret
	}
	return o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogConfigDto) GetSortOk() ([]string, bool) {
	if o == nil || IsNil(o.Sort) {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *LogConfigDto) HasSort() bool {
	if o != nil && !IsNil(o.Sort) {
		return true
	}

	return false
}

// SetSort gets a reference to the given []string and assigns it to the Sort field.
func (o *LogConfigDto) SetSort(v []string) {
	o.Sort = v
}

// GetHttpResponseCodeField returns the HttpResponseCodeField field value if set, zero value otherwise.
func (o *LogConfigDto) GetHttpResponseCodeField() string {
	if o == nil || IsNil(o.HttpResponseCodeField) {
		var ret string
		return ret
	}
	return *o.HttpResponseCodeField
}

// GetHttpResponseCodeFieldOk returns a tuple with the HttpResponseCodeField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogConfigDto) GetHttpResponseCodeFieldOk() (*string, bool) {
	if o == nil || IsNil(o.HttpResponseCodeField) {
		return nil, false
	}
	return o.HttpResponseCodeField, true
}

// HasHttpResponseCodeField returns a boolean if a field has been set.
func (o *LogConfigDto) HasHttpResponseCodeField() bool {
	if o != nil && !IsNil(o.HttpResponseCodeField) {
		return true
	}

	return false
}

// SetHttpResponseCodeField gets a reference to the given string and assigns it to the HttpResponseCodeField field.
func (o *LogConfigDto) SetHttpResponseCodeField(v string) {
	o.HttpResponseCodeField = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *LogConfigDto) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogConfigDto) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *LogConfigDto) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *LogConfigDto) SetOrgId(v string) {
	o.OrgId = &v
}

// GetDataSource returns the DataSource field value if set, zero value otherwise.
func (o *LogConfigDto) GetDataSource() string {
	if o == nil || IsNil(o.DataSource) {
		var ret string
		return ret
	}
	return *o.DataSource
}

// GetDataSourceOk returns a tuple with the DataSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogConfigDto) GetDataSourceOk() (*string, bool) {
	if o == nil || IsNil(o.DataSource) {
		return nil, false
	}
	return o.DataSource, true
}

// HasDataSource returns a boolean if a field has been set.
func (o *LogConfigDto) HasDataSource() bool {
	if o != nil && !IsNil(o.DataSource) {
		return true
	}

	return false
}

// SetDataSource gets a reference to the given string and assigns it to the DataSource field.
func (o *LogConfigDto) SetDataSource(v string) {
	o.DataSource = &v
}

func (o LogConfigDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogConfigDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tool) {
		toSerialize["tool"] = o.Tool
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.DateFormat) {
		toSerialize["dateFormat"] = o.DateFormat
	}
	if !IsNil(o.CorrelationLabels) {
		toSerialize["correlationLabels"] = o.CorrelationLabels
	}
	if !IsNil(o.LabelToLogFieldMapping) {
		toSerialize["labelToLogFieldMapping"] = o.LabelToLogFieldMapping
	}
	if !IsNil(o.DefaultSearchText) {
		toSerialize["defaultSearchText"] = o.DefaultSearchText
	}
	if !IsNil(o.ErrorFilter) {
		toSerialize["errorFilter"] = o.ErrorFilter
	}
	if !IsNil(o.Columns) {
		toSerialize["columns"] = o.Columns
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	if !IsNil(o.IndexMappings) {
		toSerialize["indexMappings"] = o.IndexMappings
	}
	if !IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !IsNil(o.Sort) {
		toSerialize["sort"] = o.Sort
	}
	if !IsNil(o.HttpResponseCodeField) {
		toSerialize["httpResponseCodeField"] = o.HttpResponseCodeField
	}
	if !IsNil(o.OrgId) {
		toSerialize["orgId"] = o.OrgId
	}
	if !IsNil(o.DataSource) {
		toSerialize["dataSource"] = o.DataSource
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LogConfigDto) UnmarshalJSON(data []byte) (err error) {
	varLogConfigDto := _LogConfigDto{}

	err = json.Unmarshal(data, &varLogConfigDto)

	if err != nil {
		return err
	}

	*o = LogConfigDto(varLogConfigDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tool")
		delete(additionalProperties, "url")
		delete(additionalProperties, "dateFormat")
		delete(additionalProperties, "correlationLabels")
		delete(additionalProperties, "labelToLogFieldMapping")
		delete(additionalProperties, "defaultSearchText")
		delete(additionalProperties, "errorFilter")
		delete(additionalProperties, "columns")
		delete(additionalProperties, "filters")
		delete(additionalProperties, "index")
		delete(additionalProperties, "indexMappings")
		delete(additionalProperties, "interval")
		delete(additionalProperties, "query")
		delete(additionalProperties, "sort")
		delete(additionalProperties, "httpResponseCodeField")
		delete(additionalProperties, "orgId")
		delete(additionalProperties, "dataSource")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLogConfigDto struct {
	value *LogConfigDto
	isSet bool
}

func (v NullableLogConfigDto) Get() *LogConfigDto {
	return v.value
}

func (v *NullableLogConfigDto) Set(val *LogConfigDto) {
	v.value = val
	v.isSet = true
}

func (v NullableLogConfigDto) IsSet() bool {
	return v.isSet
}

func (v *NullableLogConfigDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogConfigDto(val *LogConfigDto) *NullableLogConfigDto {
	return &NullableLogConfigDto{value: val, isSet: true}
}

func (v NullableLogConfigDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogConfigDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
