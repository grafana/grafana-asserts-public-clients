/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-161538
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the VersionedMimirRelabelRuleGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionedMimirRelabelRuleGroup{}

// VersionedMimirRelabelRuleGroup struct for VersionedMimirRelabelRuleGroup
type VersionedMimirRelabelRuleGroup struct {
	Version              *string                `json:"version,omitempty"`
	RuleGroup            *MimirRelabelRuleGroup `json:"ruleGroup,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VersionedMimirRelabelRuleGroup VersionedMimirRelabelRuleGroup

// NewVersionedMimirRelabelRuleGroup instantiates a new VersionedMimirRelabelRuleGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionedMimirRelabelRuleGroup() *VersionedMimirRelabelRuleGroup {
	this := VersionedMimirRelabelRuleGroup{}
	return &this
}

// NewVersionedMimirRelabelRuleGroupWithDefaults instantiates a new VersionedMimirRelabelRuleGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionedMimirRelabelRuleGroupWithDefaults() *VersionedMimirRelabelRuleGroup {
	this := VersionedMimirRelabelRuleGroup{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *VersionedMimirRelabelRuleGroup) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedMimirRelabelRuleGroup) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *VersionedMimirRelabelRuleGroup) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *VersionedMimirRelabelRuleGroup) SetVersion(v string) {
	o.Version = &v
}

// GetRuleGroup returns the RuleGroup field value if set, zero value otherwise.
func (o *VersionedMimirRelabelRuleGroup) GetRuleGroup() MimirRelabelRuleGroup {
	if o == nil || IsNil(o.RuleGroup) {
		var ret MimirRelabelRuleGroup
		return ret
	}
	return *o.RuleGroup
}

// GetRuleGroupOk returns a tuple with the RuleGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedMimirRelabelRuleGroup) GetRuleGroupOk() (*MimirRelabelRuleGroup, bool) {
	if o == nil || IsNil(o.RuleGroup) {
		return nil, false
	}
	return o.RuleGroup, true
}

// HasRuleGroup returns a boolean if a field has been set.
func (o *VersionedMimirRelabelRuleGroup) HasRuleGroup() bool {
	if o != nil && !IsNil(o.RuleGroup) {
		return true
	}

	return false
}

// SetRuleGroup gets a reference to the given MimirRelabelRuleGroup and assigns it to the RuleGroup field.
func (o *VersionedMimirRelabelRuleGroup) SetRuleGroup(v MimirRelabelRuleGroup) {
	o.RuleGroup = &v
}

func (o VersionedMimirRelabelRuleGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionedMimirRelabelRuleGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.RuleGroup) {
		toSerialize["ruleGroup"] = o.RuleGroup
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VersionedMimirRelabelRuleGroup) UnmarshalJSON(data []byte) (err error) {
	varVersionedMimirRelabelRuleGroup := _VersionedMimirRelabelRuleGroup{}

	err = json.Unmarshal(data, &varVersionedMimirRelabelRuleGroup)

	if err != nil {
		return err
	}

	*o = VersionedMimirRelabelRuleGroup(varVersionedMimirRelabelRuleGroup)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "version")
		delete(additionalProperties, "ruleGroup")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVersionedMimirRelabelRuleGroup struct {
	value *VersionedMimirRelabelRuleGroup
	isSet bool
}

func (v NullableVersionedMimirRelabelRuleGroup) Get() *VersionedMimirRelabelRuleGroup {
	return v.value
}

func (v *NullableVersionedMimirRelabelRuleGroup) Set(val *VersionedMimirRelabelRuleGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionedMimirRelabelRuleGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionedMimirRelabelRuleGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionedMimirRelabelRuleGroup(val *VersionedMimirRelabelRuleGroup) *NullableVersionedMimirRelabelRuleGroup {
	return &NullableVersionedMimirRelabelRuleGroup{value: val, isSet: true}
}

func (v NullableVersionedMimirRelabelRuleGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionedMimirRelabelRuleGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
