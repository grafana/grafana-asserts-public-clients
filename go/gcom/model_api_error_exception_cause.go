/*
Asserts, Inc

Asserts Public API

API version: 2025.08.07-125604
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the ApiErrorExceptionCause type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiErrorExceptionCause{}

// ApiErrorExceptionCause struct for ApiErrorExceptionCause
type ApiErrorExceptionCause struct {
	StackTrace           []ApiErrorExceptionCauseStackTraceInner `json:"stackTrace,omitempty"`
	Message              *string                                 `json:"message,omitempty"`
	LocalizedMessage     *string                                 `json:"localizedMessage,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApiErrorExceptionCause ApiErrorExceptionCause

// NewApiErrorExceptionCause instantiates a new ApiErrorExceptionCause object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiErrorExceptionCause() *ApiErrorExceptionCause {
	this := ApiErrorExceptionCause{}
	return &this
}

// NewApiErrorExceptionCauseWithDefaults instantiates a new ApiErrorExceptionCause object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiErrorExceptionCauseWithDefaults() *ApiErrorExceptionCause {
	this := ApiErrorExceptionCause{}
	return &this
}

// GetStackTrace returns the StackTrace field value if set, zero value otherwise.
func (o *ApiErrorExceptionCause) GetStackTrace() []ApiErrorExceptionCauseStackTraceInner {
	if o == nil || IsNil(o.StackTrace) {
		var ret []ApiErrorExceptionCauseStackTraceInner
		return ret
	}
	return o.StackTrace
}

// GetStackTraceOk returns a tuple with the StackTrace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiErrorExceptionCause) GetStackTraceOk() ([]ApiErrorExceptionCauseStackTraceInner, bool) {
	if o == nil || IsNil(o.StackTrace) {
		return nil, false
	}
	return o.StackTrace, true
}

// HasStackTrace returns a boolean if a field has been set.
func (o *ApiErrorExceptionCause) HasStackTrace() bool {
	if o != nil && !IsNil(o.StackTrace) {
		return true
	}

	return false
}

// SetStackTrace gets a reference to the given []ApiErrorExceptionCauseStackTraceInner and assigns it to the StackTrace field.
func (o *ApiErrorExceptionCause) SetStackTrace(v []ApiErrorExceptionCauseStackTraceInner) {
	o.StackTrace = v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ApiErrorExceptionCause) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiErrorExceptionCause) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ApiErrorExceptionCause) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ApiErrorExceptionCause) SetMessage(v string) {
	o.Message = &v
}

// GetLocalizedMessage returns the LocalizedMessage field value if set, zero value otherwise.
func (o *ApiErrorExceptionCause) GetLocalizedMessage() string {
	if o == nil || IsNil(o.LocalizedMessage) {
		var ret string
		return ret
	}
	return *o.LocalizedMessage
}

// GetLocalizedMessageOk returns a tuple with the LocalizedMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiErrorExceptionCause) GetLocalizedMessageOk() (*string, bool) {
	if o == nil || IsNil(o.LocalizedMessage) {
		return nil, false
	}
	return o.LocalizedMessage, true
}

// HasLocalizedMessage returns a boolean if a field has been set.
func (o *ApiErrorExceptionCause) HasLocalizedMessage() bool {
	if o != nil && !IsNil(o.LocalizedMessage) {
		return true
	}

	return false
}

// SetLocalizedMessage gets a reference to the given string and assigns it to the LocalizedMessage field.
func (o *ApiErrorExceptionCause) SetLocalizedMessage(v string) {
	o.LocalizedMessage = &v
}

func (o ApiErrorExceptionCause) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiErrorExceptionCause) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StackTrace) {
		toSerialize["stackTrace"] = o.StackTrace
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.LocalizedMessage) {
		toSerialize["localizedMessage"] = o.LocalizedMessage
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApiErrorExceptionCause) UnmarshalJSON(data []byte) (err error) {
	varApiErrorExceptionCause := _ApiErrorExceptionCause{}

	err = json.Unmarshal(data, &varApiErrorExceptionCause)

	if err != nil {
		return err
	}

	*o = ApiErrorExceptionCause(varApiErrorExceptionCause)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "stackTrace")
		delete(additionalProperties, "message")
		delete(additionalProperties, "localizedMessage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApiErrorExceptionCause struct {
	value *ApiErrorExceptionCause
	isSet bool
}

func (v NullableApiErrorExceptionCause) Get() *ApiErrorExceptionCause {
	return v.value
}

func (v *NullableApiErrorExceptionCause) Set(val *ApiErrorExceptionCause) {
	v.value = val
	v.isSet = true
}

func (v NullableApiErrorExceptionCause) IsSet() bool {
	return v.isSet
}

func (v *NullableApiErrorExceptionCause) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiErrorExceptionCause(val *ApiErrorExceptionCause) *NullableApiErrorExceptionCause {
	return &NullableApiErrorExceptionCause{value: val, isSet: true}
}

func (v NullableApiErrorExceptionCause) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiErrorExceptionCause) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
