/*
Asserts, Inc

Asserts Public API

API version: 2025.08.25-143403
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the AlertManagerBasicAuth type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertManagerBasicAuth{}

// AlertManagerBasicAuth struct for AlertManagerBasicAuth
type AlertManagerBasicAuth struct {
	Username             *string `json:"username,omitempty"`
	Password             *string `json:"password,omitempty"`
	PasswordFile         *string `json:"password_file,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AlertManagerBasicAuth AlertManagerBasicAuth

// NewAlertManagerBasicAuth instantiates a new AlertManagerBasicAuth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertManagerBasicAuth() *AlertManagerBasicAuth {
	this := AlertManagerBasicAuth{}
	return &this
}

// NewAlertManagerBasicAuthWithDefaults instantiates a new AlertManagerBasicAuth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertManagerBasicAuthWithDefaults() *AlertManagerBasicAuth {
	this := AlertManagerBasicAuth{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *AlertManagerBasicAuth) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerBasicAuth) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *AlertManagerBasicAuth) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *AlertManagerBasicAuth) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *AlertManagerBasicAuth) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerBasicAuth) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *AlertManagerBasicAuth) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *AlertManagerBasicAuth) SetPassword(v string) {
	o.Password = &v
}

// GetPasswordFile returns the PasswordFile field value if set, zero value otherwise.
func (o *AlertManagerBasicAuth) GetPasswordFile() string {
	if o == nil || IsNil(o.PasswordFile) {
		var ret string
		return ret
	}
	return *o.PasswordFile
}

// GetPasswordFileOk returns a tuple with the PasswordFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerBasicAuth) GetPasswordFileOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordFile) {
		return nil, false
	}
	return o.PasswordFile, true
}

// HasPasswordFile returns a boolean if a field has been set.
func (o *AlertManagerBasicAuth) HasPasswordFile() bool {
	if o != nil && !IsNil(o.PasswordFile) {
		return true
	}

	return false
}

// SetPasswordFile gets a reference to the given string and assigns it to the PasswordFile field.
func (o *AlertManagerBasicAuth) SetPasswordFile(v string) {
	o.PasswordFile = &v
}

func (o AlertManagerBasicAuth) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertManagerBasicAuth) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.PasswordFile) {
		toSerialize["password_file"] = o.PasswordFile
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AlertManagerBasicAuth) UnmarshalJSON(data []byte) (err error) {
	varAlertManagerBasicAuth := _AlertManagerBasicAuth{}

	err = json.Unmarshal(data, &varAlertManagerBasicAuth)

	if err != nil {
		return err
	}

	*o = AlertManagerBasicAuth(varAlertManagerBasicAuth)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "username")
		delete(additionalProperties, "password")
		delete(additionalProperties, "password_file")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAlertManagerBasicAuth struct {
	value *AlertManagerBasicAuth
	isSet bool
}

func (v NullableAlertManagerBasicAuth) Get() *AlertManagerBasicAuth {
	return v.value
}

func (v *NullableAlertManagerBasicAuth) Set(val *AlertManagerBasicAuth) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertManagerBasicAuth) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertManagerBasicAuth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertManagerBasicAuth(val *AlertManagerBasicAuth) *NullableAlertManagerBasicAuth {
	return &NullableAlertManagerBasicAuth{value: val, isSet: true}
}

func (v NullableAlertManagerBasicAuth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertManagerBasicAuth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
