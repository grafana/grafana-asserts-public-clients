/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-161538
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the MimirRelabelRuleGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MimirRelabelRuleGroup{}

// MimirRelabelRuleGroup struct for MimirRelabelRuleGroup
type MimirRelabelRuleGroup struct {
	Name                 *string            `json:"name,omitempty"`
	Order                *int32             `json:"order,omitempty"`
	Selector             *string            `json:"selector,omitempty"`
	Dataset              *string            `json:"dataset,omitempty"`
	Rules                []MimirRelabelRule `json:"rules,omitempty"`
	VendorLookupQuery    *string            `json:"vendor_lookup_query,omitempty"`
	MetricRegex          []string           `json:"metric_regex,omitempty"`
	SanityMetricRegex    []string           `json:"sanity_metric_regex,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MimirRelabelRuleGroup MimirRelabelRuleGroup

// NewMimirRelabelRuleGroup instantiates a new MimirRelabelRuleGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMimirRelabelRuleGroup() *MimirRelabelRuleGroup {
	this := MimirRelabelRuleGroup{}
	return &this
}

// NewMimirRelabelRuleGroupWithDefaults instantiates a new MimirRelabelRuleGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMimirRelabelRuleGroupWithDefaults() *MimirRelabelRuleGroup {
	this := MimirRelabelRuleGroup{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MimirRelabelRuleGroup) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MimirRelabelRuleGroup) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MimirRelabelRuleGroup) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MimirRelabelRuleGroup) SetName(v string) {
	o.Name = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *MimirRelabelRuleGroup) GetOrder() int32 {
	if o == nil || IsNil(o.Order) {
		var ret int32
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MimirRelabelRuleGroup) GetOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *MimirRelabelRuleGroup) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given int32 and assigns it to the Order field.
func (o *MimirRelabelRuleGroup) SetOrder(v int32) {
	o.Order = &v
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *MimirRelabelRuleGroup) GetSelector() string {
	if o == nil || IsNil(o.Selector) {
		var ret string
		return ret
	}
	return *o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MimirRelabelRuleGroup) GetSelectorOk() (*string, bool) {
	if o == nil || IsNil(o.Selector) {
		return nil, false
	}
	return o.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *MimirRelabelRuleGroup) HasSelector() bool {
	if o != nil && !IsNil(o.Selector) {
		return true
	}

	return false
}

// SetSelector gets a reference to the given string and assigns it to the Selector field.
func (o *MimirRelabelRuleGroup) SetSelector(v string) {
	o.Selector = &v
}

// GetDataset returns the Dataset field value if set, zero value otherwise.
func (o *MimirRelabelRuleGroup) GetDataset() string {
	if o == nil || IsNil(o.Dataset) {
		var ret string
		return ret
	}
	return *o.Dataset
}

// GetDatasetOk returns a tuple with the Dataset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MimirRelabelRuleGroup) GetDatasetOk() (*string, bool) {
	if o == nil || IsNil(o.Dataset) {
		return nil, false
	}
	return o.Dataset, true
}

// HasDataset returns a boolean if a field has been set.
func (o *MimirRelabelRuleGroup) HasDataset() bool {
	if o != nil && !IsNil(o.Dataset) {
		return true
	}

	return false
}

// SetDataset gets a reference to the given string and assigns it to the Dataset field.
func (o *MimirRelabelRuleGroup) SetDataset(v string) {
	o.Dataset = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *MimirRelabelRuleGroup) GetRules() []MimirRelabelRule {
	if o == nil || IsNil(o.Rules) {
		var ret []MimirRelabelRule
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MimirRelabelRuleGroup) GetRulesOk() ([]MimirRelabelRule, bool) {
	if o == nil || IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *MimirRelabelRuleGroup) HasRules() bool {
	if o != nil && !IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []MimirRelabelRule and assigns it to the Rules field.
func (o *MimirRelabelRuleGroup) SetRules(v []MimirRelabelRule) {
	o.Rules = v
}

// GetVendorLookupQuery returns the VendorLookupQuery field value if set, zero value otherwise.
func (o *MimirRelabelRuleGroup) GetVendorLookupQuery() string {
	if o == nil || IsNil(o.VendorLookupQuery) {
		var ret string
		return ret
	}
	return *o.VendorLookupQuery
}

// GetVendorLookupQueryOk returns a tuple with the VendorLookupQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MimirRelabelRuleGroup) GetVendorLookupQueryOk() (*string, bool) {
	if o == nil || IsNil(o.VendorLookupQuery) {
		return nil, false
	}
	return o.VendorLookupQuery, true
}

// HasVendorLookupQuery returns a boolean if a field has been set.
func (o *MimirRelabelRuleGroup) HasVendorLookupQuery() bool {
	if o != nil && !IsNil(o.VendorLookupQuery) {
		return true
	}

	return false
}

// SetVendorLookupQuery gets a reference to the given string and assigns it to the VendorLookupQuery field.
func (o *MimirRelabelRuleGroup) SetVendorLookupQuery(v string) {
	o.VendorLookupQuery = &v
}

// GetMetricRegex returns the MetricRegex field value if set, zero value otherwise.
func (o *MimirRelabelRuleGroup) GetMetricRegex() []string {
	if o == nil || IsNil(o.MetricRegex) {
		var ret []string
		return ret
	}
	return o.MetricRegex
}

// GetMetricRegexOk returns a tuple with the MetricRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MimirRelabelRuleGroup) GetMetricRegexOk() ([]string, bool) {
	if o == nil || IsNil(o.MetricRegex) {
		return nil, false
	}
	return o.MetricRegex, true
}

// HasMetricRegex returns a boolean if a field has been set.
func (o *MimirRelabelRuleGroup) HasMetricRegex() bool {
	if o != nil && !IsNil(o.MetricRegex) {
		return true
	}

	return false
}

// SetMetricRegex gets a reference to the given []string and assigns it to the MetricRegex field.
func (o *MimirRelabelRuleGroup) SetMetricRegex(v []string) {
	o.MetricRegex = v
}

// GetSanityMetricRegex returns the SanityMetricRegex field value if set, zero value otherwise.
func (o *MimirRelabelRuleGroup) GetSanityMetricRegex() []string {
	if o == nil || IsNil(o.SanityMetricRegex) {
		var ret []string
		return ret
	}
	return o.SanityMetricRegex
}

// GetSanityMetricRegexOk returns a tuple with the SanityMetricRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MimirRelabelRuleGroup) GetSanityMetricRegexOk() ([]string, bool) {
	if o == nil || IsNil(o.SanityMetricRegex) {
		return nil, false
	}
	return o.SanityMetricRegex, true
}

// HasSanityMetricRegex returns a boolean if a field has been set.
func (o *MimirRelabelRuleGroup) HasSanityMetricRegex() bool {
	if o != nil && !IsNil(o.SanityMetricRegex) {
		return true
	}

	return false
}

// SetSanityMetricRegex gets a reference to the given []string and assigns it to the SanityMetricRegex field.
func (o *MimirRelabelRuleGroup) SetSanityMetricRegex(v []string) {
	o.SanityMetricRegex = v
}

func (o MimirRelabelRuleGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MimirRelabelRuleGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.Selector) {
		toSerialize["selector"] = o.Selector
	}
	if !IsNil(o.Dataset) {
		toSerialize["dataset"] = o.Dataset
	}
	if !IsNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}
	if !IsNil(o.VendorLookupQuery) {
		toSerialize["vendor_lookup_query"] = o.VendorLookupQuery
	}
	if !IsNil(o.MetricRegex) {
		toSerialize["metric_regex"] = o.MetricRegex
	}
	if !IsNil(o.SanityMetricRegex) {
		toSerialize["sanity_metric_regex"] = o.SanityMetricRegex
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MimirRelabelRuleGroup) UnmarshalJSON(data []byte) (err error) {
	varMimirRelabelRuleGroup := _MimirRelabelRuleGroup{}

	err = json.Unmarshal(data, &varMimirRelabelRuleGroup)

	if err != nil {
		return err
	}

	*o = MimirRelabelRuleGroup(varMimirRelabelRuleGroup)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "order")
		delete(additionalProperties, "selector")
		delete(additionalProperties, "dataset")
		delete(additionalProperties, "rules")
		delete(additionalProperties, "vendor_lookup_query")
		delete(additionalProperties, "metric_regex")
		delete(additionalProperties, "sanity_metric_regex")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMimirRelabelRuleGroup struct {
	value *MimirRelabelRuleGroup
	isSet bool
}

func (v NullableMimirRelabelRuleGroup) Get() *MimirRelabelRuleGroup {
	return v.value
}

func (v *NullableMimirRelabelRuleGroup) Set(val *MimirRelabelRuleGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableMimirRelabelRuleGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableMimirRelabelRuleGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMimirRelabelRuleGroup(val *MimirRelabelRuleGroup) *NullableMimirRelabelRuleGroup {
	return &NullableMimirRelabelRuleGroup{value: val, isSet: true}
}

func (v NullableMimirRelabelRuleGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMimirRelabelRuleGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
