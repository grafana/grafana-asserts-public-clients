/*
Asserts, Inc

Asserts Public API

API version: 1.0.4
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the ModelRuleNamesDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelRuleNamesDto{}

// ModelRuleNamesDto struct for ModelRuleNamesDto
type ModelRuleNamesDto struct {
	RuleNames            []string `json:"ruleNames,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ModelRuleNamesDto ModelRuleNamesDto

// NewModelRuleNamesDto instantiates a new ModelRuleNamesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelRuleNamesDto() *ModelRuleNamesDto {
	this := ModelRuleNamesDto{}
	return &this
}

// NewModelRuleNamesDtoWithDefaults instantiates a new ModelRuleNamesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelRuleNamesDtoWithDefaults() *ModelRuleNamesDto {
	this := ModelRuleNamesDto{}
	return &this
}

// GetRuleNames returns the RuleNames field value if set, zero value otherwise.
func (o *ModelRuleNamesDto) GetRuleNames() []string {
	if o == nil || IsNil(o.RuleNames) {
		var ret []string
		return ret
	}
	return o.RuleNames
}

// GetRuleNamesOk returns a tuple with the RuleNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelRuleNamesDto) GetRuleNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.RuleNames) {
		return nil, false
	}
	return o.RuleNames, true
}

// HasRuleNames returns a boolean if a field has been set.
func (o *ModelRuleNamesDto) HasRuleNames() bool {
	if o != nil && !IsNil(o.RuleNames) {
		return true
	}

	return false
}

// SetRuleNames gets a reference to the given []string and assigns it to the RuleNames field.
func (o *ModelRuleNamesDto) SetRuleNames(v []string) {
	o.RuleNames = v
}

func (o ModelRuleNamesDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelRuleNamesDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RuleNames) {
		toSerialize["ruleNames"] = o.RuleNames
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelRuleNamesDto) UnmarshalJSON(data []byte) (err error) {
	varModelRuleNamesDto := _ModelRuleNamesDto{}

	err = json.Unmarshal(data, &varModelRuleNamesDto)

	if err != nil {
		return err
	}

	*o = ModelRuleNamesDto(varModelRuleNamesDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ruleNames")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelRuleNamesDto struct {
	value *ModelRuleNamesDto
	isSet bool
}

func (v NullableModelRuleNamesDto) Get() *ModelRuleNamesDto {
	return v.value
}

func (v *NullableModelRuleNamesDto) Set(val *ModelRuleNamesDto) {
	v.value = val
	v.isSet = true
}

func (v NullableModelRuleNamesDto) IsSet() bool {
	return v.isSet
}

func (v *NullableModelRuleNamesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelRuleNamesDto(val *ModelRuleNamesDto) *NullableModelRuleNamesDto {
	return &NullableModelRuleNamesDto{value: val, isSet: true}
}

func (v NullableModelRuleNamesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelRuleNamesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
