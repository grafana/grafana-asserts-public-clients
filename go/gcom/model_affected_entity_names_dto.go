/*
Asserts, Inc

Asserts Public API

API version: 1.0.1
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the AffectedEntityNamesDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AffectedEntityNamesDto{}

// AffectedEntityNamesDto struct for AffectedEntityNamesDto
type AffectedEntityNamesDto struct {
	EntityNames          []string `json:"entityNames,omitempty"`
	TotalCount           *int32   `json:"totalCount,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AffectedEntityNamesDto AffectedEntityNamesDto

// NewAffectedEntityNamesDto instantiates a new AffectedEntityNamesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAffectedEntityNamesDto() *AffectedEntityNamesDto {
	this := AffectedEntityNamesDto{}
	return &this
}

// NewAffectedEntityNamesDtoWithDefaults instantiates a new AffectedEntityNamesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAffectedEntityNamesDtoWithDefaults() *AffectedEntityNamesDto {
	this := AffectedEntityNamesDto{}
	return &this
}

// GetEntityNames returns the EntityNames field value if set, zero value otherwise.
func (o *AffectedEntityNamesDto) GetEntityNames() []string {
	if o == nil || IsNil(o.EntityNames) {
		var ret []string
		return ret
	}
	return o.EntityNames
}

// GetEntityNamesOk returns a tuple with the EntityNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AffectedEntityNamesDto) GetEntityNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.EntityNames) {
		return nil, false
	}
	return o.EntityNames, true
}

// HasEntityNames returns a boolean if a field has been set.
func (o *AffectedEntityNamesDto) HasEntityNames() bool {
	if o != nil && !IsNil(o.EntityNames) {
		return true
	}

	return false
}

// SetEntityNames gets a reference to the given []string and assigns it to the EntityNames field.
func (o *AffectedEntityNamesDto) SetEntityNames(v []string) {
	o.EntityNames = v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *AffectedEntityNamesDto) GetTotalCount() int32 {
	if o == nil || IsNil(o.TotalCount) {
		var ret int32
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AffectedEntityNamesDto) GetTotalCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalCount) {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *AffectedEntityNamesDto) HasTotalCount() bool {
	if o != nil && !IsNil(o.TotalCount) {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int32 and assigns it to the TotalCount field.
func (o *AffectedEntityNamesDto) SetTotalCount(v int32) {
	o.TotalCount = &v
}

func (o AffectedEntityNamesDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AffectedEntityNamesDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntityNames) {
		toSerialize["entityNames"] = o.EntityNames
	}
	if !IsNil(o.TotalCount) {
		toSerialize["totalCount"] = o.TotalCount
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AffectedEntityNamesDto) UnmarshalJSON(data []byte) (err error) {
	varAffectedEntityNamesDto := _AffectedEntityNamesDto{}

	err = json.Unmarshal(data, &varAffectedEntityNamesDto)

	if err != nil {
		return err
	}

	*o = AffectedEntityNamesDto(varAffectedEntityNamesDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "entityNames")
		delete(additionalProperties, "totalCount")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAffectedEntityNamesDto struct {
	value *AffectedEntityNamesDto
	isSet bool
}

func (v NullableAffectedEntityNamesDto) Get() *AffectedEntityNamesDto {
	return v.value
}

func (v *NullableAffectedEntityNamesDto) Set(val *AffectedEntityNamesDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAffectedEntityNamesDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAffectedEntityNamesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAffectedEntityNamesDto(val *AffectedEntityNamesDto) *NullableAffectedEntityNamesDto {
	return &NullableAffectedEntityNamesDto{value: val, isSet: true}
}

func (v NullableAffectedEntityNamesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAffectedEntityNamesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
