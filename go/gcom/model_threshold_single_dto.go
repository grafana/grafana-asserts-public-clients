/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-055054
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
	"reflect"
	"strings"
)

// checks if the ThresholdSingleDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThresholdSingleDto{}

// ThresholdSingleDto struct for ThresholdSingleDto
type ThresholdSingleDto struct {
	ThresholdDto
	Query                *string                   `json:"query,omitempty"`
	Values               []ThresholdValueSingleDto `json:"values,omitempty"`
	FillZeros            *bool                     `json:"fillZeros,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ThresholdSingleDto ThresholdSingleDto

// NewThresholdSingleDto instantiates a new ThresholdSingleDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThresholdSingleDto(type_ string) *ThresholdSingleDto {
	this := ThresholdSingleDto{}
	this.Type = type_
	return &this
}

// NewThresholdSingleDtoWithDefaults instantiates a new ThresholdSingleDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThresholdSingleDtoWithDefaults() *ThresholdSingleDto {
	this := ThresholdSingleDto{}
	return &this
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *ThresholdSingleDto) GetQuery() string {
	if o == nil || IsNil(o.Query) {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThresholdSingleDto) GetQueryOk() (*string, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *ThresholdSingleDto) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *ThresholdSingleDto) SetQuery(v string) {
	o.Query = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *ThresholdSingleDto) GetValues() []ThresholdValueSingleDto {
	if o == nil || IsNil(o.Values) {
		var ret []ThresholdValueSingleDto
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThresholdSingleDto) GetValuesOk() ([]ThresholdValueSingleDto, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *ThresholdSingleDto) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []ThresholdValueSingleDto and assigns it to the Values field.
func (o *ThresholdSingleDto) SetValues(v []ThresholdValueSingleDto) {
	o.Values = v
}

// GetFillZeros returns the FillZeros field value if set, zero value otherwise.
func (o *ThresholdSingleDto) GetFillZeros() bool {
	if o == nil || IsNil(o.FillZeros) {
		var ret bool
		return ret
	}
	return *o.FillZeros
}

// GetFillZerosOk returns a tuple with the FillZeros field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThresholdSingleDto) GetFillZerosOk() (*bool, bool) {
	if o == nil || IsNil(o.FillZeros) {
		return nil, false
	}
	return o.FillZeros, true
}

// HasFillZeros returns a boolean if a field has been set.
func (o *ThresholdSingleDto) HasFillZeros() bool {
	if o != nil && !IsNil(o.FillZeros) {
		return true
	}

	return false
}

// SetFillZeros gets a reference to the given bool and assigns it to the FillZeros field.
func (o *ThresholdSingleDto) SetFillZeros(v bool) {
	o.FillZeros = &v
}

func (o ThresholdSingleDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThresholdSingleDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedThresholdDto, errThresholdDto := json.Marshal(o.ThresholdDto)
	if errThresholdDto != nil {
		return map[string]interface{}{}, errThresholdDto
	}
	errThresholdDto = json.Unmarshal([]byte(serializedThresholdDto), &toSerialize)
	if errThresholdDto != nil {
		return map[string]interface{}{}, errThresholdDto
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	if !IsNil(o.FillZeros) {
		toSerialize["fillZeros"] = o.FillZeros
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ThresholdSingleDto) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	type ThresholdSingleDtoWithoutEmbeddedStruct struct {
		Query     *string                   `json:"query,omitempty"`
		Values    []ThresholdValueSingleDto `json:"values,omitempty"`
		FillZeros *bool                     `json:"fillZeros,omitempty"`
	}

	varThresholdSingleDtoWithoutEmbeddedStruct := ThresholdSingleDtoWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varThresholdSingleDtoWithoutEmbeddedStruct)
	if err == nil {
		varThresholdSingleDto := _ThresholdSingleDto{}
		varThresholdSingleDto.Query = varThresholdSingleDtoWithoutEmbeddedStruct.Query
		varThresholdSingleDto.Values = varThresholdSingleDtoWithoutEmbeddedStruct.Values
		varThresholdSingleDto.FillZeros = varThresholdSingleDtoWithoutEmbeddedStruct.FillZeros
		*o = ThresholdSingleDto(varThresholdSingleDto)
	} else {
		return err
	}

	varThresholdSingleDto := _ThresholdSingleDto{}

	err = json.Unmarshal(data, &varThresholdSingleDto)
	if err == nil {
		o.ThresholdDto = varThresholdSingleDto.ThresholdDto
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "query")
		delete(additionalProperties, "values")
		delete(additionalProperties, "fillZeros")

		// remove fields from embedded structs
		reflectThresholdDto := reflect.ValueOf(o.ThresholdDto)
		for i := 0; i < reflectThresholdDto.Type().NumField(); i++ {
			t := reflectThresholdDto.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableThresholdSingleDto struct {
	value *ThresholdSingleDto
	isSet bool
}

func (v NullableThresholdSingleDto) Get() *ThresholdSingleDto {
	return v.value
}

func (v *NullableThresholdSingleDto) Set(val *ThresholdSingleDto) {
	v.value = val
	v.isSet = true
}

func (v NullableThresholdSingleDto) IsSet() bool {
	return v.isSet
}

func (v *NullableThresholdSingleDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThresholdSingleDto(val *ThresholdSingleDto) *NullableThresholdSingleDto {
	return &NullableThresholdSingleDto{value: val, isSet: true}
}

func (v NullableThresholdSingleDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThresholdSingleDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
