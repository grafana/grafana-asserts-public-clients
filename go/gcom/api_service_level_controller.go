/*
Asserts, Inc

Asserts Public API

API version: 1.0.1
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// ServiceLevelControllerAPIService ServiceLevelControllerAPI service
type ServiceLevelControllerAPIService service

type ApiGetSloChartRequest struct {
	ctx                context.Context
	ApiService         *ServiceLevelControllerAPIService
	sloChartRequestDto *SloChartRequestDto
	xScopeOrgID        *string
}

func (r ApiGetSloChartRequest) SloChartRequestDto(sloChartRequestDto SloChartRequestDto) ApiGetSloChartRequest {
	r.sloChartRequestDto = &sloChartRequestDto
	return r
}

// Grafana Tenant/Stack ID
func (r ApiGetSloChartRequest) XScopeOrgID(xScopeOrgID string) ApiGetSloChartRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiGetSloChartRequest) Execute() (*SloChartResponseDto, *http.Response, error) {
	return r.ApiService.GetSloChartExecute(r)
}

/*
GetSloChart Method for GetSloChart

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSloChartRequest
*/
func (a *ServiceLevelControllerAPIService) GetSloChart(ctx context.Context) ApiGetSloChartRequest {
	return ApiGetSloChartRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SloChartResponseDto
func (a *ServiceLevelControllerAPIService) GetSloChartExecute(r ApiGetSloChartRequest) (*SloChartResponseDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SloChartResponseDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceLevelControllerAPIService.GetSloChart")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/slo/chart"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sloChartRequestDto == nil {
		return localVarReturnValue, nil, reportError("sloChartRequestDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	// body params
	localVarPostBody = r.sloChartRequestDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSlosRequest struct {
	ctx               context.Context
	ApiService        *ServiceLevelControllerAPIService
	sloListRequestDto *SloListRequestDto
	xScopeOrgID       *string
}

func (r ApiGetSlosRequest) SloListRequestDto(sloListRequestDto SloListRequestDto) ApiGetSlosRequest {
	r.sloListRequestDto = &sloListRequestDto
	return r
}

// Grafana Tenant/Stack ID
func (r ApiGetSlosRequest) XScopeOrgID(xScopeOrgID string) ApiGetSlosRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiGetSlosRequest) Execute() (*SloListDto, *http.Response, error) {
	return r.ApiService.GetSlosExecute(r)
}

/*
GetSlos Method for GetSlos

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSlosRequest
*/
func (a *ServiceLevelControllerAPIService) GetSlos(ctx context.Context) ApiGetSlosRequest {
	return ApiGetSlosRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SloListDto
func (a *ServiceLevelControllerAPIService) GetSlosExecute(r ApiGetSlosRequest) (*SloListDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SloListDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceLevelControllerAPIService.GetSlos")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/slo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sloListRequestDto == nil {
		return localVarReturnValue, nil, reportError("sloListRequestDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	// body params
	localVarPostBody = r.sloListRequestDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTopSloTargetsRequest struct {
	ctx               context.Context
	ApiService        *ServiceLevelControllerAPIService
	sloListRequestDto *SloListRequestDto
	xScopeOrgID       *string
}

func (r ApiGetTopSloTargetsRequest) SloListRequestDto(sloListRequestDto SloListRequestDto) ApiGetTopSloTargetsRequest {
	r.sloListRequestDto = &sloListRequestDto
	return r
}

// Grafana Tenant/Stack ID
func (r ApiGetTopSloTargetsRequest) XScopeOrgID(xScopeOrgID string) ApiGetTopSloTargetsRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiGetTopSloTargetsRequest) Execute() (*SloListDto, *http.Response, error) {
	return r.ApiService.GetTopSloTargetsExecute(r)
}

/*
GetTopSloTargets Method for GetTopSloTargets

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetTopSloTargetsRequest
*/
func (a *ServiceLevelControllerAPIService) GetTopSloTargets(ctx context.Context) ApiGetTopSloTargetsRequest {
	return ApiGetTopSloTargetsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SloListDto
func (a *ServiceLevelControllerAPIService) GetTopSloTargetsExecute(r ApiGetTopSloTargetsRequest) (*SloListDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SloListDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceLevelControllerAPIService.GetTopSloTargets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/slo/top"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sloListRequestDto == nil {
		return localVarReturnValue, nil, reportError("sloListRequestDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	// body params
	localVarPostBody = r.sloListRequestDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
