/*
Asserts, Inc

Asserts Public API

API version: 2025.08.25-143624
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the EntityScopesRequestDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntityScopesRequestDto{}

// EntityScopesRequestDto struct for EntityScopesRequestDto
type EntityScopesRequestDto struct {
	Start                *int64              `json:"start,omitempty"`
	End                  *int64              `json:"end,omitempty"`
	Conditions           map[string][]string `json:"conditions,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EntityScopesRequestDto EntityScopesRequestDto

// NewEntityScopesRequestDto instantiates a new EntityScopesRequestDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityScopesRequestDto() *EntityScopesRequestDto {
	this := EntityScopesRequestDto{}
	return &this
}

// NewEntityScopesRequestDtoWithDefaults instantiates a new EntityScopesRequestDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityScopesRequestDtoWithDefaults() *EntityScopesRequestDto {
	this := EntityScopesRequestDto{}
	return &this
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *EntityScopesRequestDto) GetStart() int64 {
	if o == nil || IsNil(o.Start) {
		var ret int64
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityScopesRequestDto) GetStartOk() (*int64, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *EntityScopesRequestDto) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given int64 and assigns it to the Start field.
func (o *EntityScopesRequestDto) SetStart(v int64) {
	o.Start = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *EntityScopesRequestDto) GetEnd() int64 {
	if o == nil || IsNil(o.End) {
		var ret int64
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityScopesRequestDto) GetEndOk() (*int64, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *EntityScopesRequestDto) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given int64 and assigns it to the End field.
func (o *EntityScopesRequestDto) SetEnd(v int64) {
	o.End = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *EntityScopesRequestDto) GetConditions() map[string][]string {
	if o == nil || IsNil(o.Conditions) {
		var ret map[string][]string
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityScopesRequestDto) GetConditionsOk() (map[string][]string, bool) {
	if o == nil || IsNil(o.Conditions) {
		return map[string][]string{}, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *EntityScopesRequestDto) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given map[string][]string and assigns it to the Conditions field.
func (o *EntityScopesRequestDto) SetConditions(v map[string][]string) {
	o.Conditions = v
}

func (o EntityScopesRequestDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntityScopesRequestDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EntityScopesRequestDto) UnmarshalJSON(data []byte) (err error) {
	varEntityScopesRequestDto := _EntityScopesRequestDto{}

	err = json.Unmarshal(data, &varEntityScopesRequestDto)

	if err != nil {
		return err
	}

	*o = EntityScopesRequestDto(varEntityScopesRequestDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "start")
		delete(additionalProperties, "end")
		delete(additionalProperties, "conditions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEntityScopesRequestDto struct {
	value *EntityScopesRequestDto
	isSet bool
}

func (v NullableEntityScopesRequestDto) Get() *EntityScopesRequestDto {
	return v.value
}

func (v *NullableEntityScopesRequestDto) Set(val *EntityScopesRequestDto) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityScopesRequestDto) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityScopesRequestDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityScopesRequestDto(val *EntityScopesRequestDto) *NullableEntityScopesRequestDto {
	return &NullableEntityScopesRequestDto{value: val, isSet: true}
}

func (v NullableEntityScopesRequestDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityScopesRequestDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
