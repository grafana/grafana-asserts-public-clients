/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-084942
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the AssertionInfoRequestDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssertionInfoRequestDto{}

// AssertionInfoRequestDto struct for AssertionInfoRequestDto
type AssertionInfoRequestDto struct {
	AssertionName        *string           `json:"assertionName,omitempty"`
	Labels               map[string]string `json:"labels,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AssertionInfoRequestDto AssertionInfoRequestDto

// NewAssertionInfoRequestDto instantiates a new AssertionInfoRequestDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssertionInfoRequestDto() *AssertionInfoRequestDto {
	this := AssertionInfoRequestDto{}
	return &this
}

// NewAssertionInfoRequestDtoWithDefaults instantiates a new AssertionInfoRequestDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssertionInfoRequestDtoWithDefaults() *AssertionInfoRequestDto {
	this := AssertionInfoRequestDto{}
	return &this
}

// GetAssertionName returns the AssertionName field value if set, zero value otherwise.
func (o *AssertionInfoRequestDto) GetAssertionName() string {
	if o == nil || IsNil(o.AssertionName) {
		var ret string
		return ret
	}
	return *o.AssertionName
}

// GetAssertionNameOk returns a tuple with the AssertionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionInfoRequestDto) GetAssertionNameOk() (*string, bool) {
	if o == nil || IsNil(o.AssertionName) {
		return nil, false
	}
	return o.AssertionName, true
}

// HasAssertionName returns a boolean if a field has been set.
func (o *AssertionInfoRequestDto) HasAssertionName() bool {
	if o != nil && !IsNil(o.AssertionName) {
		return true
	}

	return false
}

// SetAssertionName gets a reference to the given string and assigns it to the AssertionName field.
func (o *AssertionInfoRequestDto) SetAssertionName(v string) {
	o.AssertionName = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *AssertionInfoRequestDto) GetLabels() map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionInfoRequestDto) GetLabelsOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return map[string]string{}, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *AssertionInfoRequestDto) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *AssertionInfoRequestDto) SetLabels(v map[string]string) {
	o.Labels = v
}

func (o AssertionInfoRequestDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssertionInfoRequestDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AssertionName) {
		toSerialize["assertionName"] = o.AssertionName
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AssertionInfoRequestDto) UnmarshalJSON(data []byte) (err error) {
	varAssertionInfoRequestDto := _AssertionInfoRequestDto{}

	err = json.Unmarshal(data, &varAssertionInfoRequestDto)

	if err != nil {
		return err
	}

	*o = AssertionInfoRequestDto(varAssertionInfoRequestDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "assertionName")
		delete(additionalProperties, "labels")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAssertionInfoRequestDto struct {
	value *AssertionInfoRequestDto
	isSet bool
}

func (v NullableAssertionInfoRequestDto) Get() *AssertionInfoRequestDto {
	return v.value
}

func (v *NullableAssertionInfoRequestDto) Set(val *AssertionInfoRequestDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAssertionInfoRequestDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAssertionInfoRequestDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssertionInfoRequestDto(val *AssertionInfoRequestDto) *NullableAssertionInfoRequestDto {
	return &NullableAssertionInfoRequestDto{value: val, isSet: true}
}

func (v NullableAssertionInfoRequestDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssertionInfoRequestDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
