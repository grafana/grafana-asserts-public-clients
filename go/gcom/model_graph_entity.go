/*
Asserts, Inc

Asserts Public API

API version: 2025.08.25-143624
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the GraphEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GraphEntity{}

// GraphEntity struct for GraphEntity
type GraphEntity struct {
	Id                   *int64                 `json:"id,omitempty"`
	Type                 *string                `json:"type,omitempty"`
	Name                 *string                `json:"name,omitempty"`
	Active               *bool                  `json:"active,omitempty"`
	ConnectedEntityTypes map[string]int32       `json:"connectedEntityTypes,omitempty"`
	Properties           map[string]interface{} `json:"properties,omitempty"`
	PropertyMatcher      map[string]interface{} `json:"propertyMatcher,omitempty"`
	ScopeNames           map[string]interface{} `json:"scopeNames,omitempty"`
	Scope                *GraphEntityScope      `json:"scope,omitempty"`
	Assertion            *GraphAssertionSummary `json:"assertion,omitempty"`
	ConnectedAssertion   *GraphAssertionSummary `json:"connectedAssertion,omitempty"`
	AssertionCount       *int32                 `json:"assertionCount,omitempty"`
	Key                  *KGEntityKey           `json:"key,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GraphEntity GraphEntity

// NewGraphEntity instantiates a new GraphEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGraphEntity() *GraphEntity {
	this := GraphEntity{}
	return &this
}

// NewGraphEntityWithDefaults instantiates a new GraphEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGraphEntityWithDefaults() *GraphEntity {
	this := GraphEntity{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GraphEntity) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphEntity) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GraphEntity) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *GraphEntity) SetId(v int64) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GraphEntity) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphEntity) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GraphEntity) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GraphEntity) SetType(v string) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GraphEntity) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphEntity) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GraphEntity) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GraphEntity) SetName(v string) {
	o.Name = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *GraphEntity) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphEntity) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *GraphEntity) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *GraphEntity) SetActive(v bool) {
	o.Active = &v
}

// GetConnectedEntityTypes returns the ConnectedEntityTypes field value if set, zero value otherwise.
func (o *GraphEntity) GetConnectedEntityTypes() map[string]int32 {
	if o == nil || IsNil(o.ConnectedEntityTypes) {
		var ret map[string]int32
		return ret
	}
	return o.ConnectedEntityTypes
}

// GetConnectedEntityTypesOk returns a tuple with the ConnectedEntityTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphEntity) GetConnectedEntityTypesOk() (map[string]int32, bool) {
	if o == nil || IsNil(o.ConnectedEntityTypes) {
		return map[string]int32{}, false
	}
	return o.ConnectedEntityTypes, true
}

// HasConnectedEntityTypes returns a boolean if a field has been set.
func (o *GraphEntity) HasConnectedEntityTypes() bool {
	if o != nil && !IsNil(o.ConnectedEntityTypes) {
		return true
	}

	return false
}

// SetConnectedEntityTypes gets a reference to the given map[string]int32 and assigns it to the ConnectedEntityTypes field.
func (o *GraphEntity) SetConnectedEntityTypes(v map[string]int32) {
	o.ConnectedEntityTypes = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *GraphEntity) GetProperties() map[string]interface{} {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]interface{}
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphEntity) GetPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]interface{}{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *GraphEntity) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]interface{} and assigns it to the Properties field.
func (o *GraphEntity) SetProperties(v map[string]interface{}) {
	o.Properties = v
}

// GetPropertyMatcher returns the PropertyMatcher field value if set, zero value otherwise.
func (o *GraphEntity) GetPropertyMatcher() map[string]interface{} {
	if o == nil || IsNil(o.PropertyMatcher) {
		var ret map[string]interface{}
		return ret
	}
	return o.PropertyMatcher
}

// GetPropertyMatcherOk returns a tuple with the PropertyMatcher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphEntity) GetPropertyMatcherOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.PropertyMatcher) {
		return map[string]interface{}{}, false
	}
	return o.PropertyMatcher, true
}

// HasPropertyMatcher returns a boolean if a field has been set.
func (o *GraphEntity) HasPropertyMatcher() bool {
	if o != nil && !IsNil(o.PropertyMatcher) {
		return true
	}

	return false
}

// SetPropertyMatcher gets a reference to the given map[string]interface{} and assigns it to the PropertyMatcher field.
func (o *GraphEntity) SetPropertyMatcher(v map[string]interface{}) {
	o.PropertyMatcher = v
}

// GetScopeNames returns the ScopeNames field value if set, zero value otherwise.
func (o *GraphEntity) GetScopeNames() map[string]interface{} {
	if o == nil || IsNil(o.ScopeNames) {
		var ret map[string]interface{}
		return ret
	}
	return o.ScopeNames
}

// GetScopeNamesOk returns a tuple with the ScopeNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphEntity) GetScopeNamesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ScopeNames) {
		return map[string]interface{}{}, false
	}
	return o.ScopeNames, true
}

// HasScopeNames returns a boolean if a field has been set.
func (o *GraphEntity) HasScopeNames() bool {
	if o != nil && !IsNil(o.ScopeNames) {
		return true
	}

	return false
}

// SetScopeNames gets a reference to the given map[string]interface{} and assigns it to the ScopeNames field.
func (o *GraphEntity) SetScopeNames(v map[string]interface{}) {
	o.ScopeNames = v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *GraphEntity) GetScope() GraphEntityScope {
	if o == nil || IsNil(o.Scope) {
		var ret GraphEntityScope
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphEntity) GetScopeOk() (*GraphEntityScope, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *GraphEntity) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given GraphEntityScope and assigns it to the Scope field.
func (o *GraphEntity) SetScope(v GraphEntityScope) {
	o.Scope = &v
}

// GetAssertion returns the Assertion field value if set, zero value otherwise.
func (o *GraphEntity) GetAssertion() GraphAssertionSummary {
	if o == nil || IsNil(o.Assertion) {
		var ret GraphAssertionSummary
		return ret
	}
	return *o.Assertion
}

// GetAssertionOk returns a tuple with the Assertion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphEntity) GetAssertionOk() (*GraphAssertionSummary, bool) {
	if o == nil || IsNil(o.Assertion) {
		return nil, false
	}
	return o.Assertion, true
}

// HasAssertion returns a boolean if a field has been set.
func (o *GraphEntity) HasAssertion() bool {
	if o != nil && !IsNil(o.Assertion) {
		return true
	}

	return false
}

// SetAssertion gets a reference to the given GraphAssertionSummary and assigns it to the Assertion field.
func (o *GraphEntity) SetAssertion(v GraphAssertionSummary) {
	o.Assertion = &v
}

// GetConnectedAssertion returns the ConnectedAssertion field value if set, zero value otherwise.
func (o *GraphEntity) GetConnectedAssertion() GraphAssertionSummary {
	if o == nil || IsNil(o.ConnectedAssertion) {
		var ret GraphAssertionSummary
		return ret
	}
	return *o.ConnectedAssertion
}

// GetConnectedAssertionOk returns a tuple with the ConnectedAssertion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphEntity) GetConnectedAssertionOk() (*GraphAssertionSummary, bool) {
	if o == nil || IsNil(o.ConnectedAssertion) {
		return nil, false
	}
	return o.ConnectedAssertion, true
}

// HasConnectedAssertion returns a boolean if a field has been set.
func (o *GraphEntity) HasConnectedAssertion() bool {
	if o != nil && !IsNil(o.ConnectedAssertion) {
		return true
	}

	return false
}

// SetConnectedAssertion gets a reference to the given GraphAssertionSummary and assigns it to the ConnectedAssertion field.
func (o *GraphEntity) SetConnectedAssertion(v GraphAssertionSummary) {
	o.ConnectedAssertion = &v
}

// GetAssertionCount returns the AssertionCount field value if set, zero value otherwise.
func (o *GraphEntity) GetAssertionCount() int32 {
	if o == nil || IsNil(o.AssertionCount) {
		var ret int32
		return ret
	}
	return *o.AssertionCount
}

// GetAssertionCountOk returns a tuple with the AssertionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphEntity) GetAssertionCountOk() (*int32, bool) {
	if o == nil || IsNil(o.AssertionCount) {
		return nil, false
	}
	return o.AssertionCount, true
}

// HasAssertionCount returns a boolean if a field has been set.
func (o *GraphEntity) HasAssertionCount() bool {
	if o != nil && !IsNil(o.AssertionCount) {
		return true
	}

	return false
}

// SetAssertionCount gets a reference to the given int32 and assigns it to the AssertionCount field.
func (o *GraphEntity) SetAssertionCount(v int32) {
	o.AssertionCount = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *GraphEntity) GetKey() KGEntityKey {
	if o == nil || IsNil(o.Key) {
		var ret KGEntityKey
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphEntity) GetKeyOk() (*KGEntityKey, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *GraphEntity) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given KGEntityKey and assigns it to the Key field.
func (o *GraphEntity) SetKey(v KGEntityKey) {
	o.Key = &v
}

func (o GraphEntity) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GraphEntity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.ConnectedEntityTypes) {
		toSerialize["connectedEntityTypes"] = o.ConnectedEntityTypes
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.PropertyMatcher) {
		toSerialize["propertyMatcher"] = o.PropertyMatcher
	}
	if !IsNil(o.ScopeNames) {
		toSerialize["scopeNames"] = o.ScopeNames
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.Assertion) {
		toSerialize["assertion"] = o.Assertion
	}
	if !IsNil(o.ConnectedAssertion) {
		toSerialize["connectedAssertion"] = o.ConnectedAssertion
	}
	if !IsNil(o.AssertionCount) {
		toSerialize["assertionCount"] = o.AssertionCount
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GraphEntity) UnmarshalJSON(data []byte) (err error) {
	varGraphEntity := _GraphEntity{}

	err = json.Unmarshal(data, &varGraphEntity)

	if err != nil {
		return err
	}

	*o = GraphEntity(varGraphEntity)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "active")
		delete(additionalProperties, "connectedEntityTypes")
		delete(additionalProperties, "properties")
		delete(additionalProperties, "propertyMatcher")
		delete(additionalProperties, "scopeNames")
		delete(additionalProperties, "scope")
		delete(additionalProperties, "assertion")
		delete(additionalProperties, "connectedAssertion")
		delete(additionalProperties, "assertionCount")
		delete(additionalProperties, "key")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGraphEntity struct {
	value *GraphEntity
	isSet bool
}

func (v NullableGraphEntity) Get() *GraphEntity {
	return v.value
}

func (v *NullableGraphEntity) Set(val *GraphEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableGraphEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableGraphEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGraphEntity(val *GraphEntity) *NullableGraphEntity {
	return &NullableGraphEntity{value: val, isSet: true}
}

func (v NullableGraphEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGraphEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
