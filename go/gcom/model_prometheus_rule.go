/*
Asserts, Inc

Asserts Public API

API version: 2025.09.11-132913
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the PrometheusRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrometheusRule{}

// PrometheusRule struct for PrometheusRule
type PrometheusRule struct {
	Record               *string                    `json:"record,omitempty"`
	Alert                *string                    `json:"alert,omitempty"`
	Expr                 *string                    `json:"expr,omitempty"`
	Annotations          *PrometheusRuleAnnotations `json:"annotations,omitempty"`
	Labels               *PrometheusRuleAnnotations `json:"labels,omitempty"`
	DisableInGroups      []string                   `json:"disableInGroups,omitempty"`
	For                  *string                    `json:"for,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PrometheusRule PrometheusRule

// NewPrometheusRule instantiates a new PrometheusRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrometheusRule() *PrometheusRule {
	this := PrometheusRule{}
	return &this
}

// NewPrometheusRuleWithDefaults instantiates a new PrometheusRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrometheusRuleWithDefaults() *PrometheusRule {
	this := PrometheusRule{}
	return &this
}

// GetRecord returns the Record field value if set, zero value otherwise.
func (o *PrometheusRule) GetRecord() string {
	if o == nil || IsNil(o.Record) {
		var ret string
		return ret
	}
	return *o.Record
}

// GetRecordOk returns a tuple with the Record field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrometheusRule) GetRecordOk() (*string, bool) {
	if o == nil || IsNil(o.Record) {
		return nil, false
	}
	return o.Record, true
}

// HasRecord returns a boolean if a field has been set.
func (o *PrometheusRule) HasRecord() bool {
	if o != nil && !IsNil(o.Record) {
		return true
	}

	return false
}

// SetRecord gets a reference to the given string and assigns it to the Record field.
func (o *PrometheusRule) SetRecord(v string) {
	o.Record = &v
}

// GetAlert returns the Alert field value if set, zero value otherwise.
func (o *PrometheusRule) GetAlert() string {
	if o == nil || IsNil(o.Alert) {
		var ret string
		return ret
	}
	return *o.Alert
}

// GetAlertOk returns a tuple with the Alert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrometheusRule) GetAlertOk() (*string, bool) {
	if o == nil || IsNil(o.Alert) {
		return nil, false
	}
	return o.Alert, true
}

// HasAlert returns a boolean if a field has been set.
func (o *PrometheusRule) HasAlert() bool {
	if o != nil && !IsNil(o.Alert) {
		return true
	}

	return false
}

// SetAlert gets a reference to the given string and assigns it to the Alert field.
func (o *PrometheusRule) SetAlert(v string) {
	o.Alert = &v
}

// GetExpr returns the Expr field value if set, zero value otherwise.
func (o *PrometheusRule) GetExpr() string {
	if o == nil || IsNil(o.Expr) {
		var ret string
		return ret
	}
	return *o.Expr
}

// GetExprOk returns a tuple with the Expr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrometheusRule) GetExprOk() (*string, bool) {
	if o == nil || IsNil(o.Expr) {
		return nil, false
	}
	return o.Expr, true
}

// HasExpr returns a boolean if a field has been set.
func (o *PrometheusRule) HasExpr() bool {
	if o != nil && !IsNil(o.Expr) {
		return true
	}

	return false
}

// SetExpr gets a reference to the given string and assigns it to the Expr field.
func (o *PrometheusRule) SetExpr(v string) {
	o.Expr = &v
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *PrometheusRule) GetAnnotations() PrometheusRuleAnnotations {
	if o == nil || IsNil(o.Annotations) {
		var ret PrometheusRuleAnnotations
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrometheusRule) GetAnnotationsOk() (*PrometheusRuleAnnotations, bool) {
	if o == nil || IsNil(o.Annotations) {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *PrometheusRule) HasAnnotations() bool {
	if o != nil && !IsNil(o.Annotations) {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given PrometheusRuleAnnotations and assigns it to the Annotations field.
func (o *PrometheusRule) SetAnnotations(v PrometheusRuleAnnotations) {
	o.Annotations = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *PrometheusRule) GetLabels() PrometheusRuleAnnotations {
	if o == nil || IsNil(o.Labels) {
		var ret PrometheusRuleAnnotations
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrometheusRule) GetLabelsOk() (*PrometheusRuleAnnotations, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *PrometheusRule) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given PrometheusRuleAnnotations and assigns it to the Labels field.
func (o *PrometheusRule) SetLabels(v PrometheusRuleAnnotations) {
	o.Labels = &v
}

// GetDisableInGroups returns the DisableInGroups field value if set, zero value otherwise.
func (o *PrometheusRule) GetDisableInGroups() []string {
	if o == nil || IsNil(o.DisableInGroups) {
		var ret []string
		return ret
	}
	return o.DisableInGroups
}

// GetDisableInGroupsOk returns a tuple with the DisableInGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrometheusRule) GetDisableInGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.DisableInGroups) {
		return nil, false
	}
	return o.DisableInGroups, true
}

// HasDisableInGroups returns a boolean if a field has been set.
func (o *PrometheusRule) HasDisableInGroups() bool {
	if o != nil && !IsNil(o.DisableInGroups) {
		return true
	}

	return false
}

// SetDisableInGroups gets a reference to the given []string and assigns it to the DisableInGroups field.
func (o *PrometheusRule) SetDisableInGroups(v []string) {
	o.DisableInGroups = v
}

// GetFor returns the For field value if set, zero value otherwise.
func (o *PrometheusRule) GetFor() string {
	if o == nil || IsNil(o.For) {
		var ret string
		return ret
	}
	return *o.For
}

// GetForOk returns a tuple with the For field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrometheusRule) GetForOk() (*string, bool) {
	if o == nil || IsNil(o.For) {
		return nil, false
	}
	return o.For, true
}

// HasFor returns a boolean if a field has been set.
func (o *PrometheusRule) HasFor() bool {
	if o != nil && !IsNil(o.For) {
		return true
	}

	return false
}

// SetFor gets a reference to the given string and assigns it to the For field.
func (o *PrometheusRule) SetFor(v string) {
	o.For = &v
}

func (o PrometheusRule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrometheusRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Record) {
		toSerialize["record"] = o.Record
	}
	if !IsNil(o.Alert) {
		toSerialize["alert"] = o.Alert
	}
	if !IsNil(o.Expr) {
		toSerialize["expr"] = o.Expr
	}
	if !IsNil(o.Annotations) {
		toSerialize["annotations"] = o.Annotations
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.DisableInGroups) {
		toSerialize["disableInGroups"] = o.DisableInGroups
	}
	if !IsNil(o.For) {
		toSerialize["for"] = o.For
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PrometheusRule) UnmarshalJSON(data []byte) (err error) {
	varPrometheusRule := _PrometheusRule{}

	err = json.Unmarshal(data, &varPrometheusRule)

	if err != nil {
		return err
	}

	*o = PrometheusRule(varPrometheusRule)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "record")
		delete(additionalProperties, "alert")
		delete(additionalProperties, "expr")
		delete(additionalProperties, "annotations")
		delete(additionalProperties, "labels")
		delete(additionalProperties, "disableInGroups")
		delete(additionalProperties, "for")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePrometheusRule struct {
	value *PrometheusRule
	isSet bool
}

func (v NullablePrometheusRule) Get() *PrometheusRule {
	return v.value
}

func (v *NullablePrometheusRule) Set(val *PrometheusRule) {
	v.value = val
	v.isSet = true
}

func (v NullablePrometheusRule) IsSet() bool {
	return v.isSet
}

func (v *NullablePrometheusRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrometheusRule(val *PrometheusRule) *NullablePrometheusRule {
	return &NullablePrometheusRule{value: val, isSet: true}
}

func (v NullablePrometheusRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrometheusRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
