/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-084942
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
	"reflect"
	"strings"
)

// checks if the ModelMappingLatencyQuantileDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelMappingLatencyQuantileDto{}

// ModelMappingLatencyQuantileDto struct for ModelMappingLatencyQuantileDto
type ModelMappingLatencyQuantileDto struct {
	ModelMappingSignalDto
	HistogramMetricName  string    `json:"histogramMetricName"`
	HistogramMetricUnit  string    `json:"histogramMetricUnit" validate:"regexp=((milli|micro|)seconds)|((m|μ|)s)"`
	Quantiles            []float64 `json:"quantiles"`
	AdditionalProperties map[string]interface{}
}

type _ModelMappingLatencyQuantileDto ModelMappingLatencyQuantileDto

// NewModelMappingLatencyQuantileDto instantiates a new ModelMappingLatencyQuantileDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelMappingLatencyQuantileDto(histogramMetricName string, histogramMetricUnit string, quantiles []float64, entityNameLabel string, metricSource string, requestType string, kind string) *ModelMappingLatencyQuantileDto {
	this := ModelMappingLatencyQuantileDto{}
	this.EntityNameLabel = entityNameLabel
	this.MetricSource = metricSource
	this.RequestType = requestType
	this.Kind = kind
	this.HistogramMetricName = histogramMetricName
	this.HistogramMetricUnit = histogramMetricUnit
	this.Quantiles = quantiles
	return &this
}

// NewModelMappingLatencyQuantileDtoWithDefaults instantiates a new ModelMappingLatencyQuantileDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelMappingLatencyQuantileDtoWithDefaults() *ModelMappingLatencyQuantileDto {
	this := ModelMappingLatencyQuantileDto{}
	return &this
}

// GetHistogramMetricName returns the HistogramMetricName field value
func (o *ModelMappingLatencyQuantileDto) GetHistogramMetricName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HistogramMetricName
}

// GetHistogramMetricNameOk returns a tuple with the HistogramMetricName field value
// and a boolean to check if the value has been set.
func (o *ModelMappingLatencyQuantileDto) GetHistogramMetricNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HistogramMetricName, true
}

// SetHistogramMetricName sets field value
func (o *ModelMappingLatencyQuantileDto) SetHistogramMetricName(v string) {
	o.HistogramMetricName = v
}

// GetHistogramMetricUnit returns the HistogramMetricUnit field value
func (o *ModelMappingLatencyQuantileDto) GetHistogramMetricUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HistogramMetricUnit
}

// GetHistogramMetricUnitOk returns a tuple with the HistogramMetricUnit field value
// and a boolean to check if the value has been set.
func (o *ModelMappingLatencyQuantileDto) GetHistogramMetricUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HistogramMetricUnit, true
}

// SetHistogramMetricUnit sets field value
func (o *ModelMappingLatencyQuantileDto) SetHistogramMetricUnit(v string) {
	o.HistogramMetricUnit = v
}

// GetQuantiles returns the Quantiles field value
func (o *ModelMappingLatencyQuantileDto) GetQuantiles() []float64 {
	if o == nil {
		var ret []float64
		return ret
	}

	return o.Quantiles
}

// GetQuantilesOk returns a tuple with the Quantiles field value
// and a boolean to check if the value has been set.
func (o *ModelMappingLatencyQuantileDto) GetQuantilesOk() ([]float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Quantiles, true
}

// SetQuantiles sets field value
func (o *ModelMappingLatencyQuantileDto) SetQuantiles(v []float64) {
	o.Quantiles = v
}

func (o ModelMappingLatencyQuantileDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelMappingLatencyQuantileDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedModelMappingSignalDto, errModelMappingSignalDto := json.Marshal(o.ModelMappingSignalDto)
	if errModelMappingSignalDto != nil {
		return map[string]interface{}{}, errModelMappingSignalDto
	}
	errModelMappingSignalDto = json.Unmarshal([]byte(serializedModelMappingSignalDto), &toSerialize)
	if errModelMappingSignalDto != nil {
		return map[string]interface{}{}, errModelMappingSignalDto
	}
	toSerialize["histogramMetricName"] = o.HistogramMetricName
	toSerialize["histogramMetricUnit"] = o.HistogramMetricUnit
	toSerialize["quantiles"] = o.Quantiles

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelMappingLatencyQuantileDto) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	type ModelMappingLatencyQuantileDtoWithoutEmbeddedStruct struct {
		HistogramMetricName string    `json:"histogramMetricName"`
		HistogramMetricUnit string    `json:"histogramMetricUnit" validate:"regexp=((milli|micro|)seconds)|((m|μ|)s)"`
		Quantiles           []float64 `json:"quantiles"`
	}

	varModelMappingLatencyQuantileDtoWithoutEmbeddedStruct := ModelMappingLatencyQuantileDtoWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varModelMappingLatencyQuantileDtoWithoutEmbeddedStruct)
	if err == nil {
		varModelMappingLatencyQuantileDto := _ModelMappingLatencyQuantileDto{}
		varModelMappingLatencyQuantileDto.HistogramMetricName = varModelMappingLatencyQuantileDtoWithoutEmbeddedStruct.HistogramMetricName
		varModelMappingLatencyQuantileDto.HistogramMetricUnit = varModelMappingLatencyQuantileDtoWithoutEmbeddedStruct.HistogramMetricUnit
		varModelMappingLatencyQuantileDto.Quantiles = varModelMappingLatencyQuantileDtoWithoutEmbeddedStruct.Quantiles
		*o = ModelMappingLatencyQuantileDto(varModelMappingLatencyQuantileDto)
	} else {
		return err
	}

	varModelMappingLatencyQuantileDto := _ModelMappingLatencyQuantileDto{}

	err = json.Unmarshal(data, &varModelMappingLatencyQuantileDto)
	if err == nil {
		o.ModelMappingSignalDto = varModelMappingLatencyQuantileDto.ModelMappingSignalDto
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "histogramMetricName")
		delete(additionalProperties, "histogramMetricUnit")
		delete(additionalProperties, "quantiles")

		// remove fields from embedded structs
		reflectModelMappingSignalDto := reflect.ValueOf(o.ModelMappingSignalDto)
		for i := 0; i < reflectModelMappingSignalDto.Type().NumField(); i++ {
			t := reflectModelMappingSignalDto.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelMappingLatencyQuantileDto struct {
	value *ModelMappingLatencyQuantileDto
	isSet bool
}

func (v NullableModelMappingLatencyQuantileDto) Get() *ModelMappingLatencyQuantileDto {
	return v.value
}

func (v *NullableModelMappingLatencyQuantileDto) Set(val *ModelMappingLatencyQuantileDto) {
	v.value = val
	v.isSet = true
}

func (v NullableModelMappingLatencyQuantileDto) IsSet() bool {
	return v.isSet
}

func (v *NullableModelMappingLatencyQuantileDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelMappingLatencyQuantileDto(val *ModelMappingLatencyQuantileDto) *NullableModelMappingLatencyQuantileDto {
	return &NullableModelMappingLatencyQuantileDto{value: val, isSet: true}
}

func (v NullableModelMappingLatencyQuantileDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelMappingLatencyQuantileDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
