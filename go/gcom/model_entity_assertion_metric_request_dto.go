/*
Asserts, Inc

Asserts Public API

API version: 2025.08.25-143624
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the EntityAssertionMetricRequestDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntityAssertionMetricRequestDto{}

// EntityAssertionMetricRequestDto struct for EntityAssertionMetricRequestDto
type EntityAssertionMetricRequestDto struct {
	StartTime             *int64            `json:"startTime,omitempty"`
	EndTime               *int64            `json:"endTime,omitempty"`
	Labels                map[string]string `json:"labels,omitempty"`
	ReferenceForThreshold *bool             `json:"referenceForThreshold,omitempty"`
	AdditionalProperties  map[string]interface{}
}

type _EntityAssertionMetricRequestDto EntityAssertionMetricRequestDto

// NewEntityAssertionMetricRequestDto instantiates a new EntityAssertionMetricRequestDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityAssertionMetricRequestDto() *EntityAssertionMetricRequestDto {
	this := EntityAssertionMetricRequestDto{}
	return &this
}

// NewEntityAssertionMetricRequestDtoWithDefaults instantiates a new EntityAssertionMetricRequestDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityAssertionMetricRequestDtoWithDefaults() *EntityAssertionMetricRequestDto {
	this := EntityAssertionMetricRequestDto{}
	return &this
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *EntityAssertionMetricRequestDto) GetStartTime() int64 {
	if o == nil || IsNil(o.StartTime) {
		var ret int64
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityAssertionMetricRequestDto) GetStartTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *EntityAssertionMetricRequestDto) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given int64 and assigns it to the StartTime field.
func (o *EntityAssertionMetricRequestDto) SetStartTime(v int64) {
	o.StartTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *EntityAssertionMetricRequestDto) GetEndTime() int64 {
	if o == nil || IsNil(o.EndTime) {
		var ret int64
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityAssertionMetricRequestDto) GetEndTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *EntityAssertionMetricRequestDto) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given int64 and assigns it to the EndTime field.
func (o *EntityAssertionMetricRequestDto) SetEndTime(v int64) {
	o.EndTime = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *EntityAssertionMetricRequestDto) GetLabels() map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityAssertionMetricRequestDto) GetLabelsOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return map[string]string{}, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *EntityAssertionMetricRequestDto) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *EntityAssertionMetricRequestDto) SetLabels(v map[string]string) {
	o.Labels = v
}

// GetReferenceForThreshold returns the ReferenceForThreshold field value if set, zero value otherwise.
func (o *EntityAssertionMetricRequestDto) GetReferenceForThreshold() bool {
	if o == nil || IsNil(o.ReferenceForThreshold) {
		var ret bool
		return ret
	}
	return *o.ReferenceForThreshold
}

// GetReferenceForThresholdOk returns a tuple with the ReferenceForThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityAssertionMetricRequestDto) GetReferenceForThresholdOk() (*bool, bool) {
	if o == nil || IsNil(o.ReferenceForThreshold) {
		return nil, false
	}
	return o.ReferenceForThreshold, true
}

// HasReferenceForThreshold returns a boolean if a field has been set.
func (o *EntityAssertionMetricRequestDto) HasReferenceForThreshold() bool {
	if o != nil && !IsNil(o.ReferenceForThreshold) {
		return true
	}

	return false
}

// SetReferenceForThreshold gets a reference to the given bool and assigns it to the ReferenceForThreshold field.
func (o *EntityAssertionMetricRequestDto) SetReferenceForThreshold(v bool) {
	o.ReferenceForThreshold = &v
}

func (o EntityAssertionMetricRequestDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntityAssertionMetricRequestDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !IsNil(o.EndTime) {
		toSerialize["endTime"] = o.EndTime
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.ReferenceForThreshold) {
		toSerialize["referenceForThreshold"] = o.ReferenceForThreshold
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EntityAssertionMetricRequestDto) UnmarshalJSON(data []byte) (err error) {
	varEntityAssertionMetricRequestDto := _EntityAssertionMetricRequestDto{}

	err = json.Unmarshal(data, &varEntityAssertionMetricRequestDto)

	if err != nil {
		return err
	}

	*o = EntityAssertionMetricRequestDto(varEntityAssertionMetricRequestDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "startTime")
		delete(additionalProperties, "endTime")
		delete(additionalProperties, "labels")
		delete(additionalProperties, "referenceForThreshold")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEntityAssertionMetricRequestDto struct {
	value *EntityAssertionMetricRequestDto
	isSet bool
}

func (v NullableEntityAssertionMetricRequestDto) Get() *EntityAssertionMetricRequestDto {
	return v.value
}

func (v *NullableEntityAssertionMetricRequestDto) Set(val *EntityAssertionMetricRequestDto) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityAssertionMetricRequestDto) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityAssertionMetricRequestDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityAssertionMetricRequestDto(val *EntityAssertionMetricRequestDto) *NullableEntityAssertionMetricRequestDto {
	return &NullableEntityAssertionMetricRequestDto{value: val, isSet: true}
}

func (v NullableEntityAssertionMetricRequestDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityAssertionMetricRequestDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
