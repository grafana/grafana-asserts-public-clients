/*
Asserts, Inc

Asserts Public API

API version: 2025.09.11-132913
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// LlmRcaControllerAPIService LlmRcaControllerAPI service
type LlmRcaControllerAPIService service

type ApiGetLlmRcaSummaryRequest struct {
	ctx                       context.Context
	ApiService                *LlmRcaControllerAPIService
	llmRcaSummarySearchReqDto *LlmRcaSummarySearchReqDto
	xScopeOrgID               *string
}

func (r ApiGetLlmRcaSummaryRequest) LlmRcaSummarySearchReqDto(llmRcaSummarySearchReqDto LlmRcaSummarySearchReqDto) ApiGetLlmRcaSummaryRequest {
	r.llmRcaSummarySearchReqDto = &llmRcaSummarySearchReqDto
	return r
}

// Grafana Tenant/Stack ID
func (r ApiGetLlmRcaSummaryRequest) XScopeOrgID(xScopeOrgID string) ApiGetLlmRcaSummaryRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiGetLlmRcaSummaryRequest) Execute() (*LlmRcaSummariesDto, *http.Response, error) {
	return r.ApiService.GetLlmRcaSummaryExecute(r)
}

/*
GetLlmRcaSummary Method for GetLlmRcaSummary

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetLlmRcaSummaryRequest
*/
func (a *LlmRcaControllerAPIService) GetLlmRcaSummary(ctx context.Context) ApiGetLlmRcaSummaryRequest {
	return ApiGetLlmRcaSummaryRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return LlmRcaSummariesDto
func (a *LlmRcaControllerAPIService) GetLlmRcaSummaryExecute(r ApiGetLlmRcaSummaryRequest) (*LlmRcaSummariesDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LlmRcaSummariesDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LlmRcaControllerAPIService.GetLlmRcaSummary")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/search/assertions/llm-summary"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.llmRcaSummarySearchReqDto == nil {
		return localVarReturnValue, nil, reportError("llmRcaSummarySearchReqDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	// body params
	localVarPostBody = r.llmRcaSummarySearchReqDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLlmRcaSummary1Request struct {
	ctx                 context.Context
	ApiService          *LlmRcaControllerAPIService
	llmRcaSummaryReqDto *LlmRcaSummaryReqDto
	xScopeOrgID         *string
}

func (r ApiGetLlmRcaSummary1Request) LlmRcaSummaryReqDto(llmRcaSummaryReqDto LlmRcaSummaryReqDto) ApiGetLlmRcaSummary1Request {
	r.llmRcaSummaryReqDto = &llmRcaSummaryReqDto
	return r
}

// Grafana Tenant/Stack ID
func (r ApiGetLlmRcaSummary1Request) XScopeOrgID(xScopeOrgID string) ApiGetLlmRcaSummary1Request {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiGetLlmRcaSummary1Request) Execute() (*LlmRcaSummariesDto, *http.Response, error) {
	return r.ApiService.GetLlmRcaSummary1Execute(r)
}

/*
GetLlmRcaSummary1 Method for GetLlmRcaSummary1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetLlmRcaSummary1Request
*/
func (a *LlmRcaControllerAPIService) GetLlmRcaSummary1(ctx context.Context) ApiGetLlmRcaSummary1Request {
	return ApiGetLlmRcaSummary1Request{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return LlmRcaSummariesDto
func (a *LlmRcaControllerAPIService) GetLlmRcaSummary1Execute(r ApiGetLlmRcaSummary1Request) (*LlmRcaSummariesDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LlmRcaSummariesDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LlmRcaControllerAPIService.GetLlmRcaSummary1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/assertions/llm-summary"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.llmRcaSummaryReqDto == nil {
		return localVarReturnValue, nil, reportError("llmRcaSummaryReqDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	// body params
	localVarPostBody = r.llmRcaSummaryReqDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
