/*
Asserts, Inc

Asserts Public API

API version: 2025.08.25-143403
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the IncidentGroupDetailDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IncidentGroupDetailDto{}

// IncidentGroupDetailDto struct for IncidentGroupDetailDto
type IncidentGroupDetailDto struct {
	Scope                map[string]interface{} `json:"scope,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IncidentGroupDetailDto IncidentGroupDetailDto

// NewIncidentGroupDetailDto instantiates a new IncidentGroupDetailDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncidentGroupDetailDto() *IncidentGroupDetailDto {
	this := IncidentGroupDetailDto{}
	return &this
}

// NewIncidentGroupDetailDtoWithDefaults instantiates a new IncidentGroupDetailDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentGroupDetailDtoWithDefaults() *IncidentGroupDetailDto {
	this := IncidentGroupDetailDto{}
	return &this
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *IncidentGroupDetailDto) GetScope() map[string]interface{} {
	if o == nil || IsNil(o.Scope) {
		var ret map[string]interface{}
		return ret
	}
	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentGroupDetailDto) GetScopeOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Scope) {
		return map[string]interface{}{}, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *IncidentGroupDetailDto) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given map[string]interface{} and assigns it to the Scope field.
func (o *IncidentGroupDetailDto) SetScope(v map[string]interface{}) {
	o.Scope = v
}

func (o IncidentGroupDetailDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IncidentGroupDetailDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IncidentGroupDetailDto) UnmarshalJSON(data []byte) (err error) {
	varIncidentGroupDetailDto := _IncidentGroupDetailDto{}

	err = json.Unmarshal(data, &varIncidentGroupDetailDto)

	if err != nil {
		return err
	}

	*o = IncidentGroupDetailDto(varIncidentGroupDetailDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "scope")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIncidentGroupDetailDto struct {
	value *IncidentGroupDetailDto
	isSet bool
}

func (v NullableIncidentGroupDetailDto) Get() *IncidentGroupDetailDto {
	return v.value
}

func (v *NullableIncidentGroupDetailDto) Set(val *IncidentGroupDetailDto) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentGroupDetailDto) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentGroupDetailDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentGroupDetailDto(val *IncidentGroupDetailDto) *NullableIncidentGroupDetailDto {
	return &NullableIncidentGroupDetailDto{value: val, isSet: true}
}

func (v NullableIncidentGroupDetailDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentGroupDetailDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
