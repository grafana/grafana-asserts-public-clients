/*
Asserts, Inc

Asserts Public API

API version: 2025.08.25-143403
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the DatasetsSanityChecksDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatasetsSanityChecksDto{}

// DatasetsSanityChecksDto struct for DatasetsSanityChecksDto
type DatasetsSanityChecksDto struct {
	SanityChecks         map[string]DatasetSanityChecksDto `json:"sanityChecks,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DatasetsSanityChecksDto DatasetsSanityChecksDto

// NewDatasetsSanityChecksDto instantiates a new DatasetsSanityChecksDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatasetsSanityChecksDto() *DatasetsSanityChecksDto {
	this := DatasetsSanityChecksDto{}
	return &this
}

// NewDatasetsSanityChecksDtoWithDefaults instantiates a new DatasetsSanityChecksDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatasetsSanityChecksDtoWithDefaults() *DatasetsSanityChecksDto {
	this := DatasetsSanityChecksDto{}
	return &this
}

// GetSanityChecks returns the SanityChecks field value if set, zero value otherwise.
func (o *DatasetsSanityChecksDto) GetSanityChecks() map[string]DatasetSanityChecksDto {
	if o == nil || IsNil(o.SanityChecks) {
		var ret map[string]DatasetSanityChecksDto
		return ret
	}
	return o.SanityChecks
}

// GetSanityChecksOk returns a tuple with the SanityChecks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetsSanityChecksDto) GetSanityChecksOk() (map[string]DatasetSanityChecksDto, bool) {
	if o == nil || IsNil(o.SanityChecks) {
		return map[string]DatasetSanityChecksDto{}, false
	}
	return o.SanityChecks, true
}

// HasSanityChecks returns a boolean if a field has been set.
func (o *DatasetsSanityChecksDto) HasSanityChecks() bool {
	if o != nil && !IsNil(o.SanityChecks) {
		return true
	}

	return false
}

// SetSanityChecks gets a reference to the given map[string]DatasetSanityChecksDto and assigns it to the SanityChecks field.
func (o *DatasetsSanityChecksDto) SetSanityChecks(v map[string]DatasetSanityChecksDto) {
	o.SanityChecks = v
}

func (o DatasetsSanityChecksDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatasetsSanityChecksDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SanityChecks) {
		toSerialize["sanityChecks"] = o.SanityChecks
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DatasetsSanityChecksDto) UnmarshalJSON(data []byte) (err error) {
	varDatasetsSanityChecksDto := _DatasetsSanityChecksDto{}

	err = json.Unmarshal(data, &varDatasetsSanityChecksDto)

	if err != nil {
		return err
	}

	*o = DatasetsSanityChecksDto(varDatasetsSanityChecksDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "sanityChecks")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDatasetsSanityChecksDto struct {
	value *DatasetsSanityChecksDto
	isSet bool
}

func (v NullableDatasetsSanityChecksDto) Get() *DatasetsSanityChecksDto {
	return v.value
}

func (v *NullableDatasetsSanityChecksDto) Set(val *DatasetsSanityChecksDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDatasetsSanityChecksDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDatasetsSanityChecksDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatasetsSanityChecksDto(val *DatasetsSanityChecksDto) *NullableDatasetsSanityChecksDto {
	return &NullableDatasetsSanityChecksDto{value: val, isSet: true}
}

func (v NullableDatasetsSanityChecksDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatasetsSanityChecksDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
