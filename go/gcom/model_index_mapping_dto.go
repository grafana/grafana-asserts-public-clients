/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-112305
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the IndexMappingDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IndexMappingDto{}

// IndexMappingDto struct for IndexMappingDto
type IndexMappingDto struct {
	Index                *string             `json:"index,omitempty"`
	LabelMatchValues     map[string][]string `json:"labelMatchValues,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IndexMappingDto IndexMappingDto

// NewIndexMappingDto instantiates a new IndexMappingDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndexMappingDto() *IndexMappingDto {
	this := IndexMappingDto{}
	return &this
}

// NewIndexMappingDtoWithDefaults instantiates a new IndexMappingDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndexMappingDtoWithDefaults() *IndexMappingDto {
	this := IndexMappingDto{}
	return &this
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *IndexMappingDto) GetIndex() string {
	if o == nil || IsNil(o.Index) {
		var ret string
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexMappingDto) GetIndexOk() (*string, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *IndexMappingDto) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given string and assigns it to the Index field.
func (o *IndexMappingDto) SetIndex(v string) {
	o.Index = &v
}

// GetLabelMatchValues returns the LabelMatchValues field value if set, zero value otherwise.
func (o *IndexMappingDto) GetLabelMatchValues() map[string][]string {
	if o == nil || IsNil(o.LabelMatchValues) {
		var ret map[string][]string
		return ret
	}
	return o.LabelMatchValues
}

// GetLabelMatchValuesOk returns a tuple with the LabelMatchValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexMappingDto) GetLabelMatchValuesOk() (map[string][]string, bool) {
	if o == nil || IsNil(o.LabelMatchValues) {
		return map[string][]string{}, false
	}
	return o.LabelMatchValues, true
}

// HasLabelMatchValues returns a boolean if a field has been set.
func (o *IndexMappingDto) HasLabelMatchValues() bool {
	if o != nil && !IsNil(o.LabelMatchValues) {
		return true
	}

	return false
}

// SetLabelMatchValues gets a reference to the given map[string][]string and assigns it to the LabelMatchValues field.
func (o *IndexMappingDto) SetLabelMatchValues(v map[string][]string) {
	o.LabelMatchValues = v
}

func (o IndexMappingDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IndexMappingDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	if !IsNil(o.LabelMatchValues) {
		toSerialize["labelMatchValues"] = o.LabelMatchValues
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IndexMappingDto) UnmarshalJSON(data []byte) (err error) {
	varIndexMappingDto := _IndexMappingDto{}

	err = json.Unmarshal(data, &varIndexMappingDto)

	if err != nil {
		return err
	}

	*o = IndexMappingDto(varIndexMappingDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "index")
		delete(additionalProperties, "labelMatchValues")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIndexMappingDto struct {
	value *IndexMappingDto
	isSet bool
}

func (v NullableIndexMappingDto) Get() *IndexMappingDto {
	return v.value
}

func (v *NullableIndexMappingDto) Set(val *IndexMappingDto) {
	v.value = val
	v.isSet = true
}

func (v NullableIndexMappingDto) IsSet() bool {
	return v.isSet
}

func (v *NullableIndexMappingDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndexMappingDto(val *IndexMappingDto) *NullableIndexMappingDto {
	return &NullableIndexMappingDto{value: val, isSet: true}
}

func (v NullableIndexMappingDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndexMappingDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
