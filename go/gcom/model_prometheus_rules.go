/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-084942
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the PrometheusRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrometheusRules{}

// PrometheusRules struct for PrometheusRules
type PrometheusRules struct {
	Groups               []PrometheusRuleGroup `json:"groups,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PrometheusRules PrometheusRules

// NewPrometheusRules instantiates a new PrometheusRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrometheusRules() *PrometheusRules {
	this := PrometheusRules{}
	return &this
}

// NewPrometheusRulesWithDefaults instantiates a new PrometheusRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrometheusRulesWithDefaults() *PrometheusRules {
	this := PrometheusRules{}
	return &this
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *PrometheusRules) GetGroups() []PrometheusRuleGroup {
	if o == nil || IsNil(o.Groups) {
		var ret []PrometheusRuleGroup
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrometheusRules) GetGroupsOk() ([]PrometheusRuleGroup, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *PrometheusRules) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []PrometheusRuleGroup and assigns it to the Groups field.
func (o *PrometheusRules) SetGroups(v []PrometheusRuleGroup) {
	o.Groups = v
}

func (o PrometheusRules) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrometheusRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PrometheusRules) UnmarshalJSON(data []byte) (err error) {
	varPrometheusRules := _PrometheusRules{}

	err = json.Unmarshal(data, &varPrometheusRules)

	if err != nil {
		return err
	}

	*o = PrometheusRules(varPrometheusRules)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "groups")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePrometheusRules struct {
	value *PrometheusRules
	isSet bool
}

func (v NullablePrometheusRules) Get() *PrometheusRules {
	return v.value
}

func (v *NullablePrometheusRules) Set(val *PrometheusRules) {
	v.value = val
	v.isSet = true
}

func (v NullablePrometheusRules) IsSet() bool {
	return v.isSet
}

func (v *NullablePrometheusRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrometheusRules(val *PrometheusRules) *NullablePrometheusRules {
	return &NullablePrometheusRules{value: val, isSet: true}
}

func (v NullablePrometheusRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrometheusRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
