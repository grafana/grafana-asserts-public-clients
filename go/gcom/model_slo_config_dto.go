/*
Asserts, Inc

Asserts Public API

API version: 2025.08.25-143403
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the SloConfigDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SloConfigDto{}

// SloConfigDto struct for SloConfigDto
type SloConfigDto struct {
	Name                 *string             `json:"name,omitempty"`
	Ratio                *float64            `json:"ratio,omitempty"`
	Value                *float64            `json:"value,omitempty"`
	Window               *SloConfigDtoWindow `json:"window,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SloConfigDto SloConfigDto

// NewSloConfigDto instantiates a new SloConfigDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSloConfigDto() *SloConfigDto {
	this := SloConfigDto{}
	return &this
}

// NewSloConfigDtoWithDefaults instantiates a new SloConfigDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSloConfigDtoWithDefaults() *SloConfigDto {
	this := SloConfigDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SloConfigDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloConfigDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SloConfigDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SloConfigDto) SetName(v string) {
	o.Name = &v
}

// GetRatio returns the Ratio field value if set, zero value otherwise.
func (o *SloConfigDto) GetRatio() float64 {
	if o == nil || IsNil(o.Ratio) {
		var ret float64
		return ret
	}
	return *o.Ratio
}

// GetRatioOk returns a tuple with the Ratio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloConfigDto) GetRatioOk() (*float64, bool) {
	if o == nil || IsNil(o.Ratio) {
		return nil, false
	}
	return o.Ratio, true
}

// HasRatio returns a boolean if a field has been set.
func (o *SloConfigDto) HasRatio() bool {
	if o != nil && !IsNil(o.Ratio) {
		return true
	}

	return false
}

// SetRatio gets a reference to the given float64 and assigns it to the Ratio field.
func (o *SloConfigDto) SetRatio(v float64) {
	o.Ratio = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SloConfigDto) GetValue() float64 {
	if o == nil || IsNil(o.Value) {
		var ret float64
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloConfigDto) GetValueOk() (*float64, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SloConfigDto) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float64 and assigns it to the Value field.
func (o *SloConfigDto) SetValue(v float64) {
	o.Value = &v
}

// GetWindow returns the Window field value if set, zero value otherwise.
func (o *SloConfigDto) GetWindow() SloConfigDtoWindow {
	if o == nil || IsNil(o.Window) {
		var ret SloConfigDtoWindow
		return ret
	}
	return *o.Window
}

// GetWindowOk returns a tuple with the Window field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloConfigDto) GetWindowOk() (*SloConfigDtoWindow, bool) {
	if o == nil || IsNil(o.Window) {
		return nil, false
	}
	return o.Window, true
}

// HasWindow returns a boolean if a field has been set.
func (o *SloConfigDto) HasWindow() bool {
	if o != nil && !IsNil(o.Window) {
		return true
	}

	return false
}

// SetWindow gets a reference to the given SloConfigDtoWindow and assigns it to the Window field.
func (o *SloConfigDto) SetWindow(v SloConfigDtoWindow) {
	o.Window = &v
}

func (o SloConfigDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SloConfigDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Ratio) {
		toSerialize["ratio"] = o.Ratio
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Window) {
		toSerialize["window"] = o.Window
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SloConfigDto) UnmarshalJSON(data []byte) (err error) {
	varSloConfigDto := _SloConfigDto{}

	err = json.Unmarshal(data, &varSloConfigDto)

	if err != nil {
		return err
	}

	*o = SloConfigDto(varSloConfigDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "ratio")
		delete(additionalProperties, "value")
		delete(additionalProperties, "window")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSloConfigDto struct {
	value *SloConfigDto
	isSet bool
}

func (v NullableSloConfigDto) Get() *SloConfigDto {
	return v.value
}

func (v *NullableSloConfigDto) Set(val *SloConfigDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSloConfigDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSloConfigDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloConfigDto(val *SloConfigDto) *NullableSloConfigDto {
	return &NullableSloConfigDto{value: val, isSet: true}
}

func (v NullableSloConfigDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloConfigDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
