/*
Asserts, Inc

Asserts Public API

API version: 2025.08.25-143624
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the AssertionScoresDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssertionScoresDto{}

// AssertionScoresDto struct for AssertionScoresDto
type AssertionScoresDto struct {
	TimeWindow                     *TimeWindowDto             `json:"timeWindow,omitempty"`
	TimeStepIntervalMs             *int64                     `json:"timeStepIntervalMs,omitempty"`
	AssertionScoresForRootEntity   *EntityAssertionScoresDto  `json:"assertionScoresForRootEntity,omitempty"`
	AssertionScoresForTopNEntities []EntityAssertionScoresDto `json:"assertionScoresForTopNEntities,omitempty"`
	AssertionRollupDto             []AssertionRollupDto       `json:"assertionRollupDto,omitempty"`
	GraphData                      interface{}                `json:"graphData,omitempty"`
	AdditionalProperties           map[string]interface{}
}

type _AssertionScoresDto AssertionScoresDto

// NewAssertionScoresDto instantiates a new AssertionScoresDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssertionScoresDto() *AssertionScoresDto {
	this := AssertionScoresDto{}
	return &this
}

// NewAssertionScoresDtoWithDefaults instantiates a new AssertionScoresDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssertionScoresDtoWithDefaults() *AssertionScoresDto {
	this := AssertionScoresDto{}
	return &this
}

// GetTimeWindow returns the TimeWindow field value if set, zero value otherwise.
func (o *AssertionScoresDto) GetTimeWindow() TimeWindowDto {
	if o == nil || IsNil(o.TimeWindow) {
		var ret TimeWindowDto
		return ret
	}
	return *o.TimeWindow
}

// GetTimeWindowOk returns a tuple with the TimeWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionScoresDto) GetTimeWindowOk() (*TimeWindowDto, bool) {
	if o == nil || IsNil(o.TimeWindow) {
		return nil, false
	}
	return o.TimeWindow, true
}

// HasTimeWindow returns a boolean if a field has been set.
func (o *AssertionScoresDto) HasTimeWindow() bool {
	if o != nil && !IsNil(o.TimeWindow) {
		return true
	}

	return false
}

// SetTimeWindow gets a reference to the given TimeWindowDto and assigns it to the TimeWindow field.
func (o *AssertionScoresDto) SetTimeWindow(v TimeWindowDto) {
	o.TimeWindow = &v
}

// GetTimeStepIntervalMs returns the TimeStepIntervalMs field value if set, zero value otherwise.
func (o *AssertionScoresDto) GetTimeStepIntervalMs() int64 {
	if o == nil || IsNil(o.TimeStepIntervalMs) {
		var ret int64
		return ret
	}
	return *o.TimeStepIntervalMs
}

// GetTimeStepIntervalMsOk returns a tuple with the TimeStepIntervalMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionScoresDto) GetTimeStepIntervalMsOk() (*int64, bool) {
	if o == nil || IsNil(o.TimeStepIntervalMs) {
		return nil, false
	}
	return o.TimeStepIntervalMs, true
}

// HasTimeStepIntervalMs returns a boolean if a field has been set.
func (o *AssertionScoresDto) HasTimeStepIntervalMs() bool {
	if o != nil && !IsNil(o.TimeStepIntervalMs) {
		return true
	}

	return false
}

// SetTimeStepIntervalMs gets a reference to the given int64 and assigns it to the TimeStepIntervalMs field.
func (o *AssertionScoresDto) SetTimeStepIntervalMs(v int64) {
	o.TimeStepIntervalMs = &v
}

// GetAssertionScoresForRootEntity returns the AssertionScoresForRootEntity field value if set, zero value otherwise.
func (o *AssertionScoresDto) GetAssertionScoresForRootEntity() EntityAssertionScoresDto {
	if o == nil || IsNil(o.AssertionScoresForRootEntity) {
		var ret EntityAssertionScoresDto
		return ret
	}
	return *o.AssertionScoresForRootEntity
}

// GetAssertionScoresForRootEntityOk returns a tuple with the AssertionScoresForRootEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionScoresDto) GetAssertionScoresForRootEntityOk() (*EntityAssertionScoresDto, bool) {
	if o == nil || IsNil(o.AssertionScoresForRootEntity) {
		return nil, false
	}
	return o.AssertionScoresForRootEntity, true
}

// HasAssertionScoresForRootEntity returns a boolean if a field has been set.
func (o *AssertionScoresDto) HasAssertionScoresForRootEntity() bool {
	if o != nil && !IsNil(o.AssertionScoresForRootEntity) {
		return true
	}

	return false
}

// SetAssertionScoresForRootEntity gets a reference to the given EntityAssertionScoresDto and assigns it to the AssertionScoresForRootEntity field.
func (o *AssertionScoresDto) SetAssertionScoresForRootEntity(v EntityAssertionScoresDto) {
	o.AssertionScoresForRootEntity = &v
}

// GetAssertionScoresForTopNEntities returns the AssertionScoresForTopNEntities field value if set, zero value otherwise.
func (o *AssertionScoresDto) GetAssertionScoresForTopNEntities() []EntityAssertionScoresDto {
	if o == nil || IsNil(o.AssertionScoresForTopNEntities) {
		var ret []EntityAssertionScoresDto
		return ret
	}
	return o.AssertionScoresForTopNEntities
}

// GetAssertionScoresForTopNEntitiesOk returns a tuple with the AssertionScoresForTopNEntities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionScoresDto) GetAssertionScoresForTopNEntitiesOk() ([]EntityAssertionScoresDto, bool) {
	if o == nil || IsNil(o.AssertionScoresForTopNEntities) {
		return nil, false
	}
	return o.AssertionScoresForTopNEntities, true
}

// HasAssertionScoresForTopNEntities returns a boolean if a field has been set.
func (o *AssertionScoresDto) HasAssertionScoresForTopNEntities() bool {
	if o != nil && !IsNil(o.AssertionScoresForTopNEntities) {
		return true
	}

	return false
}

// SetAssertionScoresForTopNEntities gets a reference to the given []EntityAssertionScoresDto and assigns it to the AssertionScoresForTopNEntities field.
func (o *AssertionScoresDto) SetAssertionScoresForTopNEntities(v []EntityAssertionScoresDto) {
	o.AssertionScoresForTopNEntities = v
}

// GetAssertionRollupDto returns the AssertionRollupDto field value if set, zero value otherwise.
func (o *AssertionScoresDto) GetAssertionRollupDto() []AssertionRollupDto {
	if o == nil || IsNil(o.AssertionRollupDto) {
		var ret []AssertionRollupDto
		return ret
	}
	return o.AssertionRollupDto
}

// GetAssertionRollupDtoOk returns a tuple with the AssertionRollupDto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionScoresDto) GetAssertionRollupDtoOk() ([]AssertionRollupDto, bool) {
	if o == nil || IsNil(o.AssertionRollupDto) {
		return nil, false
	}
	return o.AssertionRollupDto, true
}

// HasAssertionRollupDto returns a boolean if a field has been set.
func (o *AssertionScoresDto) HasAssertionRollupDto() bool {
	if o != nil && !IsNil(o.AssertionRollupDto) {
		return true
	}

	return false
}

// SetAssertionRollupDto gets a reference to the given []AssertionRollupDto and assigns it to the AssertionRollupDto field.
func (o *AssertionScoresDto) SetAssertionRollupDto(v []AssertionRollupDto) {
	o.AssertionRollupDto = v
}

// GetGraphData returns the GraphData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssertionScoresDto) GetGraphData() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.GraphData
}

// GetGraphDataOk returns a tuple with the GraphData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssertionScoresDto) GetGraphDataOk() (*interface{}, bool) {
	if o == nil || IsNil(o.GraphData) {
		return nil, false
	}
	return &o.GraphData, true
}

// HasGraphData returns a boolean if a field has been set.
func (o *AssertionScoresDto) HasGraphData() bool {
	if o != nil && IsNil(o.GraphData) {
		return true
	}

	return false
}

// SetGraphData gets a reference to the given interface{} and assigns it to the GraphData field.
func (o *AssertionScoresDto) SetGraphData(v interface{}) {
	o.GraphData = v
}

func (o AssertionScoresDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssertionScoresDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TimeWindow) {
		toSerialize["timeWindow"] = o.TimeWindow
	}
	if !IsNil(o.TimeStepIntervalMs) {
		toSerialize["timeStepIntervalMs"] = o.TimeStepIntervalMs
	}
	if !IsNil(o.AssertionScoresForRootEntity) {
		toSerialize["assertionScoresForRootEntity"] = o.AssertionScoresForRootEntity
	}
	if !IsNil(o.AssertionScoresForTopNEntities) {
		toSerialize["assertionScoresForTopNEntities"] = o.AssertionScoresForTopNEntities
	}
	if !IsNil(o.AssertionRollupDto) {
		toSerialize["assertionRollupDto"] = o.AssertionRollupDto
	}
	if o.GraphData != nil {
		toSerialize["graphData"] = o.GraphData
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AssertionScoresDto) UnmarshalJSON(data []byte) (err error) {
	varAssertionScoresDto := _AssertionScoresDto{}

	err = json.Unmarshal(data, &varAssertionScoresDto)

	if err != nil {
		return err
	}

	*o = AssertionScoresDto(varAssertionScoresDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "timeWindow")
		delete(additionalProperties, "timeStepIntervalMs")
		delete(additionalProperties, "assertionScoresForRootEntity")
		delete(additionalProperties, "assertionScoresForTopNEntities")
		delete(additionalProperties, "assertionRollupDto")
		delete(additionalProperties, "graphData")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAssertionScoresDto struct {
	value *AssertionScoresDto
	isSet bool
}

func (v NullableAssertionScoresDto) Get() *AssertionScoresDto {
	return v.value
}

func (v *NullableAssertionScoresDto) Set(val *AssertionScoresDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAssertionScoresDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAssertionScoresDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssertionScoresDto(val *AssertionScoresDto) *NullableAssertionScoresDto {
	return &NullableAssertionScoresDto{value: val, isSet: true}
}

func (v NullableAssertionScoresDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssertionScoresDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
