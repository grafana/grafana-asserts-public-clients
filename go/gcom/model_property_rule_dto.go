/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-055054
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the PropertyRuleDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PropertyRuleDto{}

// PropertyRuleDto struct for PropertyRuleDto
type PropertyRuleDto struct {
	Query                *string           `json:"query,omitempty"`
	LabelValues          map[string]string `json:"labelValues,omitempty"`
	Literals             map[string]string `json:"literals,omitempty"`
	MetricValue          *string           `json:"metricValue,omitempty"`
	Disabled             *bool             `json:"disabled,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PropertyRuleDto PropertyRuleDto

// NewPropertyRuleDto instantiates a new PropertyRuleDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPropertyRuleDto() *PropertyRuleDto {
	this := PropertyRuleDto{}
	return &this
}

// NewPropertyRuleDtoWithDefaults instantiates a new PropertyRuleDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertyRuleDtoWithDefaults() *PropertyRuleDto {
	this := PropertyRuleDto{}
	return &this
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *PropertyRuleDto) GetQuery() string {
	if o == nil || IsNil(o.Query) {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyRuleDto) GetQueryOk() (*string, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *PropertyRuleDto) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *PropertyRuleDto) SetQuery(v string) {
	o.Query = &v
}

// GetLabelValues returns the LabelValues field value if set, zero value otherwise.
func (o *PropertyRuleDto) GetLabelValues() map[string]string {
	if o == nil || IsNil(o.LabelValues) {
		var ret map[string]string
		return ret
	}
	return o.LabelValues
}

// GetLabelValuesOk returns a tuple with the LabelValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyRuleDto) GetLabelValuesOk() (map[string]string, bool) {
	if o == nil || IsNil(o.LabelValues) {
		return map[string]string{}, false
	}
	return o.LabelValues, true
}

// HasLabelValues returns a boolean if a field has been set.
func (o *PropertyRuleDto) HasLabelValues() bool {
	if o != nil && !IsNil(o.LabelValues) {
		return true
	}

	return false
}

// SetLabelValues gets a reference to the given map[string]string and assigns it to the LabelValues field.
func (o *PropertyRuleDto) SetLabelValues(v map[string]string) {
	o.LabelValues = v
}

// GetLiterals returns the Literals field value if set, zero value otherwise.
func (o *PropertyRuleDto) GetLiterals() map[string]string {
	if o == nil || IsNil(o.Literals) {
		var ret map[string]string
		return ret
	}
	return o.Literals
}

// GetLiteralsOk returns a tuple with the Literals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyRuleDto) GetLiteralsOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Literals) {
		return map[string]string{}, false
	}
	return o.Literals, true
}

// HasLiterals returns a boolean if a field has been set.
func (o *PropertyRuleDto) HasLiterals() bool {
	if o != nil && !IsNil(o.Literals) {
		return true
	}

	return false
}

// SetLiterals gets a reference to the given map[string]string and assigns it to the Literals field.
func (o *PropertyRuleDto) SetLiterals(v map[string]string) {
	o.Literals = v
}

// GetMetricValue returns the MetricValue field value if set, zero value otherwise.
func (o *PropertyRuleDto) GetMetricValue() string {
	if o == nil || IsNil(o.MetricValue) {
		var ret string
		return ret
	}
	return *o.MetricValue
}

// GetMetricValueOk returns a tuple with the MetricValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyRuleDto) GetMetricValueOk() (*string, bool) {
	if o == nil || IsNil(o.MetricValue) {
		return nil, false
	}
	return o.MetricValue, true
}

// HasMetricValue returns a boolean if a field has been set.
func (o *PropertyRuleDto) HasMetricValue() bool {
	if o != nil && !IsNil(o.MetricValue) {
		return true
	}

	return false
}

// SetMetricValue gets a reference to the given string and assigns it to the MetricValue field.
func (o *PropertyRuleDto) SetMetricValue(v string) {
	o.MetricValue = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *PropertyRuleDto) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyRuleDto) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *PropertyRuleDto) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *PropertyRuleDto) SetDisabled(v bool) {
	o.Disabled = &v
}

func (o PropertyRuleDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PropertyRuleDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !IsNil(o.LabelValues) {
		toSerialize["labelValues"] = o.LabelValues
	}
	if !IsNil(o.Literals) {
		toSerialize["literals"] = o.Literals
	}
	if !IsNil(o.MetricValue) {
		toSerialize["metricValue"] = o.MetricValue
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PropertyRuleDto) UnmarshalJSON(data []byte) (err error) {
	varPropertyRuleDto := _PropertyRuleDto{}

	err = json.Unmarshal(data, &varPropertyRuleDto)

	if err != nil {
		return err
	}

	*o = PropertyRuleDto(varPropertyRuleDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "query")
		delete(additionalProperties, "labelValues")
		delete(additionalProperties, "literals")
		delete(additionalProperties, "metricValue")
		delete(additionalProperties, "disabled")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePropertyRuleDto struct {
	value *PropertyRuleDto
	isSet bool
}

func (v NullablePropertyRuleDto) Get() *PropertyRuleDto {
	return v.value
}

func (v *NullablePropertyRuleDto) Set(val *PropertyRuleDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyRuleDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyRuleDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyRuleDto(val *PropertyRuleDto) *NullablePropertyRuleDto {
	return &NullablePropertyRuleDto{value: val, isSet: true}
}

func (v NullablePropertyRuleDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyRuleDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
