/*
Asserts, Inc

Asserts Public API

API version: 1.0.1
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the KGScope type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KGScope{}

// KGScope struct for KGScope
type KGScope struct {
	PropertyMatcher      map[string]interface{} `json:"propertyMatcher,omitempty"`
	ScopeNames           map[string]interface{} `json:"scopeNames,omitempty"`
	Scope                *GraphEntityScope      `json:"scope,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _KGScope KGScope

// NewKGScope instantiates a new KGScope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKGScope() *KGScope {
	this := KGScope{}
	return &this
}

// NewKGScopeWithDefaults instantiates a new KGScope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKGScopeWithDefaults() *KGScope {
	this := KGScope{}
	return &this
}

// GetPropertyMatcher returns the PropertyMatcher field value if set, zero value otherwise.
func (o *KGScope) GetPropertyMatcher() map[string]interface{} {
	if o == nil || IsNil(o.PropertyMatcher) {
		var ret map[string]interface{}
		return ret
	}
	return o.PropertyMatcher
}

// GetPropertyMatcherOk returns a tuple with the PropertyMatcher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KGScope) GetPropertyMatcherOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.PropertyMatcher) {
		return map[string]interface{}{}, false
	}
	return o.PropertyMatcher, true
}

// HasPropertyMatcher returns a boolean if a field has been set.
func (o *KGScope) HasPropertyMatcher() bool {
	if o != nil && !IsNil(o.PropertyMatcher) {
		return true
	}

	return false
}

// SetPropertyMatcher gets a reference to the given map[string]interface{} and assigns it to the PropertyMatcher field.
func (o *KGScope) SetPropertyMatcher(v map[string]interface{}) {
	o.PropertyMatcher = v
}

// GetScopeNames returns the ScopeNames field value if set, zero value otherwise.
func (o *KGScope) GetScopeNames() map[string]interface{} {
	if o == nil || IsNil(o.ScopeNames) {
		var ret map[string]interface{}
		return ret
	}
	return o.ScopeNames
}

// GetScopeNamesOk returns a tuple with the ScopeNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KGScope) GetScopeNamesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ScopeNames) {
		return map[string]interface{}{}, false
	}
	return o.ScopeNames, true
}

// HasScopeNames returns a boolean if a field has been set.
func (o *KGScope) HasScopeNames() bool {
	if o != nil && !IsNil(o.ScopeNames) {
		return true
	}

	return false
}

// SetScopeNames gets a reference to the given map[string]interface{} and assigns it to the ScopeNames field.
func (o *KGScope) SetScopeNames(v map[string]interface{}) {
	o.ScopeNames = v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *KGScope) GetScope() GraphEntityScope {
	if o == nil || IsNil(o.Scope) {
		var ret GraphEntityScope
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KGScope) GetScopeOk() (*GraphEntityScope, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *KGScope) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given GraphEntityScope and assigns it to the Scope field.
func (o *KGScope) SetScope(v GraphEntityScope) {
	o.Scope = &v
}

func (o KGScope) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KGScope) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PropertyMatcher) {
		toSerialize["propertyMatcher"] = o.PropertyMatcher
	}
	if !IsNil(o.ScopeNames) {
		toSerialize["scopeNames"] = o.ScopeNames
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KGScope) UnmarshalJSON(data []byte) (err error) {
	varKGScope := _KGScope{}

	err = json.Unmarshal(data, &varKGScope)

	if err != nil {
		return err
	}

	*o = KGScope(varKGScope)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "propertyMatcher")
		delete(additionalProperties, "scopeNames")
		delete(additionalProperties, "scope")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKGScope struct {
	value *KGScope
	isSet bool
}

func (v NullableKGScope) Get() *KGScope {
	return v.value
}

func (v *NullableKGScope) Set(val *KGScope) {
	v.value = val
	v.isSet = true
}

func (v NullableKGScope) IsSet() bool {
	return v.isSet
}

func (v *NullableKGScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKGScope(val *KGScope) *NullableKGScope {
	return &NullableKGScope{value: val, isSet: true}
}

func (v NullableKGScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKGScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
