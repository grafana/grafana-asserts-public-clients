/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-161538
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the StackInfoDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StackInfoDto{}

// StackInfoDto struct for StackInfoDto
type StackInfoDto struct {
	StackId                 *int32  `json:"stackId,omitempty"`
	Slug                    *string `json:"slug,omitempty"`
	OrgId                   *int32  `json:"orgId,omitempty"`
	OrgSlug                 *string `json:"orgSlug,omitempty"`
	GcomToken               *string `json:"gcomToken,omitempty"`
	MimirToken              *string `json:"mimirToken,omitempty"`
	AssertionDetectorToken  *string `json:"assertionDetectorToken,omitempty"`
	Enabled                 *bool   `json:"enabled,omitempty"`
	Dormant                 *bool   `json:"dormant,omitempty"`
	AlertManagerConfigured  *bool   `json:"alertManagerConfigured,omitempty"`
	GraphInstanceCreated    *bool   `json:"graphInstanceCreated,omitempty"`
	UseGrafanaManagedAlerts *bool   `json:"useGrafanaManagedAlerts,omitempty"`
	AdditionalProperties    map[string]interface{}
}

type _StackInfoDto StackInfoDto

// NewStackInfoDto instantiates a new StackInfoDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStackInfoDto() *StackInfoDto {
	this := StackInfoDto{}
	return &this
}

// NewStackInfoDtoWithDefaults instantiates a new StackInfoDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStackInfoDtoWithDefaults() *StackInfoDto {
	this := StackInfoDto{}
	return &this
}

// GetStackId returns the StackId field value if set, zero value otherwise.
func (o *StackInfoDto) GetStackId() int32 {
	if o == nil || IsNil(o.StackId) {
		var ret int32
		return ret
	}
	return *o.StackId
}

// GetStackIdOk returns a tuple with the StackId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackInfoDto) GetStackIdOk() (*int32, bool) {
	if o == nil || IsNil(o.StackId) {
		return nil, false
	}
	return o.StackId, true
}

// HasStackId returns a boolean if a field has been set.
func (o *StackInfoDto) HasStackId() bool {
	if o != nil && !IsNil(o.StackId) {
		return true
	}

	return false
}

// SetStackId gets a reference to the given int32 and assigns it to the StackId field.
func (o *StackInfoDto) SetStackId(v int32) {
	o.StackId = &v
}

// GetSlug returns the Slug field value if set, zero value otherwise.
func (o *StackInfoDto) GetSlug() string {
	if o == nil || IsNil(o.Slug) {
		var ret string
		return ret
	}
	return *o.Slug
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackInfoDto) GetSlugOk() (*string, bool) {
	if o == nil || IsNil(o.Slug) {
		return nil, false
	}
	return o.Slug, true
}

// HasSlug returns a boolean if a field has been set.
func (o *StackInfoDto) HasSlug() bool {
	if o != nil && !IsNil(o.Slug) {
		return true
	}

	return false
}

// SetSlug gets a reference to the given string and assigns it to the Slug field.
func (o *StackInfoDto) SetSlug(v string) {
	o.Slug = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *StackInfoDto) GetOrgId() int32 {
	if o == nil || IsNil(o.OrgId) {
		var ret int32
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackInfoDto) GetOrgIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *StackInfoDto) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given int32 and assigns it to the OrgId field.
func (o *StackInfoDto) SetOrgId(v int32) {
	o.OrgId = &v
}

// GetOrgSlug returns the OrgSlug field value if set, zero value otherwise.
func (o *StackInfoDto) GetOrgSlug() string {
	if o == nil || IsNil(o.OrgSlug) {
		var ret string
		return ret
	}
	return *o.OrgSlug
}

// GetOrgSlugOk returns a tuple with the OrgSlug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackInfoDto) GetOrgSlugOk() (*string, bool) {
	if o == nil || IsNil(o.OrgSlug) {
		return nil, false
	}
	return o.OrgSlug, true
}

// HasOrgSlug returns a boolean if a field has been set.
func (o *StackInfoDto) HasOrgSlug() bool {
	if o != nil && !IsNil(o.OrgSlug) {
		return true
	}

	return false
}

// SetOrgSlug gets a reference to the given string and assigns it to the OrgSlug field.
func (o *StackInfoDto) SetOrgSlug(v string) {
	o.OrgSlug = &v
}

// GetGcomToken returns the GcomToken field value if set, zero value otherwise.
func (o *StackInfoDto) GetGcomToken() string {
	if o == nil || IsNil(o.GcomToken) {
		var ret string
		return ret
	}
	return *o.GcomToken
}

// GetGcomTokenOk returns a tuple with the GcomToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackInfoDto) GetGcomTokenOk() (*string, bool) {
	if o == nil || IsNil(o.GcomToken) {
		return nil, false
	}
	return o.GcomToken, true
}

// HasGcomToken returns a boolean if a field has been set.
func (o *StackInfoDto) HasGcomToken() bool {
	if o != nil && !IsNil(o.GcomToken) {
		return true
	}

	return false
}

// SetGcomToken gets a reference to the given string and assigns it to the GcomToken field.
func (o *StackInfoDto) SetGcomToken(v string) {
	o.GcomToken = &v
}

// GetMimirToken returns the MimirToken field value if set, zero value otherwise.
func (o *StackInfoDto) GetMimirToken() string {
	if o == nil || IsNil(o.MimirToken) {
		var ret string
		return ret
	}
	return *o.MimirToken
}

// GetMimirTokenOk returns a tuple with the MimirToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackInfoDto) GetMimirTokenOk() (*string, bool) {
	if o == nil || IsNil(o.MimirToken) {
		return nil, false
	}
	return o.MimirToken, true
}

// HasMimirToken returns a boolean if a field has been set.
func (o *StackInfoDto) HasMimirToken() bool {
	if o != nil && !IsNil(o.MimirToken) {
		return true
	}

	return false
}

// SetMimirToken gets a reference to the given string and assigns it to the MimirToken field.
func (o *StackInfoDto) SetMimirToken(v string) {
	o.MimirToken = &v
}

// GetAssertionDetectorToken returns the AssertionDetectorToken field value if set, zero value otherwise.
func (o *StackInfoDto) GetAssertionDetectorToken() string {
	if o == nil || IsNil(o.AssertionDetectorToken) {
		var ret string
		return ret
	}
	return *o.AssertionDetectorToken
}

// GetAssertionDetectorTokenOk returns a tuple with the AssertionDetectorToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackInfoDto) GetAssertionDetectorTokenOk() (*string, bool) {
	if o == nil || IsNil(o.AssertionDetectorToken) {
		return nil, false
	}
	return o.AssertionDetectorToken, true
}

// HasAssertionDetectorToken returns a boolean if a field has been set.
func (o *StackInfoDto) HasAssertionDetectorToken() bool {
	if o != nil && !IsNil(o.AssertionDetectorToken) {
		return true
	}

	return false
}

// SetAssertionDetectorToken gets a reference to the given string and assigns it to the AssertionDetectorToken field.
func (o *StackInfoDto) SetAssertionDetectorToken(v string) {
	o.AssertionDetectorToken = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *StackInfoDto) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackInfoDto) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *StackInfoDto) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *StackInfoDto) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetDormant returns the Dormant field value if set, zero value otherwise.
func (o *StackInfoDto) GetDormant() bool {
	if o == nil || IsNil(o.Dormant) {
		var ret bool
		return ret
	}
	return *o.Dormant
}

// GetDormantOk returns a tuple with the Dormant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackInfoDto) GetDormantOk() (*bool, bool) {
	if o == nil || IsNil(o.Dormant) {
		return nil, false
	}
	return o.Dormant, true
}

// HasDormant returns a boolean if a field has been set.
func (o *StackInfoDto) HasDormant() bool {
	if o != nil && !IsNil(o.Dormant) {
		return true
	}

	return false
}

// SetDormant gets a reference to the given bool and assigns it to the Dormant field.
func (o *StackInfoDto) SetDormant(v bool) {
	o.Dormant = &v
}

// GetAlertManagerConfigured returns the AlertManagerConfigured field value if set, zero value otherwise.
func (o *StackInfoDto) GetAlertManagerConfigured() bool {
	if o == nil || IsNil(o.AlertManagerConfigured) {
		var ret bool
		return ret
	}
	return *o.AlertManagerConfigured
}

// GetAlertManagerConfiguredOk returns a tuple with the AlertManagerConfigured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackInfoDto) GetAlertManagerConfiguredOk() (*bool, bool) {
	if o == nil || IsNil(o.AlertManagerConfigured) {
		return nil, false
	}
	return o.AlertManagerConfigured, true
}

// HasAlertManagerConfigured returns a boolean if a field has been set.
func (o *StackInfoDto) HasAlertManagerConfigured() bool {
	if o != nil && !IsNil(o.AlertManagerConfigured) {
		return true
	}

	return false
}

// SetAlertManagerConfigured gets a reference to the given bool and assigns it to the AlertManagerConfigured field.
func (o *StackInfoDto) SetAlertManagerConfigured(v bool) {
	o.AlertManagerConfigured = &v
}

// GetGraphInstanceCreated returns the GraphInstanceCreated field value if set, zero value otherwise.
func (o *StackInfoDto) GetGraphInstanceCreated() bool {
	if o == nil || IsNil(o.GraphInstanceCreated) {
		var ret bool
		return ret
	}
	return *o.GraphInstanceCreated
}

// GetGraphInstanceCreatedOk returns a tuple with the GraphInstanceCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackInfoDto) GetGraphInstanceCreatedOk() (*bool, bool) {
	if o == nil || IsNil(o.GraphInstanceCreated) {
		return nil, false
	}
	return o.GraphInstanceCreated, true
}

// HasGraphInstanceCreated returns a boolean if a field has been set.
func (o *StackInfoDto) HasGraphInstanceCreated() bool {
	if o != nil && !IsNil(o.GraphInstanceCreated) {
		return true
	}

	return false
}

// SetGraphInstanceCreated gets a reference to the given bool and assigns it to the GraphInstanceCreated field.
func (o *StackInfoDto) SetGraphInstanceCreated(v bool) {
	o.GraphInstanceCreated = &v
}

// GetUseGrafanaManagedAlerts returns the UseGrafanaManagedAlerts field value if set, zero value otherwise.
func (o *StackInfoDto) GetUseGrafanaManagedAlerts() bool {
	if o == nil || IsNil(o.UseGrafanaManagedAlerts) {
		var ret bool
		return ret
	}
	return *o.UseGrafanaManagedAlerts
}

// GetUseGrafanaManagedAlertsOk returns a tuple with the UseGrafanaManagedAlerts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackInfoDto) GetUseGrafanaManagedAlertsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseGrafanaManagedAlerts) {
		return nil, false
	}
	return o.UseGrafanaManagedAlerts, true
}

// HasUseGrafanaManagedAlerts returns a boolean if a field has been set.
func (o *StackInfoDto) HasUseGrafanaManagedAlerts() bool {
	if o != nil && !IsNil(o.UseGrafanaManagedAlerts) {
		return true
	}

	return false
}

// SetUseGrafanaManagedAlerts gets a reference to the given bool and assigns it to the UseGrafanaManagedAlerts field.
func (o *StackInfoDto) SetUseGrafanaManagedAlerts(v bool) {
	o.UseGrafanaManagedAlerts = &v
}

func (o StackInfoDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StackInfoDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StackId) {
		toSerialize["stackId"] = o.StackId
	}
	if !IsNil(o.Slug) {
		toSerialize["slug"] = o.Slug
	}
	if !IsNil(o.OrgId) {
		toSerialize["orgId"] = o.OrgId
	}
	if !IsNil(o.OrgSlug) {
		toSerialize["orgSlug"] = o.OrgSlug
	}
	if !IsNil(o.GcomToken) {
		toSerialize["gcomToken"] = o.GcomToken
	}
	if !IsNil(o.MimirToken) {
		toSerialize["mimirToken"] = o.MimirToken
	}
	if !IsNil(o.AssertionDetectorToken) {
		toSerialize["assertionDetectorToken"] = o.AssertionDetectorToken
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Dormant) {
		toSerialize["dormant"] = o.Dormant
	}
	if !IsNil(o.AlertManagerConfigured) {
		toSerialize["alertManagerConfigured"] = o.AlertManagerConfigured
	}
	if !IsNil(o.GraphInstanceCreated) {
		toSerialize["graphInstanceCreated"] = o.GraphInstanceCreated
	}
	if !IsNil(o.UseGrafanaManagedAlerts) {
		toSerialize["useGrafanaManagedAlerts"] = o.UseGrafanaManagedAlerts
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StackInfoDto) UnmarshalJSON(data []byte) (err error) {
	varStackInfoDto := _StackInfoDto{}

	err = json.Unmarshal(data, &varStackInfoDto)

	if err != nil {
		return err
	}

	*o = StackInfoDto(varStackInfoDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "stackId")
		delete(additionalProperties, "slug")
		delete(additionalProperties, "orgId")
		delete(additionalProperties, "orgSlug")
		delete(additionalProperties, "gcomToken")
		delete(additionalProperties, "mimirToken")
		delete(additionalProperties, "assertionDetectorToken")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "dormant")
		delete(additionalProperties, "alertManagerConfigured")
		delete(additionalProperties, "graphInstanceCreated")
		delete(additionalProperties, "useGrafanaManagedAlerts")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStackInfoDto struct {
	value *StackInfoDto
	isSet bool
}

func (v NullableStackInfoDto) Get() *StackInfoDto {
	return v.value
}

func (v *NullableStackInfoDto) Set(val *StackInfoDto) {
	v.value = val
	v.isSet = true
}

func (v NullableStackInfoDto) IsSet() bool {
	return v.isSet
}

func (v *NullableStackInfoDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStackInfoDto(val *StackInfoDto) *NullableStackInfoDto {
	return &NullableStackInfoDto{value: val, isSet: true}
}

func (v NullableStackInfoDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStackInfoDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
