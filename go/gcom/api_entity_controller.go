/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-110859
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// EntityControllerAPIService EntityControllerAPI service
type EntityControllerAPIService service

type ApiGetEntityRequest struct {
	ctx         context.Context
	ApiService  *EntityControllerAPIService
	entityType  *string
	entityName  *string
	env         *string
	site        *string
	namespace   *string
	start       *int64
	end         *int64
	xScopeOrgID *string
}

func (r ApiGetEntityRequest) EntityType(entityType string) ApiGetEntityRequest {
	r.entityType = &entityType
	return r
}

func (r ApiGetEntityRequest) EntityName(entityName string) ApiGetEntityRequest {
	r.entityName = &entityName
	return r
}

func (r ApiGetEntityRequest) Env(env string) ApiGetEntityRequest {
	r.env = &env
	return r
}

func (r ApiGetEntityRequest) Site(site string) ApiGetEntityRequest {
	r.site = &site
	return r
}

func (r ApiGetEntityRequest) Namespace(namespace string) ApiGetEntityRequest {
	r.namespace = &namespace
	return r
}

func (r ApiGetEntityRequest) Start(start int64) ApiGetEntityRequest {
	r.start = &start
	return r
}

func (r ApiGetEntityRequest) End(end int64) ApiGetEntityRequest {
	r.end = &end
	return r
}

// Grafana Tenant/Stack ID
func (r ApiGetEntityRequest) XScopeOrgID(xScopeOrgID string) ApiGetEntityRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiGetEntityRequest) Execute() (*GraphEntity, *http.Response, error) {
	return r.ApiService.GetEntityExecute(r)
}

/*
GetEntity Method for GetEntity

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetEntityRequest
*/
func (a *EntityControllerAPIService) GetEntity(ctx context.Context) ApiGetEntityRequest {
	return ApiGetEntityRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return GraphEntity
func (a *EntityControllerAPIService) GetEntityExecute(r ApiGetEntityRequest) (*GraphEntity, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GraphEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntityControllerAPIService.GetEntity")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/entity/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.entityType == nil {
		return localVarReturnValue, nil, reportError("entityType is required and must be specified")
	}
	if r.entityName == nil {
		return localVarReturnValue, nil, reportError("entityName is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "entity_type", r.entityType, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "entity_name", r.entityName, "")
	if r.env != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "env", r.env, "")
	}
	if r.site != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "site", r.site, "")
	}
	if r.namespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "namespace", r.namespace, "")
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLookupEntityFromAlertLabelsRequest struct {
	ctx           context.Context
	ApiService    *EntityControllerAPIService
	requestParams *map[string]string
	env           *string
	site          *string
	namespace     *string
	start         *int64
	end           *int64
	xScopeOrgID   *string
}

func (r ApiLookupEntityFromAlertLabelsRequest) RequestParams(requestParams map[string]string) ApiLookupEntityFromAlertLabelsRequest {
	r.requestParams = &requestParams
	return r
}

func (r ApiLookupEntityFromAlertLabelsRequest) Env(env string) ApiLookupEntityFromAlertLabelsRequest {
	r.env = &env
	return r
}

func (r ApiLookupEntityFromAlertLabelsRequest) Site(site string) ApiLookupEntityFromAlertLabelsRequest {
	r.site = &site
	return r
}

func (r ApiLookupEntityFromAlertLabelsRequest) Namespace(namespace string) ApiLookupEntityFromAlertLabelsRequest {
	r.namespace = &namespace
	return r
}

func (r ApiLookupEntityFromAlertLabelsRequest) Start(start int64) ApiLookupEntityFromAlertLabelsRequest {
	r.start = &start
	return r
}

func (r ApiLookupEntityFromAlertLabelsRequest) End(end int64) ApiLookupEntityFromAlertLabelsRequest {
	r.end = &end
	return r
}

// Grafana Tenant/Stack ID
func (r ApiLookupEntityFromAlertLabelsRequest) XScopeOrgID(xScopeOrgID string) ApiLookupEntityFromAlertLabelsRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiLookupEntityFromAlertLabelsRequest) Execute() (*GraphEntity, *http.Response, error) {
	return r.ApiService.LookupEntityFromAlertLabelsExecute(r)
}

/*
LookupEntityFromAlertLabels Method for LookupEntityFromAlertLabels

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiLookupEntityFromAlertLabelsRequest
*/
func (a *EntityControllerAPIService) LookupEntityFromAlertLabels(ctx context.Context) ApiLookupEntityFromAlertLabelsRequest {
	return ApiLookupEntityFromAlertLabelsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return GraphEntity
func (a *EntityControllerAPIService) LookupEntityFromAlertLabelsExecute(r ApiLookupEntityFromAlertLabelsRequest) (*GraphEntity, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GraphEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntityControllerAPIService.LookupEntityFromAlertLabels")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/entity"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestParams == nil {
		return localVarReturnValue, nil, reportError("requestParams is required and must be specified")
	}

	if r.env != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "env", r.env, "")
	}
	if r.site != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "site", r.site, "")
	}
	if r.namespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "namespace", r.namespace, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "requestParams", r.requestParams, "")
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
