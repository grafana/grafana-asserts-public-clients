/*
Asserts, Inc

Asserts Public API

API version: 2025.09.11-132913
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the DataSourcePromDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataSourcePromDto{}

// DataSourcePromDto struct for DataSourcePromDto
type DataSourcePromDto struct {
	PromDatasourceName   *string `json:"promDatasourceName,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DataSourcePromDto DataSourcePromDto

// NewDataSourcePromDto instantiates a new DataSourcePromDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataSourcePromDto() *DataSourcePromDto {
	this := DataSourcePromDto{}
	return &this
}

// NewDataSourcePromDtoWithDefaults instantiates a new DataSourcePromDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataSourcePromDtoWithDefaults() *DataSourcePromDto {
	this := DataSourcePromDto{}
	return &this
}

// GetPromDatasourceName returns the PromDatasourceName field value if set, zero value otherwise.
func (o *DataSourcePromDto) GetPromDatasourceName() string {
	if o == nil || IsNil(o.PromDatasourceName) {
		var ret string
		return ret
	}
	return *o.PromDatasourceName
}

// GetPromDatasourceNameOk returns a tuple with the PromDatasourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourcePromDto) GetPromDatasourceNameOk() (*string, bool) {
	if o == nil || IsNil(o.PromDatasourceName) {
		return nil, false
	}
	return o.PromDatasourceName, true
}

// HasPromDatasourceName returns a boolean if a field has been set.
func (o *DataSourcePromDto) HasPromDatasourceName() bool {
	if o != nil && !IsNil(o.PromDatasourceName) {
		return true
	}

	return false
}

// SetPromDatasourceName gets a reference to the given string and assigns it to the PromDatasourceName field.
func (o *DataSourcePromDto) SetPromDatasourceName(v string) {
	o.PromDatasourceName = &v
}

func (o DataSourcePromDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataSourcePromDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PromDatasourceName) {
		toSerialize["promDatasourceName"] = o.PromDatasourceName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DataSourcePromDto) UnmarshalJSON(data []byte) (err error) {
	varDataSourcePromDto := _DataSourcePromDto{}

	err = json.Unmarshal(data, &varDataSourcePromDto)

	if err != nil {
		return err
	}

	*o = DataSourcePromDto(varDataSourcePromDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "promDatasourceName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDataSourcePromDto struct {
	value *DataSourcePromDto
	isSet bool
}

func (v NullableDataSourcePromDto) Get() *DataSourcePromDto {
	return v.value
}

func (v *NullableDataSourcePromDto) Set(val *DataSourcePromDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSourcePromDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSourcePromDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSourcePromDto(val *DataSourcePromDto) *NullableDataSourcePromDto {
	return &NullableDataSourcePromDto{value: val, isSet: true}
}

func (v NullableDataSourcePromDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSourcePromDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
