/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-110859
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the RcaPatternListRequestDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RcaPatternListRequestDto{}

// RcaPatternListRequestDto struct for RcaPatternListRequestDto
type RcaPatternListRequestDto struct {
	EntityType           *string `json:"entityType,omitempty"`
	EntityName           *string `json:"entityName,omitempty"`
	Env                  *string `json:"env,omitempty"`
	Site                 *string `json:"site,omitempty"`
	Namespace            *string `json:"namespace,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RcaPatternListRequestDto RcaPatternListRequestDto

// NewRcaPatternListRequestDto instantiates a new RcaPatternListRequestDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRcaPatternListRequestDto() *RcaPatternListRequestDto {
	this := RcaPatternListRequestDto{}
	return &this
}

// NewRcaPatternListRequestDtoWithDefaults instantiates a new RcaPatternListRequestDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRcaPatternListRequestDtoWithDefaults() *RcaPatternListRequestDto {
	this := RcaPatternListRequestDto{}
	return &this
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *RcaPatternListRequestDto) GetEntityType() string {
	if o == nil || IsNil(o.EntityType) {
		var ret string
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcaPatternListRequestDto) GetEntityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EntityType) {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *RcaPatternListRequestDto) HasEntityType() bool {
	if o != nil && !IsNil(o.EntityType) {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given string and assigns it to the EntityType field.
func (o *RcaPatternListRequestDto) SetEntityType(v string) {
	o.EntityType = &v
}

// GetEntityName returns the EntityName field value if set, zero value otherwise.
func (o *RcaPatternListRequestDto) GetEntityName() string {
	if o == nil || IsNil(o.EntityName) {
		var ret string
		return ret
	}
	return *o.EntityName
}

// GetEntityNameOk returns a tuple with the EntityName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcaPatternListRequestDto) GetEntityNameOk() (*string, bool) {
	if o == nil || IsNil(o.EntityName) {
		return nil, false
	}
	return o.EntityName, true
}

// HasEntityName returns a boolean if a field has been set.
func (o *RcaPatternListRequestDto) HasEntityName() bool {
	if o != nil && !IsNil(o.EntityName) {
		return true
	}

	return false
}

// SetEntityName gets a reference to the given string and assigns it to the EntityName field.
func (o *RcaPatternListRequestDto) SetEntityName(v string) {
	o.EntityName = &v
}

// GetEnv returns the Env field value if set, zero value otherwise.
func (o *RcaPatternListRequestDto) GetEnv() string {
	if o == nil || IsNil(o.Env) {
		var ret string
		return ret
	}
	return *o.Env
}

// GetEnvOk returns a tuple with the Env field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcaPatternListRequestDto) GetEnvOk() (*string, bool) {
	if o == nil || IsNil(o.Env) {
		return nil, false
	}
	return o.Env, true
}

// HasEnv returns a boolean if a field has been set.
func (o *RcaPatternListRequestDto) HasEnv() bool {
	if o != nil && !IsNil(o.Env) {
		return true
	}

	return false
}

// SetEnv gets a reference to the given string and assigns it to the Env field.
func (o *RcaPatternListRequestDto) SetEnv(v string) {
	o.Env = &v
}

// GetSite returns the Site field value if set, zero value otherwise.
func (o *RcaPatternListRequestDto) GetSite() string {
	if o == nil || IsNil(o.Site) {
		var ret string
		return ret
	}
	return *o.Site
}

// GetSiteOk returns a tuple with the Site field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcaPatternListRequestDto) GetSiteOk() (*string, bool) {
	if o == nil || IsNil(o.Site) {
		return nil, false
	}
	return o.Site, true
}

// HasSite returns a boolean if a field has been set.
func (o *RcaPatternListRequestDto) HasSite() bool {
	if o != nil && !IsNil(o.Site) {
		return true
	}

	return false
}

// SetSite gets a reference to the given string and assigns it to the Site field.
func (o *RcaPatternListRequestDto) SetSite(v string) {
	o.Site = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *RcaPatternListRequestDto) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcaPatternListRequestDto) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *RcaPatternListRequestDto) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *RcaPatternListRequestDto) SetNamespace(v string) {
	o.Namespace = &v
}

func (o RcaPatternListRequestDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RcaPatternListRequestDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntityType) {
		toSerialize["entityType"] = o.EntityType
	}
	if !IsNil(o.EntityName) {
		toSerialize["entityName"] = o.EntityName
	}
	if !IsNil(o.Env) {
		toSerialize["env"] = o.Env
	}
	if !IsNil(o.Site) {
		toSerialize["site"] = o.Site
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RcaPatternListRequestDto) UnmarshalJSON(data []byte) (err error) {
	varRcaPatternListRequestDto := _RcaPatternListRequestDto{}

	err = json.Unmarshal(data, &varRcaPatternListRequestDto)

	if err != nil {
		return err
	}

	*o = RcaPatternListRequestDto(varRcaPatternListRequestDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "entityType")
		delete(additionalProperties, "entityName")
		delete(additionalProperties, "env")
		delete(additionalProperties, "site")
		delete(additionalProperties, "namespace")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRcaPatternListRequestDto struct {
	value *RcaPatternListRequestDto
	isSet bool
}

func (v NullableRcaPatternListRequestDto) Get() *RcaPatternListRequestDto {
	return v.value
}

func (v *NullableRcaPatternListRequestDto) Set(val *RcaPatternListRequestDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRcaPatternListRequestDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRcaPatternListRequestDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRcaPatternListRequestDto(val *RcaPatternListRequestDto) *NullableRcaPatternListRequestDto {
	return &NullableRcaPatternListRequestDto{value: val, isSet: true}
}

func (v NullableRcaPatternListRequestDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRcaPatternListRequestDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
