/*
Asserts, Inc

Asserts Public API

API version: 1.0.1
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// ThresholdRulesConfigControllerAPIService ThresholdRulesConfigControllerAPI service
type ThresholdRulesConfigControllerAPIService service

type ApiDeleteCustomThresholdRuleRequest struct {
	ctx               context.Context
	ApiService        *ThresholdRulesConfigControllerAPIService
	prometheusRuleDto *PrometheusRuleDto
	xScopeOrgID       *string
}

func (r ApiDeleteCustomThresholdRuleRequest) PrometheusRuleDto(prometheusRuleDto PrometheusRuleDto) ApiDeleteCustomThresholdRuleRequest {
	r.prometheusRuleDto = &prometheusRuleDto
	return r
}

// Grafana Tenant/Stack ID
func (r ApiDeleteCustomThresholdRuleRequest) XScopeOrgID(xScopeOrgID string) ApiDeleteCustomThresholdRuleRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiDeleteCustomThresholdRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCustomThresholdRuleExecute(r)
}

/*
DeleteCustomThresholdRule Method for DeleteCustomThresholdRule

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteCustomThresholdRuleRequest
*/
func (a *ThresholdRulesConfigControllerAPIService) DeleteCustomThresholdRule(ctx context.Context) ApiDeleteCustomThresholdRuleRequest {
	return ApiDeleteCustomThresholdRuleRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *ThresholdRulesConfigControllerAPIService) DeleteCustomThresholdRuleExecute(r ApiDeleteCustomThresholdRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThresholdRulesConfigControllerAPIService.DeleteCustomThresholdRule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config/threshold-rule/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.prometheusRuleDto == nil {
		return nil, reportError("prometheusRuleDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	// body params
	localVarPostBody = r.prometheusRuleDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCustomThresholdRulesRequest struct {
	ctx         context.Context
	ApiService  *ThresholdRulesConfigControllerAPIService
	xScopeOrgID *string
}

// Grafana Tenant/Stack ID
func (r ApiGetCustomThresholdRulesRequest) XScopeOrgID(xScopeOrgID string) ApiGetCustomThresholdRulesRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiGetCustomThresholdRulesRequest) Execute() (*PrometheusRulesDto, *http.Response, error) {
	return r.ApiService.GetCustomThresholdRulesExecute(r)
}

/*
GetCustomThresholdRules Method for GetCustomThresholdRules

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCustomThresholdRulesRequest
*/
func (a *ThresholdRulesConfigControllerAPIService) GetCustomThresholdRules(ctx context.Context) ApiGetCustomThresholdRulesRequest {
	return ApiGetCustomThresholdRulesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PrometheusRulesDto
func (a *ThresholdRulesConfigControllerAPIService) GetCustomThresholdRulesExecute(r ApiGetCustomThresholdRulesRequest) (*PrometheusRulesDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PrometheusRulesDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThresholdRulesConfigControllerAPIService.GetCustomThresholdRules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config/threshold-rules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/x-yml", "application/x-yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRequestThresholdRulesRequest struct {
	ctx         context.Context
	ApiService  *ThresholdRulesConfigControllerAPIService
	xScopeOrgID *string
}

// Grafana Tenant/Stack ID
func (r ApiGetRequestThresholdRulesRequest) XScopeOrgID(xScopeOrgID string) ApiGetRequestThresholdRulesRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiGetRequestThresholdRulesRequest) Execute() (*ThresholdRulesDto, *http.Response, error) {
	return r.ApiService.GetRequestThresholdRulesExecute(r)
}

/*
GetRequestThresholdRules Method for GetRequestThresholdRules

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetRequestThresholdRulesRequest
*/
func (a *ThresholdRulesConfigControllerAPIService) GetRequestThresholdRules(ctx context.Context) ApiGetRequestThresholdRulesRequest {
	return ApiGetRequestThresholdRulesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ThresholdRulesDto
func (a *ThresholdRulesConfigControllerAPIService) GetRequestThresholdRulesExecute(r ApiGetRequestThresholdRulesRequest) (*ThresholdRulesDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ThresholdRulesDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThresholdRulesConfigControllerAPIService.GetRequestThresholdRules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config/threshold-rules/request"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetResourceThresholdRulesRequest struct {
	ctx         context.Context
	ApiService  *ThresholdRulesConfigControllerAPIService
	xScopeOrgID *string
}

// Grafana Tenant/Stack ID
func (r ApiGetResourceThresholdRulesRequest) XScopeOrgID(xScopeOrgID string) ApiGetResourceThresholdRulesRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiGetResourceThresholdRulesRequest) Execute() (*ThresholdRulesDto, *http.Response, error) {
	return r.ApiService.GetResourceThresholdRulesExecute(r)
}

/*
GetResourceThresholdRules Method for GetResourceThresholdRules

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetResourceThresholdRulesRequest
*/
func (a *ThresholdRulesConfigControllerAPIService) GetResourceThresholdRules(ctx context.Context) ApiGetResourceThresholdRulesRequest {
	return ApiGetResourceThresholdRulesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ThresholdRulesDto
func (a *ThresholdRulesConfigControllerAPIService) GetResourceThresholdRulesExecute(r ApiGetResourceThresholdRulesRequest) (*ThresholdRulesDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ThresholdRulesDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThresholdRulesConfigControllerAPIService.GetResourceThresholdRules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config/threshold-rules/resource"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateCustomThresholdRuleRequest struct {
	ctx               context.Context
	ApiService        *ThresholdRulesConfigControllerAPIService
	prometheusRuleDto *PrometheusRuleDto
	xScopeOrgID       *string
}

func (r ApiUpdateCustomThresholdRuleRequest) PrometheusRuleDto(prometheusRuleDto PrometheusRuleDto) ApiUpdateCustomThresholdRuleRequest {
	r.prometheusRuleDto = &prometheusRuleDto
	return r
}

// Grafana Tenant/Stack ID
func (r ApiUpdateCustomThresholdRuleRequest) XScopeOrgID(xScopeOrgID string) ApiUpdateCustomThresholdRuleRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiUpdateCustomThresholdRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateCustomThresholdRuleExecute(r)
}

/*
UpdateCustomThresholdRule Method for UpdateCustomThresholdRule

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiUpdateCustomThresholdRuleRequest
*/
func (a *ThresholdRulesConfigControllerAPIService) UpdateCustomThresholdRule(ctx context.Context) ApiUpdateCustomThresholdRuleRequest {
	return ApiUpdateCustomThresholdRuleRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *ThresholdRulesConfigControllerAPIService) UpdateCustomThresholdRuleExecute(r ApiUpdateCustomThresholdRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThresholdRulesConfigControllerAPIService.UpdateCustomThresholdRule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config/threshold-rule"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.prometheusRuleDto == nil {
		return nil, reportError("prometheusRuleDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	// body params
	localVarPostBody = r.prometheusRuleDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateCustomThresholdRulesRequest struct {
	ctx                context.Context
	ApiService         *ThresholdRulesConfigControllerAPIService
	prometheusRulesDto *PrometheusRulesDto
	xScopeOrgID        *string
}

func (r ApiUpdateCustomThresholdRulesRequest) PrometheusRulesDto(prometheusRulesDto PrometheusRulesDto) ApiUpdateCustomThresholdRulesRequest {
	r.prometheusRulesDto = &prometheusRulesDto
	return r
}

// Grafana Tenant/Stack ID
func (r ApiUpdateCustomThresholdRulesRequest) XScopeOrgID(xScopeOrgID string) ApiUpdateCustomThresholdRulesRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiUpdateCustomThresholdRulesRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateCustomThresholdRulesExecute(r)
}

/*
UpdateCustomThresholdRules Method for UpdateCustomThresholdRules

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiUpdateCustomThresholdRulesRequest
*/
func (a *ThresholdRulesConfigControllerAPIService) UpdateCustomThresholdRules(ctx context.Context) ApiUpdateCustomThresholdRulesRequest {
	return ApiUpdateCustomThresholdRulesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *ThresholdRulesConfigControllerAPIService) UpdateCustomThresholdRulesExecute(r ApiUpdateCustomThresholdRulesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThresholdRulesConfigControllerAPIService.UpdateCustomThresholdRules")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config/threshold-rules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.prometheusRulesDto == nil {
		return nil, reportError("prometheusRulesDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-yml", "application/x-yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	// body params
	localVarPostBody = r.prometheusRulesDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
