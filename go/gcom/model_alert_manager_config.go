/*
Asserts, Inc

Asserts Public API

API version: 1.0.1
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the AlertManagerConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertManagerConfig{}

// AlertManagerConfig struct for AlertManagerConfig
type AlertManagerConfig struct {
	Global               *AlertManagerGlobal             `json:"global,omitempty"`
	Templates            []string                        `json:"templates,omitempty"`
	Route                *AlertManagerRoute              `json:"route,omitempty"`
	Receivers            []AlertManagerReceiver          `json:"receivers,omitempty"`
	InhibitRules         []AlertManagerInhibitRule       `json:"inhibit_rules,omitempty"`
	MuteTimeIntervals    []AlertManagerNamedTimeInterval `json:"mute_time_intervals,omitempty"`
	TimeIntervals        []AlertManagerNamedTimeInterval `json:"time_intervals,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AlertManagerConfig AlertManagerConfig

// NewAlertManagerConfig instantiates a new AlertManagerConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertManagerConfig() *AlertManagerConfig {
	this := AlertManagerConfig{}
	return &this
}

// NewAlertManagerConfigWithDefaults instantiates a new AlertManagerConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertManagerConfigWithDefaults() *AlertManagerConfig {
	this := AlertManagerConfig{}
	return &this
}

// GetGlobal returns the Global field value if set, zero value otherwise.
func (o *AlertManagerConfig) GetGlobal() AlertManagerGlobal {
	if o == nil || IsNil(o.Global) {
		var ret AlertManagerGlobal
		return ret
	}
	return *o.Global
}

// GetGlobalOk returns a tuple with the Global field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerConfig) GetGlobalOk() (*AlertManagerGlobal, bool) {
	if o == nil || IsNil(o.Global) {
		return nil, false
	}
	return o.Global, true
}

// HasGlobal returns a boolean if a field has been set.
func (o *AlertManagerConfig) HasGlobal() bool {
	if o != nil && !IsNil(o.Global) {
		return true
	}

	return false
}

// SetGlobal gets a reference to the given AlertManagerGlobal and assigns it to the Global field.
func (o *AlertManagerConfig) SetGlobal(v AlertManagerGlobal) {
	o.Global = &v
}

// GetTemplates returns the Templates field value if set, zero value otherwise.
func (o *AlertManagerConfig) GetTemplates() []string {
	if o == nil || IsNil(o.Templates) {
		var ret []string
		return ret
	}
	return o.Templates
}

// GetTemplatesOk returns a tuple with the Templates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerConfig) GetTemplatesOk() ([]string, bool) {
	if o == nil || IsNil(o.Templates) {
		return nil, false
	}
	return o.Templates, true
}

// HasTemplates returns a boolean if a field has been set.
func (o *AlertManagerConfig) HasTemplates() bool {
	if o != nil && !IsNil(o.Templates) {
		return true
	}

	return false
}

// SetTemplates gets a reference to the given []string and assigns it to the Templates field.
func (o *AlertManagerConfig) SetTemplates(v []string) {
	o.Templates = v
}

// GetRoute returns the Route field value if set, zero value otherwise.
func (o *AlertManagerConfig) GetRoute() AlertManagerRoute {
	if o == nil || IsNil(o.Route) {
		var ret AlertManagerRoute
		return ret
	}
	return *o.Route
}

// GetRouteOk returns a tuple with the Route field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerConfig) GetRouteOk() (*AlertManagerRoute, bool) {
	if o == nil || IsNil(o.Route) {
		return nil, false
	}
	return o.Route, true
}

// HasRoute returns a boolean if a field has been set.
func (o *AlertManagerConfig) HasRoute() bool {
	if o != nil && !IsNil(o.Route) {
		return true
	}

	return false
}

// SetRoute gets a reference to the given AlertManagerRoute and assigns it to the Route field.
func (o *AlertManagerConfig) SetRoute(v AlertManagerRoute) {
	o.Route = &v
}

// GetReceivers returns the Receivers field value if set, zero value otherwise.
func (o *AlertManagerConfig) GetReceivers() []AlertManagerReceiver {
	if o == nil || IsNil(o.Receivers) {
		var ret []AlertManagerReceiver
		return ret
	}
	return o.Receivers
}

// GetReceiversOk returns a tuple with the Receivers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerConfig) GetReceiversOk() ([]AlertManagerReceiver, bool) {
	if o == nil || IsNil(o.Receivers) {
		return nil, false
	}
	return o.Receivers, true
}

// HasReceivers returns a boolean if a field has been set.
func (o *AlertManagerConfig) HasReceivers() bool {
	if o != nil && !IsNil(o.Receivers) {
		return true
	}

	return false
}

// SetReceivers gets a reference to the given []AlertManagerReceiver and assigns it to the Receivers field.
func (o *AlertManagerConfig) SetReceivers(v []AlertManagerReceiver) {
	o.Receivers = v
}

// GetInhibitRules returns the InhibitRules field value if set, zero value otherwise.
func (o *AlertManagerConfig) GetInhibitRules() []AlertManagerInhibitRule {
	if o == nil || IsNil(o.InhibitRules) {
		var ret []AlertManagerInhibitRule
		return ret
	}
	return o.InhibitRules
}

// GetInhibitRulesOk returns a tuple with the InhibitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerConfig) GetInhibitRulesOk() ([]AlertManagerInhibitRule, bool) {
	if o == nil || IsNil(o.InhibitRules) {
		return nil, false
	}
	return o.InhibitRules, true
}

// HasInhibitRules returns a boolean if a field has been set.
func (o *AlertManagerConfig) HasInhibitRules() bool {
	if o != nil && !IsNil(o.InhibitRules) {
		return true
	}

	return false
}

// SetInhibitRules gets a reference to the given []AlertManagerInhibitRule and assigns it to the InhibitRules field.
func (o *AlertManagerConfig) SetInhibitRules(v []AlertManagerInhibitRule) {
	o.InhibitRules = v
}

// GetMuteTimeIntervals returns the MuteTimeIntervals field value if set, zero value otherwise.
func (o *AlertManagerConfig) GetMuteTimeIntervals() []AlertManagerNamedTimeInterval {
	if o == nil || IsNil(o.MuteTimeIntervals) {
		var ret []AlertManagerNamedTimeInterval
		return ret
	}
	return o.MuteTimeIntervals
}

// GetMuteTimeIntervalsOk returns a tuple with the MuteTimeIntervals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerConfig) GetMuteTimeIntervalsOk() ([]AlertManagerNamedTimeInterval, bool) {
	if o == nil || IsNil(o.MuteTimeIntervals) {
		return nil, false
	}
	return o.MuteTimeIntervals, true
}

// HasMuteTimeIntervals returns a boolean if a field has been set.
func (o *AlertManagerConfig) HasMuteTimeIntervals() bool {
	if o != nil && !IsNil(o.MuteTimeIntervals) {
		return true
	}

	return false
}

// SetMuteTimeIntervals gets a reference to the given []AlertManagerNamedTimeInterval and assigns it to the MuteTimeIntervals field.
func (o *AlertManagerConfig) SetMuteTimeIntervals(v []AlertManagerNamedTimeInterval) {
	o.MuteTimeIntervals = v
}

// GetTimeIntervals returns the TimeIntervals field value if set, zero value otherwise.
func (o *AlertManagerConfig) GetTimeIntervals() []AlertManagerNamedTimeInterval {
	if o == nil || IsNil(o.TimeIntervals) {
		var ret []AlertManagerNamedTimeInterval
		return ret
	}
	return o.TimeIntervals
}

// GetTimeIntervalsOk returns a tuple with the TimeIntervals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerConfig) GetTimeIntervalsOk() ([]AlertManagerNamedTimeInterval, bool) {
	if o == nil || IsNil(o.TimeIntervals) {
		return nil, false
	}
	return o.TimeIntervals, true
}

// HasTimeIntervals returns a boolean if a field has been set.
func (o *AlertManagerConfig) HasTimeIntervals() bool {
	if o != nil && !IsNil(o.TimeIntervals) {
		return true
	}

	return false
}

// SetTimeIntervals gets a reference to the given []AlertManagerNamedTimeInterval and assigns it to the TimeIntervals field.
func (o *AlertManagerConfig) SetTimeIntervals(v []AlertManagerNamedTimeInterval) {
	o.TimeIntervals = v
}

func (o AlertManagerConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertManagerConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Global) {
		toSerialize["global"] = o.Global
	}
	if !IsNil(o.Templates) {
		toSerialize["templates"] = o.Templates
	}
	if !IsNil(o.Route) {
		toSerialize["route"] = o.Route
	}
	if !IsNil(o.Receivers) {
		toSerialize["receivers"] = o.Receivers
	}
	if !IsNil(o.InhibitRules) {
		toSerialize["inhibit_rules"] = o.InhibitRules
	}
	if !IsNil(o.MuteTimeIntervals) {
		toSerialize["mute_time_intervals"] = o.MuteTimeIntervals
	}
	if !IsNil(o.TimeIntervals) {
		toSerialize["time_intervals"] = o.TimeIntervals
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AlertManagerConfig) UnmarshalJSON(data []byte) (err error) {
	varAlertManagerConfig := _AlertManagerConfig{}

	err = json.Unmarshal(data, &varAlertManagerConfig)

	if err != nil {
		return err
	}

	*o = AlertManagerConfig(varAlertManagerConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "global")
		delete(additionalProperties, "templates")
		delete(additionalProperties, "route")
		delete(additionalProperties, "receivers")
		delete(additionalProperties, "inhibit_rules")
		delete(additionalProperties, "mute_time_intervals")
		delete(additionalProperties, "time_intervals")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAlertManagerConfig struct {
	value *AlertManagerConfig
	isSet bool
}

func (v NullableAlertManagerConfig) Get() *AlertManagerConfig {
	return v.value
}

func (v *NullableAlertManagerConfig) Set(val *AlertManagerConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertManagerConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertManagerConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertManagerConfig(val *AlertManagerConfig) *NullableAlertManagerConfig {
	return &NullableAlertManagerConfig{value: val, isSet: true}
}

func (v NullableAlertManagerConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertManagerConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
