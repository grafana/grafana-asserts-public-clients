/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-110859
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the MimirRelabelRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MimirRelabelRule{}

// MimirRelabelRule struct for MimirRelabelRule
type MimirRelabelRule struct {
	Selector             *string  `json:"selector,omitempty"`
	Replacement          *string  `json:"replacement,omitempty"`
	Drop                 *bool    `json:"drop,omitempty"`
	JoinLabels           []string `json:"join_labels,omitempty"`
	JoinSeparator        *string  `json:"join_separator,omitempty"`
	RankedChoice         []string `json:"ranked_choice,omitempty"`
	TransformLabel       *string  `json:"transform_label,omitempty"`
	TransformOperation   *string  `json:"transform_operation,omitempty"`
	TransformArg         *string  `json:"transform_arg,omitempty"`
	TargetLabel          *string  `json:"target_label,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MimirRelabelRule MimirRelabelRule

// NewMimirRelabelRule instantiates a new MimirRelabelRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMimirRelabelRule() *MimirRelabelRule {
	this := MimirRelabelRule{}
	return &this
}

// NewMimirRelabelRuleWithDefaults instantiates a new MimirRelabelRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMimirRelabelRuleWithDefaults() *MimirRelabelRule {
	this := MimirRelabelRule{}
	return &this
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *MimirRelabelRule) GetSelector() string {
	if o == nil || IsNil(o.Selector) {
		var ret string
		return ret
	}
	return *o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MimirRelabelRule) GetSelectorOk() (*string, bool) {
	if o == nil || IsNil(o.Selector) {
		return nil, false
	}
	return o.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *MimirRelabelRule) HasSelector() bool {
	if o != nil && !IsNil(o.Selector) {
		return true
	}

	return false
}

// SetSelector gets a reference to the given string and assigns it to the Selector field.
func (o *MimirRelabelRule) SetSelector(v string) {
	o.Selector = &v
}

// GetReplacement returns the Replacement field value if set, zero value otherwise.
func (o *MimirRelabelRule) GetReplacement() string {
	if o == nil || IsNil(o.Replacement) {
		var ret string
		return ret
	}
	return *o.Replacement
}

// GetReplacementOk returns a tuple with the Replacement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MimirRelabelRule) GetReplacementOk() (*string, bool) {
	if o == nil || IsNil(o.Replacement) {
		return nil, false
	}
	return o.Replacement, true
}

// HasReplacement returns a boolean if a field has been set.
func (o *MimirRelabelRule) HasReplacement() bool {
	if o != nil && !IsNil(o.Replacement) {
		return true
	}

	return false
}

// SetReplacement gets a reference to the given string and assigns it to the Replacement field.
func (o *MimirRelabelRule) SetReplacement(v string) {
	o.Replacement = &v
}

// GetDrop returns the Drop field value if set, zero value otherwise.
func (o *MimirRelabelRule) GetDrop() bool {
	if o == nil || IsNil(o.Drop) {
		var ret bool
		return ret
	}
	return *o.Drop
}

// GetDropOk returns a tuple with the Drop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MimirRelabelRule) GetDropOk() (*bool, bool) {
	if o == nil || IsNil(o.Drop) {
		return nil, false
	}
	return o.Drop, true
}

// HasDrop returns a boolean if a field has been set.
func (o *MimirRelabelRule) HasDrop() bool {
	if o != nil && !IsNil(o.Drop) {
		return true
	}

	return false
}

// SetDrop gets a reference to the given bool and assigns it to the Drop field.
func (o *MimirRelabelRule) SetDrop(v bool) {
	o.Drop = &v
}

// GetJoinLabels returns the JoinLabels field value if set, zero value otherwise.
func (o *MimirRelabelRule) GetJoinLabels() []string {
	if o == nil || IsNil(o.JoinLabels) {
		var ret []string
		return ret
	}
	return o.JoinLabels
}

// GetJoinLabelsOk returns a tuple with the JoinLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MimirRelabelRule) GetJoinLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.JoinLabels) {
		return nil, false
	}
	return o.JoinLabels, true
}

// HasJoinLabels returns a boolean if a field has been set.
func (o *MimirRelabelRule) HasJoinLabels() bool {
	if o != nil && !IsNil(o.JoinLabels) {
		return true
	}

	return false
}

// SetJoinLabels gets a reference to the given []string and assigns it to the JoinLabels field.
func (o *MimirRelabelRule) SetJoinLabels(v []string) {
	o.JoinLabels = v
}

// GetJoinSeparator returns the JoinSeparator field value if set, zero value otherwise.
func (o *MimirRelabelRule) GetJoinSeparator() string {
	if o == nil || IsNil(o.JoinSeparator) {
		var ret string
		return ret
	}
	return *o.JoinSeparator
}

// GetJoinSeparatorOk returns a tuple with the JoinSeparator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MimirRelabelRule) GetJoinSeparatorOk() (*string, bool) {
	if o == nil || IsNil(o.JoinSeparator) {
		return nil, false
	}
	return o.JoinSeparator, true
}

// HasJoinSeparator returns a boolean if a field has been set.
func (o *MimirRelabelRule) HasJoinSeparator() bool {
	if o != nil && !IsNil(o.JoinSeparator) {
		return true
	}

	return false
}

// SetJoinSeparator gets a reference to the given string and assigns it to the JoinSeparator field.
func (o *MimirRelabelRule) SetJoinSeparator(v string) {
	o.JoinSeparator = &v
}

// GetRankedChoice returns the RankedChoice field value if set, zero value otherwise.
func (o *MimirRelabelRule) GetRankedChoice() []string {
	if o == nil || IsNil(o.RankedChoice) {
		var ret []string
		return ret
	}
	return o.RankedChoice
}

// GetRankedChoiceOk returns a tuple with the RankedChoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MimirRelabelRule) GetRankedChoiceOk() ([]string, bool) {
	if o == nil || IsNil(o.RankedChoice) {
		return nil, false
	}
	return o.RankedChoice, true
}

// HasRankedChoice returns a boolean if a field has been set.
func (o *MimirRelabelRule) HasRankedChoice() bool {
	if o != nil && !IsNil(o.RankedChoice) {
		return true
	}

	return false
}

// SetRankedChoice gets a reference to the given []string and assigns it to the RankedChoice field.
func (o *MimirRelabelRule) SetRankedChoice(v []string) {
	o.RankedChoice = v
}

// GetTransformLabel returns the TransformLabel field value if set, zero value otherwise.
func (o *MimirRelabelRule) GetTransformLabel() string {
	if o == nil || IsNil(o.TransformLabel) {
		var ret string
		return ret
	}
	return *o.TransformLabel
}

// GetTransformLabelOk returns a tuple with the TransformLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MimirRelabelRule) GetTransformLabelOk() (*string, bool) {
	if o == nil || IsNil(o.TransformLabel) {
		return nil, false
	}
	return o.TransformLabel, true
}

// HasTransformLabel returns a boolean if a field has been set.
func (o *MimirRelabelRule) HasTransformLabel() bool {
	if o != nil && !IsNil(o.TransformLabel) {
		return true
	}

	return false
}

// SetTransformLabel gets a reference to the given string and assigns it to the TransformLabel field.
func (o *MimirRelabelRule) SetTransformLabel(v string) {
	o.TransformLabel = &v
}

// GetTransformOperation returns the TransformOperation field value if set, zero value otherwise.
func (o *MimirRelabelRule) GetTransformOperation() string {
	if o == nil || IsNil(o.TransformOperation) {
		var ret string
		return ret
	}
	return *o.TransformOperation
}

// GetTransformOperationOk returns a tuple with the TransformOperation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MimirRelabelRule) GetTransformOperationOk() (*string, bool) {
	if o == nil || IsNil(o.TransformOperation) {
		return nil, false
	}
	return o.TransformOperation, true
}

// HasTransformOperation returns a boolean if a field has been set.
func (o *MimirRelabelRule) HasTransformOperation() bool {
	if o != nil && !IsNil(o.TransformOperation) {
		return true
	}

	return false
}

// SetTransformOperation gets a reference to the given string and assigns it to the TransformOperation field.
func (o *MimirRelabelRule) SetTransformOperation(v string) {
	o.TransformOperation = &v
}

// GetTransformArg returns the TransformArg field value if set, zero value otherwise.
func (o *MimirRelabelRule) GetTransformArg() string {
	if o == nil || IsNil(o.TransformArg) {
		var ret string
		return ret
	}
	return *o.TransformArg
}

// GetTransformArgOk returns a tuple with the TransformArg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MimirRelabelRule) GetTransformArgOk() (*string, bool) {
	if o == nil || IsNil(o.TransformArg) {
		return nil, false
	}
	return o.TransformArg, true
}

// HasTransformArg returns a boolean if a field has been set.
func (o *MimirRelabelRule) HasTransformArg() bool {
	if o != nil && !IsNil(o.TransformArg) {
		return true
	}

	return false
}

// SetTransformArg gets a reference to the given string and assigns it to the TransformArg field.
func (o *MimirRelabelRule) SetTransformArg(v string) {
	o.TransformArg = &v
}

// GetTargetLabel returns the TargetLabel field value if set, zero value otherwise.
func (o *MimirRelabelRule) GetTargetLabel() string {
	if o == nil || IsNil(o.TargetLabel) {
		var ret string
		return ret
	}
	return *o.TargetLabel
}

// GetTargetLabelOk returns a tuple with the TargetLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MimirRelabelRule) GetTargetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.TargetLabel) {
		return nil, false
	}
	return o.TargetLabel, true
}

// HasTargetLabel returns a boolean if a field has been set.
func (o *MimirRelabelRule) HasTargetLabel() bool {
	if o != nil && !IsNil(o.TargetLabel) {
		return true
	}

	return false
}

// SetTargetLabel gets a reference to the given string and assigns it to the TargetLabel field.
func (o *MimirRelabelRule) SetTargetLabel(v string) {
	o.TargetLabel = &v
}

func (o MimirRelabelRule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MimirRelabelRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Selector) {
		toSerialize["selector"] = o.Selector
	}
	if !IsNil(o.Replacement) {
		toSerialize["replacement"] = o.Replacement
	}
	if !IsNil(o.Drop) {
		toSerialize["drop"] = o.Drop
	}
	if !IsNil(o.JoinLabels) {
		toSerialize["join_labels"] = o.JoinLabels
	}
	if !IsNil(o.JoinSeparator) {
		toSerialize["join_separator"] = o.JoinSeparator
	}
	if !IsNil(o.RankedChoice) {
		toSerialize["ranked_choice"] = o.RankedChoice
	}
	if !IsNil(o.TransformLabel) {
		toSerialize["transform_label"] = o.TransformLabel
	}
	if !IsNil(o.TransformOperation) {
		toSerialize["transform_operation"] = o.TransformOperation
	}
	if !IsNil(o.TransformArg) {
		toSerialize["transform_arg"] = o.TransformArg
	}
	if !IsNil(o.TargetLabel) {
		toSerialize["target_label"] = o.TargetLabel
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MimirRelabelRule) UnmarshalJSON(data []byte) (err error) {
	varMimirRelabelRule := _MimirRelabelRule{}

	err = json.Unmarshal(data, &varMimirRelabelRule)

	if err != nil {
		return err
	}

	*o = MimirRelabelRule(varMimirRelabelRule)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "selector")
		delete(additionalProperties, "replacement")
		delete(additionalProperties, "drop")
		delete(additionalProperties, "join_labels")
		delete(additionalProperties, "join_separator")
		delete(additionalProperties, "ranked_choice")
		delete(additionalProperties, "transform_label")
		delete(additionalProperties, "transform_operation")
		delete(additionalProperties, "transform_arg")
		delete(additionalProperties, "target_label")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMimirRelabelRule struct {
	value *MimirRelabelRule
	isSet bool
}

func (v NullableMimirRelabelRule) Get() *MimirRelabelRule {
	return v.value
}

func (v *NullableMimirRelabelRule) Set(val *MimirRelabelRule) {
	v.value = val
	v.isSet = true
}

func (v NullableMimirRelabelRule) IsSet() bool {
	return v.isSet
}

func (v *NullableMimirRelabelRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMimirRelabelRule(val *MimirRelabelRule) *NullableMimirRelabelRule {
	return &NullableMimirRelabelRule{value: val, isSet: true}
}

func (v NullableMimirRelabelRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMimirRelabelRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
