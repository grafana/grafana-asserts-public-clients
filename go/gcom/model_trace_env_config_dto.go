/*
Asserts, Inc

Asserts Public API

API version: 1.0.4
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the TraceEnvConfigDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TraceEnvConfigDto{}

// TraceEnvConfigDto struct for TraceEnvConfigDto
type TraceEnvConfigDto struct {
	Name                 *string         `json:"name,omitempty"`
	EnvsForTrace         []string        `json:"envsForTrace,omitempty"`
	SitesForTrace        []string        `json:"sitesForTrace,omitempty"`
	TraceConfig          *TraceConfigDto `json:"traceConfig,omitempty"`
	DefaultConfig        *bool           `json:"defaultConfig,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TraceEnvConfigDto TraceEnvConfigDto

// NewTraceEnvConfigDto instantiates a new TraceEnvConfigDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTraceEnvConfigDto() *TraceEnvConfigDto {
	this := TraceEnvConfigDto{}
	return &this
}

// NewTraceEnvConfigDtoWithDefaults instantiates a new TraceEnvConfigDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraceEnvConfigDtoWithDefaults() *TraceEnvConfigDto {
	this := TraceEnvConfigDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TraceEnvConfigDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceEnvConfigDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TraceEnvConfigDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TraceEnvConfigDto) SetName(v string) {
	o.Name = &v
}

// GetEnvsForTrace returns the EnvsForTrace field value if set, zero value otherwise.
func (o *TraceEnvConfigDto) GetEnvsForTrace() []string {
	if o == nil || IsNil(o.EnvsForTrace) {
		var ret []string
		return ret
	}
	return o.EnvsForTrace
}

// GetEnvsForTraceOk returns a tuple with the EnvsForTrace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceEnvConfigDto) GetEnvsForTraceOk() ([]string, bool) {
	if o == nil || IsNil(o.EnvsForTrace) {
		return nil, false
	}
	return o.EnvsForTrace, true
}

// HasEnvsForTrace returns a boolean if a field has been set.
func (o *TraceEnvConfigDto) HasEnvsForTrace() bool {
	if o != nil && !IsNil(o.EnvsForTrace) {
		return true
	}

	return false
}

// SetEnvsForTrace gets a reference to the given []string and assigns it to the EnvsForTrace field.
func (o *TraceEnvConfigDto) SetEnvsForTrace(v []string) {
	o.EnvsForTrace = v
}

// GetSitesForTrace returns the SitesForTrace field value if set, zero value otherwise.
func (o *TraceEnvConfigDto) GetSitesForTrace() []string {
	if o == nil || IsNil(o.SitesForTrace) {
		var ret []string
		return ret
	}
	return o.SitesForTrace
}

// GetSitesForTraceOk returns a tuple with the SitesForTrace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceEnvConfigDto) GetSitesForTraceOk() ([]string, bool) {
	if o == nil || IsNil(o.SitesForTrace) {
		return nil, false
	}
	return o.SitesForTrace, true
}

// HasSitesForTrace returns a boolean if a field has been set.
func (o *TraceEnvConfigDto) HasSitesForTrace() bool {
	if o != nil && !IsNil(o.SitesForTrace) {
		return true
	}

	return false
}

// SetSitesForTrace gets a reference to the given []string and assigns it to the SitesForTrace field.
func (o *TraceEnvConfigDto) SetSitesForTrace(v []string) {
	o.SitesForTrace = v
}

// GetTraceConfig returns the TraceConfig field value if set, zero value otherwise.
func (o *TraceEnvConfigDto) GetTraceConfig() TraceConfigDto {
	if o == nil || IsNil(o.TraceConfig) {
		var ret TraceConfigDto
		return ret
	}
	return *o.TraceConfig
}

// GetTraceConfigOk returns a tuple with the TraceConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceEnvConfigDto) GetTraceConfigOk() (*TraceConfigDto, bool) {
	if o == nil || IsNil(o.TraceConfig) {
		return nil, false
	}
	return o.TraceConfig, true
}

// HasTraceConfig returns a boolean if a field has been set.
func (o *TraceEnvConfigDto) HasTraceConfig() bool {
	if o != nil && !IsNil(o.TraceConfig) {
		return true
	}

	return false
}

// SetTraceConfig gets a reference to the given TraceConfigDto and assigns it to the TraceConfig field.
func (o *TraceEnvConfigDto) SetTraceConfig(v TraceConfigDto) {
	o.TraceConfig = &v
}

// GetDefaultConfig returns the DefaultConfig field value if set, zero value otherwise.
func (o *TraceEnvConfigDto) GetDefaultConfig() bool {
	if o == nil || IsNil(o.DefaultConfig) {
		var ret bool
		return ret
	}
	return *o.DefaultConfig
}

// GetDefaultConfigOk returns a tuple with the DefaultConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceEnvConfigDto) GetDefaultConfigOk() (*bool, bool) {
	if o == nil || IsNil(o.DefaultConfig) {
		return nil, false
	}
	return o.DefaultConfig, true
}

// HasDefaultConfig returns a boolean if a field has been set.
func (o *TraceEnvConfigDto) HasDefaultConfig() bool {
	if o != nil && !IsNil(o.DefaultConfig) {
		return true
	}

	return false
}

// SetDefaultConfig gets a reference to the given bool and assigns it to the DefaultConfig field.
func (o *TraceEnvConfigDto) SetDefaultConfig(v bool) {
	o.DefaultConfig = &v
}

func (o TraceEnvConfigDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TraceEnvConfigDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.EnvsForTrace) {
		toSerialize["envsForTrace"] = o.EnvsForTrace
	}
	if !IsNil(o.SitesForTrace) {
		toSerialize["sitesForTrace"] = o.SitesForTrace
	}
	if !IsNil(o.TraceConfig) {
		toSerialize["traceConfig"] = o.TraceConfig
	}
	if !IsNil(o.DefaultConfig) {
		toSerialize["defaultConfig"] = o.DefaultConfig
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TraceEnvConfigDto) UnmarshalJSON(data []byte) (err error) {
	varTraceEnvConfigDto := _TraceEnvConfigDto{}

	err = json.Unmarshal(data, &varTraceEnvConfigDto)

	if err != nil {
		return err
	}

	*o = TraceEnvConfigDto(varTraceEnvConfigDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "envsForTrace")
		delete(additionalProperties, "sitesForTrace")
		delete(additionalProperties, "traceConfig")
		delete(additionalProperties, "defaultConfig")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTraceEnvConfigDto struct {
	value *TraceEnvConfigDto
	isSet bool
}

func (v NullableTraceEnvConfigDto) Get() *TraceEnvConfigDto {
	return v.value
}

func (v *NullableTraceEnvConfigDto) Set(val *TraceEnvConfigDto) {
	v.value = val
	v.isSet = true
}

func (v NullableTraceEnvConfigDto) IsSet() bool {
	return v.isSet
}

func (v *NullableTraceEnvConfigDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTraceEnvConfigDto(val *TraceEnvConfigDto) *NullableTraceEnvConfigDto {
	return &NullableTraceEnvConfigDto{value: val, isSet: true}
}

func (v NullableTraceEnvConfigDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTraceEnvConfigDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
