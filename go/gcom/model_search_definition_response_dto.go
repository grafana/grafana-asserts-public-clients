/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-112305
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the SearchDefinitionResponseDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchDefinitionResponseDto{}

// SearchDefinitionResponseDto struct for SearchDefinitionResponseDto
type SearchDefinitionResponseDto struct {
	TotalResults         *int64                    `json:"totalResults,omitempty"`
	PageResults          *int64                    `json:"pageResults,omitempty"`
	MaxResults           *int64                    `json:"maxResults,omitempty"`
	Offset               *int32                    `json:"offset,omitempty"`
	Items                []SearchDefinitionItemDto `json:"items,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SearchDefinitionResponseDto SearchDefinitionResponseDto

// NewSearchDefinitionResponseDto instantiates a new SearchDefinitionResponseDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchDefinitionResponseDto() *SearchDefinitionResponseDto {
	this := SearchDefinitionResponseDto{}
	return &this
}

// NewSearchDefinitionResponseDtoWithDefaults instantiates a new SearchDefinitionResponseDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchDefinitionResponseDtoWithDefaults() *SearchDefinitionResponseDto {
	this := SearchDefinitionResponseDto{}
	return &this
}

// GetTotalResults returns the TotalResults field value if set, zero value otherwise.
func (o *SearchDefinitionResponseDto) GetTotalResults() int64 {
	if o == nil || IsNil(o.TotalResults) {
		var ret int64
		return ret
	}
	return *o.TotalResults
}

// GetTotalResultsOk returns a tuple with the TotalResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchDefinitionResponseDto) GetTotalResultsOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalResults) {
		return nil, false
	}
	return o.TotalResults, true
}

// HasTotalResults returns a boolean if a field has been set.
func (o *SearchDefinitionResponseDto) HasTotalResults() bool {
	if o != nil && !IsNil(o.TotalResults) {
		return true
	}

	return false
}

// SetTotalResults gets a reference to the given int64 and assigns it to the TotalResults field.
func (o *SearchDefinitionResponseDto) SetTotalResults(v int64) {
	o.TotalResults = &v
}

// GetPageResults returns the PageResults field value if set, zero value otherwise.
func (o *SearchDefinitionResponseDto) GetPageResults() int64 {
	if o == nil || IsNil(o.PageResults) {
		var ret int64
		return ret
	}
	return *o.PageResults
}

// GetPageResultsOk returns a tuple with the PageResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchDefinitionResponseDto) GetPageResultsOk() (*int64, bool) {
	if o == nil || IsNil(o.PageResults) {
		return nil, false
	}
	return o.PageResults, true
}

// HasPageResults returns a boolean if a field has been set.
func (o *SearchDefinitionResponseDto) HasPageResults() bool {
	if o != nil && !IsNil(o.PageResults) {
		return true
	}

	return false
}

// SetPageResults gets a reference to the given int64 and assigns it to the PageResults field.
func (o *SearchDefinitionResponseDto) SetPageResults(v int64) {
	o.PageResults = &v
}

// GetMaxResults returns the MaxResults field value if set, zero value otherwise.
func (o *SearchDefinitionResponseDto) GetMaxResults() int64 {
	if o == nil || IsNil(o.MaxResults) {
		var ret int64
		return ret
	}
	return *o.MaxResults
}

// GetMaxResultsOk returns a tuple with the MaxResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchDefinitionResponseDto) GetMaxResultsOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxResults) {
		return nil, false
	}
	return o.MaxResults, true
}

// HasMaxResults returns a boolean if a field has been set.
func (o *SearchDefinitionResponseDto) HasMaxResults() bool {
	if o != nil && !IsNil(o.MaxResults) {
		return true
	}

	return false
}

// SetMaxResults gets a reference to the given int64 and assigns it to the MaxResults field.
func (o *SearchDefinitionResponseDto) SetMaxResults(v int64) {
	o.MaxResults = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *SearchDefinitionResponseDto) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchDefinitionResponseDto) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *SearchDefinitionResponseDto) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *SearchDefinitionResponseDto) SetOffset(v int32) {
	o.Offset = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *SearchDefinitionResponseDto) GetItems() []SearchDefinitionItemDto {
	if o == nil || IsNil(o.Items) {
		var ret []SearchDefinitionItemDto
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchDefinitionResponseDto) GetItemsOk() ([]SearchDefinitionItemDto, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *SearchDefinitionResponseDto) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []SearchDefinitionItemDto and assigns it to the Items field.
func (o *SearchDefinitionResponseDto) SetItems(v []SearchDefinitionItemDto) {
	o.Items = v
}

func (o SearchDefinitionResponseDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchDefinitionResponseDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TotalResults) {
		toSerialize["totalResults"] = o.TotalResults
	}
	if !IsNil(o.PageResults) {
		toSerialize["pageResults"] = o.PageResults
	}
	if !IsNil(o.MaxResults) {
		toSerialize["maxResults"] = o.MaxResults
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SearchDefinitionResponseDto) UnmarshalJSON(data []byte) (err error) {
	varSearchDefinitionResponseDto := _SearchDefinitionResponseDto{}

	err = json.Unmarshal(data, &varSearchDefinitionResponseDto)

	if err != nil {
		return err
	}

	*o = SearchDefinitionResponseDto(varSearchDefinitionResponseDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "totalResults")
		delete(additionalProperties, "pageResults")
		delete(additionalProperties, "maxResults")
		delete(additionalProperties, "offset")
		delete(additionalProperties, "items")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSearchDefinitionResponseDto struct {
	value *SearchDefinitionResponseDto
	isSet bool
}

func (v NullableSearchDefinitionResponseDto) Get() *SearchDefinitionResponseDto {
	return v.value
}

func (v *NullableSearchDefinitionResponseDto) Set(val *SearchDefinitionResponseDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchDefinitionResponseDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchDefinitionResponseDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchDefinitionResponseDto(val *SearchDefinitionResponseDto) *NullableSearchDefinitionResponseDto {
	return &NullableSearchDefinitionResponseDto{value: val, isSet: true}
}

func (v NullableSearchDefinitionResponseDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchDefinitionResponseDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
