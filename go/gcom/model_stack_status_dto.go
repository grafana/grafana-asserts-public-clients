/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-062139
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
	"time"
)

// checks if the StackStatusDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StackStatusDto{}

// StackStatusDto struct for StackStatusDto
type StackStatusDto struct {
	Status                 *string                   `json:"status,omitempty"`
	DisabledTime           *time.Time                `json:"disabledTime,omitempty"`
	Enabled                *bool                     `json:"enabled,omitempty"`
	AlertManagerConfigured *bool                     `json:"alertManagerConfigured,omitempty"`
	GraphInstanceCreated   *bool                     `json:"graphInstanceCreated,omitempty"`
	SanityCheckResults     []MetricSanityCheckResult `json:"sanityCheckResults,omitempty"`
	Version                *int32                    `json:"version,omitempty"`
	AdditionalProperties   map[string]interface{}
}

type _StackStatusDto StackStatusDto

// NewStackStatusDto instantiates a new StackStatusDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStackStatusDto() *StackStatusDto {
	this := StackStatusDto{}
	return &this
}

// NewStackStatusDtoWithDefaults instantiates a new StackStatusDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStackStatusDtoWithDefaults() *StackStatusDto {
	this := StackStatusDto{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *StackStatusDto) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackStatusDto) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *StackStatusDto) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *StackStatusDto) SetStatus(v string) {
	o.Status = &v
}

// GetDisabledTime returns the DisabledTime field value if set, zero value otherwise.
func (o *StackStatusDto) GetDisabledTime() time.Time {
	if o == nil || IsNil(o.DisabledTime) {
		var ret time.Time
		return ret
	}
	return *o.DisabledTime
}

// GetDisabledTimeOk returns a tuple with the DisabledTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackStatusDto) GetDisabledTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DisabledTime) {
		return nil, false
	}
	return o.DisabledTime, true
}

// HasDisabledTime returns a boolean if a field has been set.
func (o *StackStatusDto) HasDisabledTime() bool {
	if o != nil && !IsNil(o.DisabledTime) {
		return true
	}

	return false
}

// SetDisabledTime gets a reference to the given time.Time and assigns it to the DisabledTime field.
func (o *StackStatusDto) SetDisabledTime(v time.Time) {
	o.DisabledTime = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *StackStatusDto) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackStatusDto) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *StackStatusDto) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *StackStatusDto) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetAlertManagerConfigured returns the AlertManagerConfigured field value if set, zero value otherwise.
func (o *StackStatusDto) GetAlertManagerConfigured() bool {
	if o == nil || IsNil(o.AlertManagerConfigured) {
		var ret bool
		return ret
	}
	return *o.AlertManagerConfigured
}

// GetAlertManagerConfiguredOk returns a tuple with the AlertManagerConfigured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackStatusDto) GetAlertManagerConfiguredOk() (*bool, bool) {
	if o == nil || IsNil(o.AlertManagerConfigured) {
		return nil, false
	}
	return o.AlertManagerConfigured, true
}

// HasAlertManagerConfigured returns a boolean if a field has been set.
func (o *StackStatusDto) HasAlertManagerConfigured() bool {
	if o != nil && !IsNil(o.AlertManagerConfigured) {
		return true
	}

	return false
}

// SetAlertManagerConfigured gets a reference to the given bool and assigns it to the AlertManagerConfigured field.
func (o *StackStatusDto) SetAlertManagerConfigured(v bool) {
	o.AlertManagerConfigured = &v
}

// GetGraphInstanceCreated returns the GraphInstanceCreated field value if set, zero value otherwise.
func (o *StackStatusDto) GetGraphInstanceCreated() bool {
	if o == nil || IsNil(o.GraphInstanceCreated) {
		var ret bool
		return ret
	}
	return *o.GraphInstanceCreated
}

// GetGraphInstanceCreatedOk returns a tuple with the GraphInstanceCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackStatusDto) GetGraphInstanceCreatedOk() (*bool, bool) {
	if o == nil || IsNil(o.GraphInstanceCreated) {
		return nil, false
	}
	return o.GraphInstanceCreated, true
}

// HasGraphInstanceCreated returns a boolean if a field has been set.
func (o *StackStatusDto) HasGraphInstanceCreated() bool {
	if o != nil && !IsNil(o.GraphInstanceCreated) {
		return true
	}

	return false
}

// SetGraphInstanceCreated gets a reference to the given bool and assigns it to the GraphInstanceCreated field.
func (o *StackStatusDto) SetGraphInstanceCreated(v bool) {
	o.GraphInstanceCreated = &v
}

// GetSanityCheckResults returns the SanityCheckResults field value if set, zero value otherwise.
func (o *StackStatusDto) GetSanityCheckResults() []MetricSanityCheckResult {
	if o == nil || IsNil(o.SanityCheckResults) {
		var ret []MetricSanityCheckResult
		return ret
	}
	return o.SanityCheckResults
}

// GetSanityCheckResultsOk returns a tuple with the SanityCheckResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackStatusDto) GetSanityCheckResultsOk() ([]MetricSanityCheckResult, bool) {
	if o == nil || IsNil(o.SanityCheckResults) {
		return nil, false
	}
	return o.SanityCheckResults, true
}

// HasSanityCheckResults returns a boolean if a field has been set.
func (o *StackStatusDto) HasSanityCheckResults() bool {
	if o != nil && !IsNil(o.SanityCheckResults) {
		return true
	}

	return false
}

// SetSanityCheckResults gets a reference to the given []MetricSanityCheckResult and assigns it to the SanityCheckResults field.
func (o *StackStatusDto) SetSanityCheckResults(v []MetricSanityCheckResult) {
	o.SanityCheckResults = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *StackStatusDto) GetVersion() int32 {
	if o == nil || IsNil(o.Version) {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackStatusDto) GetVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *StackStatusDto) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *StackStatusDto) SetVersion(v int32) {
	o.Version = &v
}

func (o StackStatusDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StackStatusDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.DisabledTime) {
		toSerialize["disabledTime"] = o.DisabledTime
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.AlertManagerConfigured) {
		toSerialize["alertManagerConfigured"] = o.AlertManagerConfigured
	}
	if !IsNil(o.GraphInstanceCreated) {
		toSerialize["graphInstanceCreated"] = o.GraphInstanceCreated
	}
	if !IsNil(o.SanityCheckResults) {
		toSerialize["sanityCheckResults"] = o.SanityCheckResults
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StackStatusDto) UnmarshalJSON(data []byte) (err error) {
	varStackStatusDto := _StackStatusDto{}

	err = json.Unmarshal(data, &varStackStatusDto)

	if err != nil {
		return err
	}

	*o = StackStatusDto(varStackStatusDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "status")
		delete(additionalProperties, "disabledTime")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "alertManagerConfigured")
		delete(additionalProperties, "graphInstanceCreated")
		delete(additionalProperties, "sanityCheckResults")
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStackStatusDto struct {
	value *StackStatusDto
	isSet bool
}

func (v NullableStackStatusDto) Get() *StackStatusDto {
	return v.value
}

func (v *NullableStackStatusDto) Set(val *StackStatusDto) {
	v.value = val
	v.isSet = true
}

func (v NullableStackStatusDto) IsSet() bool {
	return v.isSet
}

func (v *NullableStackStatusDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStackStatusDto(val *StackStatusDto) *NullableStackStatusDto {
	return &NullableStackStatusDto{value: val, isSet: true}
}

func (v NullableStackStatusDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStackStatusDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
