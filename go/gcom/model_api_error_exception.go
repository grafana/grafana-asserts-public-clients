/*
Asserts, Inc

Asserts Public API

API version: 1.0.0
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the ApiErrorException type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiErrorException{}

// ApiErrorException struct for ApiErrorException
type ApiErrorException struct {
	Cause                *ApiErrorExceptionCause                 `json:"cause,omitempty"`
	StackTrace           []ApiErrorExceptionCauseStackTraceInner `json:"stackTrace,omitempty"`
	ApiError             *ApiError                               `json:"apiError,omitempty"`
	Message              *string                                 `json:"message,omitempty"`
	Suppressed           []ApiErrorExceptionCause                `json:"suppressed,omitempty"`
	LocalizedMessage     *string                                 `json:"localizedMessage,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApiErrorException ApiErrorException

// NewApiErrorException instantiates a new ApiErrorException object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiErrorException() *ApiErrorException {
	this := ApiErrorException{}
	return &this
}

// NewApiErrorExceptionWithDefaults instantiates a new ApiErrorException object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiErrorExceptionWithDefaults() *ApiErrorException {
	this := ApiErrorException{}
	return &this
}

// GetCause returns the Cause field value if set, zero value otherwise.
func (o *ApiErrorException) GetCause() ApiErrorExceptionCause {
	if o == nil || IsNil(o.Cause) {
		var ret ApiErrorExceptionCause
		return ret
	}
	return *o.Cause
}

// GetCauseOk returns a tuple with the Cause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiErrorException) GetCauseOk() (*ApiErrorExceptionCause, bool) {
	if o == nil || IsNil(o.Cause) {
		return nil, false
	}
	return o.Cause, true
}

// HasCause returns a boolean if a field has been set.
func (o *ApiErrorException) HasCause() bool {
	if o != nil && !IsNil(o.Cause) {
		return true
	}

	return false
}

// SetCause gets a reference to the given ApiErrorExceptionCause and assigns it to the Cause field.
func (o *ApiErrorException) SetCause(v ApiErrorExceptionCause) {
	o.Cause = &v
}

// GetStackTrace returns the StackTrace field value if set, zero value otherwise.
func (o *ApiErrorException) GetStackTrace() []ApiErrorExceptionCauseStackTraceInner {
	if o == nil || IsNil(o.StackTrace) {
		var ret []ApiErrorExceptionCauseStackTraceInner
		return ret
	}
	return o.StackTrace
}

// GetStackTraceOk returns a tuple with the StackTrace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiErrorException) GetStackTraceOk() ([]ApiErrorExceptionCauseStackTraceInner, bool) {
	if o == nil || IsNil(o.StackTrace) {
		return nil, false
	}
	return o.StackTrace, true
}

// HasStackTrace returns a boolean if a field has been set.
func (o *ApiErrorException) HasStackTrace() bool {
	if o != nil && !IsNil(o.StackTrace) {
		return true
	}

	return false
}

// SetStackTrace gets a reference to the given []ApiErrorExceptionCauseStackTraceInner and assigns it to the StackTrace field.
func (o *ApiErrorException) SetStackTrace(v []ApiErrorExceptionCauseStackTraceInner) {
	o.StackTrace = v
}

// GetApiError returns the ApiError field value if set, zero value otherwise.
func (o *ApiErrorException) GetApiError() ApiError {
	if o == nil || IsNil(o.ApiError) {
		var ret ApiError
		return ret
	}
	return *o.ApiError
}

// GetApiErrorOk returns a tuple with the ApiError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiErrorException) GetApiErrorOk() (*ApiError, bool) {
	if o == nil || IsNil(o.ApiError) {
		return nil, false
	}
	return o.ApiError, true
}

// HasApiError returns a boolean if a field has been set.
func (o *ApiErrorException) HasApiError() bool {
	if o != nil && !IsNil(o.ApiError) {
		return true
	}

	return false
}

// SetApiError gets a reference to the given ApiError and assigns it to the ApiError field.
func (o *ApiErrorException) SetApiError(v ApiError) {
	o.ApiError = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ApiErrorException) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiErrorException) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ApiErrorException) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ApiErrorException) SetMessage(v string) {
	o.Message = &v
}

// GetSuppressed returns the Suppressed field value if set, zero value otherwise.
func (o *ApiErrorException) GetSuppressed() []ApiErrorExceptionCause {
	if o == nil || IsNil(o.Suppressed) {
		var ret []ApiErrorExceptionCause
		return ret
	}
	return o.Suppressed
}

// GetSuppressedOk returns a tuple with the Suppressed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiErrorException) GetSuppressedOk() ([]ApiErrorExceptionCause, bool) {
	if o == nil || IsNil(o.Suppressed) {
		return nil, false
	}
	return o.Suppressed, true
}

// HasSuppressed returns a boolean if a field has been set.
func (o *ApiErrorException) HasSuppressed() bool {
	if o != nil && !IsNil(o.Suppressed) {
		return true
	}

	return false
}

// SetSuppressed gets a reference to the given []ApiErrorExceptionCause and assigns it to the Suppressed field.
func (o *ApiErrorException) SetSuppressed(v []ApiErrorExceptionCause) {
	o.Suppressed = v
}

// GetLocalizedMessage returns the LocalizedMessage field value if set, zero value otherwise.
func (o *ApiErrorException) GetLocalizedMessage() string {
	if o == nil || IsNil(o.LocalizedMessage) {
		var ret string
		return ret
	}
	return *o.LocalizedMessage
}

// GetLocalizedMessageOk returns a tuple with the LocalizedMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiErrorException) GetLocalizedMessageOk() (*string, bool) {
	if o == nil || IsNil(o.LocalizedMessage) {
		return nil, false
	}
	return o.LocalizedMessage, true
}

// HasLocalizedMessage returns a boolean if a field has been set.
func (o *ApiErrorException) HasLocalizedMessage() bool {
	if o != nil && !IsNil(o.LocalizedMessage) {
		return true
	}

	return false
}

// SetLocalizedMessage gets a reference to the given string and assigns it to the LocalizedMessage field.
func (o *ApiErrorException) SetLocalizedMessage(v string) {
	o.LocalizedMessage = &v
}

func (o ApiErrorException) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiErrorException) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cause) {
		toSerialize["cause"] = o.Cause
	}
	if !IsNil(o.StackTrace) {
		toSerialize["stackTrace"] = o.StackTrace
	}
	if !IsNil(o.ApiError) {
		toSerialize["apiError"] = o.ApiError
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Suppressed) {
		toSerialize["suppressed"] = o.Suppressed
	}
	if !IsNil(o.LocalizedMessage) {
		toSerialize["localizedMessage"] = o.LocalizedMessage
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApiErrorException) UnmarshalJSON(data []byte) (err error) {
	varApiErrorException := _ApiErrorException{}

	err = json.Unmarshal(data, &varApiErrorException)

	if err != nil {
		return err
	}

	*o = ApiErrorException(varApiErrorException)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cause")
		delete(additionalProperties, "stackTrace")
		delete(additionalProperties, "apiError")
		delete(additionalProperties, "message")
		delete(additionalProperties, "suppressed")
		delete(additionalProperties, "localizedMessage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApiErrorException struct {
	value *ApiErrorException
	isSet bool
}

func (v NullableApiErrorException) Get() *ApiErrorException {
	return v.value
}

func (v *NullableApiErrorException) Set(val *ApiErrorException) {
	v.value = val
	v.isSet = true
}

func (v NullableApiErrorException) IsSet() bool {
	return v.isSet
}

func (v *NullableApiErrorException) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiErrorException(val *ApiErrorException) *NullableApiErrorException {
	return &NullableApiErrorException{value: val, isSet: true}
}

func (v NullableApiErrorException) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiErrorException) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
