/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-112305
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// SloConfigRequestDtoIndicator - struct for SloConfigRequestDtoIndicator
type SloConfigRequestDtoIndicator struct {
	OccurrenceSliConfigDto *OccurrenceSliConfigDto
	RequestSliConfigDto    *RequestSliConfigDto
}

// OccurrenceSliConfigDtoAsSloConfigRequestDtoIndicator is a convenience function that returns OccurrenceSliConfigDto wrapped in SloConfigRequestDtoIndicator
func OccurrenceSliConfigDtoAsSloConfigRequestDtoIndicator(v *OccurrenceSliConfigDto) SloConfigRequestDtoIndicator {
	return SloConfigRequestDtoIndicator{
		OccurrenceSliConfigDto: v,
	}
}

// RequestSliConfigDtoAsSloConfigRequestDtoIndicator is a convenience function that returns RequestSliConfigDto wrapped in SloConfigRequestDtoIndicator
func RequestSliConfigDtoAsSloConfigRequestDtoIndicator(v *RequestSliConfigDto) SloConfigRequestDtoIndicator {
	return SloConfigRequestDtoIndicator{
		RequestSliConfigDto: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *SloConfigRequestDtoIndicator) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into OccurrenceSliConfigDto
	err = newStrictDecoder(data).Decode(&dst.OccurrenceSliConfigDto)
	if err == nil {
		jsonOccurrenceSliConfigDto, _ := json.Marshal(dst.OccurrenceSliConfigDto)
		if string(jsonOccurrenceSliConfigDto) == "{}" { // empty struct
			dst.OccurrenceSliConfigDto = nil
		} else {
			if err = validator.Validate(dst.OccurrenceSliConfigDto); err != nil {
				dst.OccurrenceSliConfigDto = nil
			} else {
				match++
			}
		}
	} else {
		dst.OccurrenceSliConfigDto = nil
	}

	// try to unmarshal data into RequestSliConfigDto
	err = newStrictDecoder(data).Decode(&dst.RequestSliConfigDto)
	if err == nil {
		jsonRequestSliConfigDto, _ := json.Marshal(dst.RequestSliConfigDto)
		if string(jsonRequestSliConfigDto) == "{}" { // empty struct
			dst.RequestSliConfigDto = nil
		} else {
			if err = validator.Validate(dst.RequestSliConfigDto); err != nil {
				dst.RequestSliConfigDto = nil
			} else {
				match++
			}
		}
	} else {
		dst.RequestSliConfigDto = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.OccurrenceSliConfigDto = nil
		dst.RequestSliConfigDto = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SloConfigRequestDtoIndicator)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SloConfigRequestDtoIndicator)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SloConfigRequestDtoIndicator) MarshalJSON() ([]byte, error) {
	if src.OccurrenceSliConfigDto != nil {
		return json.Marshal(&src.OccurrenceSliConfigDto)
	}

	if src.RequestSliConfigDto != nil {
		return json.Marshal(&src.RequestSliConfigDto)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SloConfigRequestDtoIndicator) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.OccurrenceSliConfigDto != nil {
		return obj.OccurrenceSliConfigDto
	}

	if obj.RequestSliConfigDto != nil {
		return obj.RequestSliConfigDto
	}

	// all schemas are nil
	return nil
}

type NullableSloConfigRequestDtoIndicator struct {
	value *SloConfigRequestDtoIndicator
	isSet bool
}

func (v NullableSloConfigRequestDtoIndicator) Get() *SloConfigRequestDtoIndicator {
	return v.value
}

func (v *NullableSloConfigRequestDtoIndicator) Set(val *SloConfigRequestDtoIndicator) {
	v.value = val
	v.isSet = true
}

func (v NullableSloConfigRequestDtoIndicator) IsSet() bool {
	return v.isSet
}

func (v *NullableSloConfigRequestDtoIndicator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloConfigRequestDtoIndicator(val *SloConfigRequestDtoIndicator) *NullableSloConfigRequestDtoIndicator {
	return &NullableSloConfigRequestDtoIndicator{value: val, isSet: true}
}

func (v NullableSloConfigRequestDtoIndicator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloConfigRequestDtoIndicator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
