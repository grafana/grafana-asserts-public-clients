/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-062139
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the LatencyThresholdsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LatencyThresholdsDto{}

// LatencyThresholdsDto struct for LatencyThresholdsDto
type LatencyThresholdsDto struct {
	EntityKey            *EntityKeyDto         `json:"entityKey,omitempty"`
	LatencyThresholds    []LatencyThresholdDto `json:"latencyThresholds,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LatencyThresholdsDto LatencyThresholdsDto

// NewLatencyThresholdsDto instantiates a new LatencyThresholdsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLatencyThresholdsDto() *LatencyThresholdsDto {
	this := LatencyThresholdsDto{}
	return &this
}

// NewLatencyThresholdsDtoWithDefaults instantiates a new LatencyThresholdsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLatencyThresholdsDtoWithDefaults() *LatencyThresholdsDto {
	this := LatencyThresholdsDto{}
	return &this
}

// GetEntityKey returns the EntityKey field value if set, zero value otherwise.
func (o *LatencyThresholdsDto) GetEntityKey() EntityKeyDto {
	if o == nil || IsNil(o.EntityKey) {
		var ret EntityKeyDto
		return ret
	}
	return *o.EntityKey
}

// GetEntityKeyOk returns a tuple with the EntityKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LatencyThresholdsDto) GetEntityKeyOk() (*EntityKeyDto, bool) {
	if o == nil || IsNil(o.EntityKey) {
		return nil, false
	}
	return o.EntityKey, true
}

// HasEntityKey returns a boolean if a field has been set.
func (o *LatencyThresholdsDto) HasEntityKey() bool {
	if o != nil && !IsNil(o.EntityKey) {
		return true
	}

	return false
}

// SetEntityKey gets a reference to the given EntityKeyDto and assigns it to the EntityKey field.
func (o *LatencyThresholdsDto) SetEntityKey(v EntityKeyDto) {
	o.EntityKey = &v
}

// GetLatencyThresholds returns the LatencyThresholds field value if set, zero value otherwise.
func (o *LatencyThresholdsDto) GetLatencyThresholds() []LatencyThresholdDto {
	if o == nil || IsNil(o.LatencyThresholds) {
		var ret []LatencyThresholdDto
		return ret
	}
	return o.LatencyThresholds
}

// GetLatencyThresholdsOk returns a tuple with the LatencyThresholds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LatencyThresholdsDto) GetLatencyThresholdsOk() ([]LatencyThresholdDto, bool) {
	if o == nil || IsNil(o.LatencyThresholds) {
		return nil, false
	}
	return o.LatencyThresholds, true
}

// HasLatencyThresholds returns a boolean if a field has been set.
func (o *LatencyThresholdsDto) HasLatencyThresholds() bool {
	if o != nil && !IsNil(o.LatencyThresholds) {
		return true
	}

	return false
}

// SetLatencyThresholds gets a reference to the given []LatencyThresholdDto and assigns it to the LatencyThresholds field.
func (o *LatencyThresholdsDto) SetLatencyThresholds(v []LatencyThresholdDto) {
	o.LatencyThresholds = v
}

func (o LatencyThresholdsDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LatencyThresholdsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntityKey) {
		toSerialize["entityKey"] = o.EntityKey
	}
	if !IsNil(o.LatencyThresholds) {
		toSerialize["latencyThresholds"] = o.LatencyThresholds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LatencyThresholdsDto) UnmarshalJSON(data []byte) (err error) {
	varLatencyThresholdsDto := _LatencyThresholdsDto{}

	err = json.Unmarshal(data, &varLatencyThresholdsDto)

	if err != nil {
		return err
	}

	*o = LatencyThresholdsDto(varLatencyThresholdsDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "entityKey")
		delete(additionalProperties, "latencyThresholds")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLatencyThresholdsDto struct {
	value *LatencyThresholdsDto
	isSet bool
}

func (v NullableLatencyThresholdsDto) Get() *LatencyThresholdsDto {
	return v.value
}

func (v *NullableLatencyThresholdsDto) Set(val *LatencyThresholdsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableLatencyThresholdsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableLatencyThresholdsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLatencyThresholdsDto(val *LatencyThresholdsDto) *NullableLatencyThresholdsDto {
	return &NullableLatencyThresholdsDto{value: val, isSet: true}
}

func (v NullableLatencyThresholdsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLatencyThresholdsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
