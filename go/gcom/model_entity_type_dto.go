/*
Asserts, Inc

Asserts Public API

API version: 1.0.0
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the EntityTypeDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntityTypeDto{}

// EntityTypeDto struct for EntityTypeDto
type EntityTypeDto struct {
	EntityType           *string             `json:"entityType,omitempty"`
	Name                 *string             `json:"name,omitempty"`
	Lookup               map[string]string   `json:"lookup,omitempty"`
	Properties           []EntityPropertyDto `json:"properties,omitempty"`
	Created              *int64              `json:"created,omitempty"`
	Updated              *int64              `json:"updated,omitempty"`
	Active               *bool               `json:"active,omitempty"`
	ConnectedEntityTypes []string            `json:"connectedEntityTypes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EntityTypeDto EntityTypeDto

// NewEntityTypeDto instantiates a new EntityTypeDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityTypeDto() *EntityTypeDto {
	this := EntityTypeDto{}
	return &this
}

// NewEntityTypeDtoWithDefaults instantiates a new EntityTypeDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityTypeDtoWithDefaults() *EntityTypeDto {
	this := EntityTypeDto{}
	return &this
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *EntityTypeDto) GetEntityType() string {
	if o == nil || IsNil(o.EntityType) {
		var ret string
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityTypeDto) GetEntityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EntityType) {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *EntityTypeDto) HasEntityType() bool {
	if o != nil && !IsNil(o.EntityType) {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given string and assigns it to the EntityType field.
func (o *EntityTypeDto) SetEntityType(v string) {
	o.EntityType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EntityTypeDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityTypeDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EntityTypeDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EntityTypeDto) SetName(v string) {
	o.Name = &v
}

// GetLookup returns the Lookup field value if set, zero value otherwise.
func (o *EntityTypeDto) GetLookup() map[string]string {
	if o == nil || IsNil(o.Lookup) {
		var ret map[string]string
		return ret
	}
	return o.Lookup
}

// GetLookupOk returns a tuple with the Lookup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityTypeDto) GetLookupOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Lookup) {
		return map[string]string{}, false
	}
	return o.Lookup, true
}

// HasLookup returns a boolean if a field has been set.
func (o *EntityTypeDto) HasLookup() bool {
	if o != nil && !IsNil(o.Lookup) {
		return true
	}

	return false
}

// SetLookup gets a reference to the given map[string]string and assigns it to the Lookup field.
func (o *EntityTypeDto) SetLookup(v map[string]string) {
	o.Lookup = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *EntityTypeDto) GetProperties() []EntityPropertyDto {
	if o == nil || IsNil(o.Properties) {
		var ret []EntityPropertyDto
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityTypeDto) GetPropertiesOk() ([]EntityPropertyDto, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *EntityTypeDto) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given []EntityPropertyDto and assigns it to the Properties field.
func (o *EntityTypeDto) SetProperties(v []EntityPropertyDto) {
	o.Properties = v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *EntityTypeDto) GetCreated() int64 {
	if o == nil || IsNil(o.Created) {
		var ret int64
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityTypeDto) GetCreatedOk() (*int64, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *EntityTypeDto) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given int64 and assigns it to the Created field.
func (o *EntityTypeDto) SetCreated(v int64) {
	o.Created = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *EntityTypeDto) GetUpdated() int64 {
	if o == nil || IsNil(o.Updated) {
		var ret int64
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityTypeDto) GetUpdatedOk() (*int64, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *EntityTypeDto) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given int64 and assigns it to the Updated field.
func (o *EntityTypeDto) SetUpdated(v int64) {
	o.Updated = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *EntityTypeDto) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityTypeDto) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *EntityTypeDto) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *EntityTypeDto) SetActive(v bool) {
	o.Active = &v
}

// GetConnectedEntityTypes returns the ConnectedEntityTypes field value if set, zero value otherwise.
func (o *EntityTypeDto) GetConnectedEntityTypes() []string {
	if o == nil || IsNil(o.ConnectedEntityTypes) {
		var ret []string
		return ret
	}
	return o.ConnectedEntityTypes
}

// GetConnectedEntityTypesOk returns a tuple with the ConnectedEntityTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityTypeDto) GetConnectedEntityTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.ConnectedEntityTypes) {
		return nil, false
	}
	return o.ConnectedEntityTypes, true
}

// HasConnectedEntityTypes returns a boolean if a field has been set.
func (o *EntityTypeDto) HasConnectedEntityTypes() bool {
	if o != nil && !IsNil(o.ConnectedEntityTypes) {
		return true
	}

	return false
}

// SetConnectedEntityTypes gets a reference to the given []string and assigns it to the ConnectedEntityTypes field.
func (o *EntityTypeDto) SetConnectedEntityTypes(v []string) {
	o.ConnectedEntityTypes = v
}

func (o EntityTypeDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntityTypeDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntityType) {
		toSerialize["entityType"] = o.EntityType
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Lookup) {
		toSerialize["lookup"] = o.Lookup
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.ConnectedEntityTypes) {
		toSerialize["connectedEntityTypes"] = o.ConnectedEntityTypes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EntityTypeDto) UnmarshalJSON(data []byte) (err error) {
	varEntityTypeDto := _EntityTypeDto{}

	err = json.Unmarshal(data, &varEntityTypeDto)

	if err != nil {
		return err
	}

	*o = EntityTypeDto(varEntityTypeDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "entityType")
		delete(additionalProperties, "name")
		delete(additionalProperties, "lookup")
		delete(additionalProperties, "properties")
		delete(additionalProperties, "created")
		delete(additionalProperties, "updated")
		delete(additionalProperties, "active")
		delete(additionalProperties, "connectedEntityTypes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEntityTypeDto struct {
	value *EntityTypeDto
	isSet bool
}

func (v NullableEntityTypeDto) Get() *EntityTypeDto {
	return v.value
}

func (v *NullableEntityTypeDto) Set(val *EntityTypeDto) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityTypeDto) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityTypeDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityTypeDto(val *EntityTypeDto) *NullableEntityTypeDto {
	return &NullableEntityTypeDto{value: val, isSet: true}
}

func (v NullableEntityTypeDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityTypeDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
