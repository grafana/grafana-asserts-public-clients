/*
Asserts, Inc

Asserts Public API

API version: 1.0.0
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the SloIncidentRequestDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SloIncidentRequestDto{}

// SloIncidentRequestDto struct for SloIncidentRequestDto
type SloIncidentRequestDto struct {
	Start                *int64            `json:"start,omitempty"`
	End                  *int64            `json:"end,omitempty"`
	SloName              *string           `json:"sloName,omitempty"`
	TargetName           *string           `json:"targetName,omitempty"`
	ScopeCriteria        *ScopeCriteriaDto `json:"scopeCriteria,omitempty"`
	SloSource            *string           `json:"sloSource,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SloIncidentRequestDto SloIncidentRequestDto

// NewSloIncidentRequestDto instantiates a new SloIncidentRequestDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSloIncidentRequestDto() *SloIncidentRequestDto {
	this := SloIncidentRequestDto{}
	return &this
}

// NewSloIncidentRequestDtoWithDefaults instantiates a new SloIncidentRequestDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSloIncidentRequestDtoWithDefaults() *SloIncidentRequestDto {
	this := SloIncidentRequestDto{}
	return &this
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *SloIncidentRequestDto) GetStart() int64 {
	if o == nil || IsNil(o.Start) {
		var ret int64
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloIncidentRequestDto) GetStartOk() (*int64, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *SloIncidentRequestDto) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given int64 and assigns it to the Start field.
func (o *SloIncidentRequestDto) SetStart(v int64) {
	o.Start = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *SloIncidentRequestDto) GetEnd() int64 {
	if o == nil || IsNil(o.End) {
		var ret int64
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloIncidentRequestDto) GetEndOk() (*int64, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *SloIncidentRequestDto) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given int64 and assigns it to the End field.
func (o *SloIncidentRequestDto) SetEnd(v int64) {
	o.End = &v
}

// GetSloName returns the SloName field value if set, zero value otherwise.
func (o *SloIncidentRequestDto) GetSloName() string {
	if o == nil || IsNil(o.SloName) {
		var ret string
		return ret
	}
	return *o.SloName
}

// GetSloNameOk returns a tuple with the SloName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloIncidentRequestDto) GetSloNameOk() (*string, bool) {
	if o == nil || IsNil(o.SloName) {
		return nil, false
	}
	return o.SloName, true
}

// HasSloName returns a boolean if a field has been set.
func (o *SloIncidentRequestDto) HasSloName() bool {
	if o != nil && !IsNil(o.SloName) {
		return true
	}

	return false
}

// SetSloName gets a reference to the given string and assigns it to the SloName field.
func (o *SloIncidentRequestDto) SetSloName(v string) {
	o.SloName = &v
}

// GetTargetName returns the TargetName field value if set, zero value otherwise.
func (o *SloIncidentRequestDto) GetTargetName() string {
	if o == nil || IsNil(o.TargetName) {
		var ret string
		return ret
	}
	return *o.TargetName
}

// GetTargetNameOk returns a tuple with the TargetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloIncidentRequestDto) GetTargetNameOk() (*string, bool) {
	if o == nil || IsNil(o.TargetName) {
		return nil, false
	}
	return o.TargetName, true
}

// HasTargetName returns a boolean if a field has been set.
func (o *SloIncidentRequestDto) HasTargetName() bool {
	if o != nil && !IsNil(o.TargetName) {
		return true
	}

	return false
}

// SetTargetName gets a reference to the given string and assigns it to the TargetName field.
func (o *SloIncidentRequestDto) SetTargetName(v string) {
	o.TargetName = &v
}

// GetScopeCriteria returns the ScopeCriteria field value if set, zero value otherwise.
func (o *SloIncidentRequestDto) GetScopeCriteria() ScopeCriteriaDto {
	if o == nil || IsNil(o.ScopeCriteria) {
		var ret ScopeCriteriaDto
		return ret
	}
	return *o.ScopeCriteria
}

// GetScopeCriteriaOk returns a tuple with the ScopeCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloIncidentRequestDto) GetScopeCriteriaOk() (*ScopeCriteriaDto, bool) {
	if o == nil || IsNil(o.ScopeCriteria) {
		return nil, false
	}
	return o.ScopeCriteria, true
}

// HasScopeCriteria returns a boolean if a field has been set.
func (o *SloIncidentRequestDto) HasScopeCriteria() bool {
	if o != nil && !IsNil(o.ScopeCriteria) {
		return true
	}

	return false
}

// SetScopeCriteria gets a reference to the given ScopeCriteriaDto and assigns it to the ScopeCriteria field.
func (o *SloIncidentRequestDto) SetScopeCriteria(v ScopeCriteriaDto) {
	o.ScopeCriteria = &v
}

// GetSloSource returns the SloSource field value if set, zero value otherwise.
func (o *SloIncidentRequestDto) GetSloSource() string {
	if o == nil || IsNil(o.SloSource) {
		var ret string
		return ret
	}
	return *o.SloSource
}

// GetSloSourceOk returns a tuple with the SloSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloIncidentRequestDto) GetSloSourceOk() (*string, bool) {
	if o == nil || IsNil(o.SloSource) {
		return nil, false
	}
	return o.SloSource, true
}

// HasSloSource returns a boolean if a field has been set.
func (o *SloIncidentRequestDto) HasSloSource() bool {
	if o != nil && !IsNil(o.SloSource) {
		return true
	}

	return false
}

// SetSloSource gets a reference to the given string and assigns it to the SloSource field.
func (o *SloIncidentRequestDto) SetSloSource(v string) {
	o.SloSource = &v
}

func (o SloIncidentRequestDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SloIncidentRequestDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !IsNil(o.SloName) {
		toSerialize["sloName"] = o.SloName
	}
	if !IsNil(o.TargetName) {
		toSerialize["targetName"] = o.TargetName
	}
	if !IsNil(o.ScopeCriteria) {
		toSerialize["scopeCriteria"] = o.ScopeCriteria
	}
	if !IsNil(o.SloSource) {
		toSerialize["sloSource"] = o.SloSource
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SloIncidentRequestDto) UnmarshalJSON(data []byte) (err error) {
	varSloIncidentRequestDto := _SloIncidentRequestDto{}

	err = json.Unmarshal(data, &varSloIncidentRequestDto)

	if err != nil {
		return err
	}

	*o = SloIncidentRequestDto(varSloIncidentRequestDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "start")
		delete(additionalProperties, "end")
		delete(additionalProperties, "sloName")
		delete(additionalProperties, "targetName")
		delete(additionalProperties, "scopeCriteria")
		delete(additionalProperties, "sloSource")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSloIncidentRequestDto struct {
	value *SloIncidentRequestDto
	isSet bool
}

func (v NullableSloIncidentRequestDto) Get() *SloIncidentRequestDto {
	return v.value
}

func (v *NullableSloIncidentRequestDto) Set(val *SloIncidentRequestDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSloIncidentRequestDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSloIncidentRequestDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloIncidentRequestDto(val *SloIncidentRequestDto) *NullableSloIncidentRequestDto {
	return &NullableSloIncidentRequestDto{value: val, isSet: true}
}

func (v NullableSloIncidentRequestDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloIncidentRequestDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
