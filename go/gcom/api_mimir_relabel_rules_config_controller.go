/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-084942
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// MimirRelabelRulesConfigControllerAPIService MimirRelabelRulesConfigControllerAPI service
type MimirRelabelRulesConfigControllerAPIService service

type ApiDeleteEpilogueRelabelRulesRequest struct {
	ctx         context.Context
	ApiService  *MimirRelabelRulesConfigControllerAPIService
	xScopeOrgID *string
}

// Grafana Tenant/Stack ID
func (r ApiDeleteEpilogueRelabelRulesRequest) XScopeOrgID(xScopeOrgID string) ApiDeleteEpilogueRelabelRulesRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiDeleteEpilogueRelabelRulesRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteEpilogueRelabelRulesExecute(r)
}

/*
DeleteEpilogueRelabelRules Method for DeleteEpilogueRelabelRules

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteEpilogueRelabelRulesRequest
*/
func (a *MimirRelabelRulesConfigControllerAPIService) DeleteEpilogueRelabelRules(ctx context.Context) ApiDeleteEpilogueRelabelRulesRequest {
	return ApiDeleteEpilogueRelabelRulesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *MimirRelabelRulesConfigControllerAPIService) DeleteEpilogueRelabelRulesExecute(r ApiDeleteEpilogueRelabelRulesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MimirRelabelRulesConfigControllerAPIService.DeleteEpilogueRelabelRules")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/config/relabel-rules/epilogue"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeletePrologueRelabelRulesRequest struct {
	ctx         context.Context
	ApiService  *MimirRelabelRulesConfigControllerAPIService
	xScopeOrgID *string
}

// Grafana Tenant/Stack ID
func (r ApiDeletePrologueRelabelRulesRequest) XScopeOrgID(xScopeOrgID string) ApiDeletePrologueRelabelRulesRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiDeletePrologueRelabelRulesRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePrologueRelabelRulesExecute(r)
}

/*
DeletePrologueRelabelRules Method for DeletePrologueRelabelRules

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeletePrologueRelabelRulesRequest
*/
func (a *MimirRelabelRulesConfigControllerAPIService) DeletePrologueRelabelRules(ctx context.Context) ApiDeletePrologueRelabelRulesRequest {
	return ApiDeletePrologueRelabelRulesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *MimirRelabelRulesConfigControllerAPIService) DeletePrologueRelabelRulesExecute(r ApiDeletePrologueRelabelRulesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MimirRelabelRulesConfigControllerAPIService.DeletePrologueRelabelRules")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/config/relabel-rules/prologue"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetEpilogueRelabelRulesRequest struct {
	ctx         context.Context
	ApiService  *MimirRelabelRulesConfigControllerAPIService
	xScopeOrgID *string
}

// Grafana Tenant/Stack ID
func (r ApiGetEpilogueRelabelRulesRequest) XScopeOrgID(xScopeOrgID string) ApiGetEpilogueRelabelRulesRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiGetEpilogueRelabelRulesRequest) Execute() (*MimirRelabelRuleGroupDto, *http.Response, error) {
	return r.ApiService.GetEpilogueRelabelRulesExecute(r)
}

/*
GetEpilogueRelabelRules Method for GetEpilogueRelabelRules

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetEpilogueRelabelRulesRequest
*/
func (a *MimirRelabelRulesConfigControllerAPIService) GetEpilogueRelabelRules(ctx context.Context) ApiGetEpilogueRelabelRulesRequest {
	return ApiGetEpilogueRelabelRulesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return MimirRelabelRuleGroupDto
func (a *MimirRelabelRulesConfigControllerAPIService) GetEpilogueRelabelRulesExecute(r ApiGetEpilogueRelabelRulesRequest) (*MimirRelabelRuleGroupDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MimirRelabelRuleGroupDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MimirRelabelRulesConfigControllerAPIService.GetEpilogueRelabelRules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/config/relabel-rules/epilogue"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/x-yml", "application/x-yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetGeneratedRelabelRulesRequest struct {
	ctx         context.Context
	ApiService  *MimirRelabelRulesConfigControllerAPIService
	xScopeOrgID *string
}

// Grafana Tenant/Stack ID
func (r ApiGetGeneratedRelabelRulesRequest) XScopeOrgID(xScopeOrgID string) ApiGetGeneratedRelabelRulesRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiGetGeneratedRelabelRulesRequest) Execute() (*MimirRelabelRuleGroupDto, *http.Response, error) {
	return r.ApiService.GetGeneratedRelabelRulesExecute(r)
}

/*
GetGeneratedRelabelRules Method for GetGeneratedRelabelRules

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetGeneratedRelabelRulesRequest
*/
func (a *MimirRelabelRulesConfigControllerAPIService) GetGeneratedRelabelRules(ctx context.Context) ApiGetGeneratedRelabelRulesRequest {
	return ApiGetGeneratedRelabelRulesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return MimirRelabelRuleGroupDto
func (a *MimirRelabelRulesConfigControllerAPIService) GetGeneratedRelabelRulesExecute(r ApiGetGeneratedRelabelRulesRequest) (*MimirRelabelRuleGroupDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MimirRelabelRuleGroupDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MimirRelabelRulesConfigControllerAPIService.GetGeneratedRelabelRules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/config/relabel-rules/generated"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/x-yml", "application/x-yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPrologueRelabelRulesRequest struct {
	ctx         context.Context
	ApiService  *MimirRelabelRulesConfigControllerAPIService
	xScopeOrgID *string
}

// Grafana Tenant/Stack ID
func (r ApiGetPrologueRelabelRulesRequest) XScopeOrgID(xScopeOrgID string) ApiGetPrologueRelabelRulesRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiGetPrologueRelabelRulesRequest) Execute() (*MimirRelabelRuleGroupDto, *http.Response, error) {
	return r.ApiService.GetPrologueRelabelRulesExecute(r)
}

/*
GetPrologueRelabelRules Method for GetPrologueRelabelRules

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetPrologueRelabelRulesRequest
*/
func (a *MimirRelabelRulesConfigControllerAPIService) GetPrologueRelabelRules(ctx context.Context) ApiGetPrologueRelabelRulesRequest {
	return ApiGetPrologueRelabelRulesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return MimirRelabelRuleGroupDto
func (a *MimirRelabelRulesConfigControllerAPIService) GetPrologueRelabelRulesExecute(r ApiGetPrologueRelabelRulesRequest) (*MimirRelabelRuleGroupDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MimirRelabelRuleGroupDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MimirRelabelRulesConfigControllerAPIService.GetPrologueRelabelRules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/config/relabel-rules/prologue"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/x-yml", "application/x-yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutMimirEpilogueRelabelRulesRequest struct {
	ctx                      context.Context
	ApiService               *MimirRelabelRulesConfigControllerAPIService
	mimirRelabelRuleGroupDto *MimirRelabelRuleGroupDto
	xScopeOrgID              *string
}

func (r ApiPutMimirEpilogueRelabelRulesRequest) MimirRelabelRuleGroupDto(mimirRelabelRuleGroupDto MimirRelabelRuleGroupDto) ApiPutMimirEpilogueRelabelRulesRequest {
	r.mimirRelabelRuleGroupDto = &mimirRelabelRuleGroupDto
	return r
}

// Grafana Tenant/Stack ID
func (r ApiPutMimirEpilogueRelabelRulesRequest) XScopeOrgID(xScopeOrgID string) ApiPutMimirEpilogueRelabelRulesRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiPutMimirEpilogueRelabelRulesRequest) Execute() (*http.Response, error) {
	return r.ApiService.PutMimirEpilogueRelabelRulesExecute(r)
}

/*
PutMimirEpilogueRelabelRules Method for PutMimirEpilogueRelabelRules

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPutMimirEpilogueRelabelRulesRequest
*/
func (a *MimirRelabelRulesConfigControllerAPIService) PutMimirEpilogueRelabelRules(ctx context.Context) ApiPutMimirEpilogueRelabelRulesRequest {
	return ApiPutMimirEpilogueRelabelRulesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *MimirRelabelRulesConfigControllerAPIService) PutMimirEpilogueRelabelRulesExecute(r ApiPutMimirEpilogueRelabelRulesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MimirRelabelRulesConfigControllerAPIService.PutMimirEpilogueRelabelRules")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/config/relabel-rules/epilogue"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.mimirRelabelRuleGroupDto == nil {
		return nil, reportError("mimirRelabelRuleGroupDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-yml", "application/x-yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	// body params
	localVarPostBody = r.mimirRelabelRuleGroupDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPutMimirPrologueRelabelRulesRequest struct {
	ctx                      context.Context
	ApiService               *MimirRelabelRulesConfigControllerAPIService
	mimirRelabelRuleGroupDto *MimirRelabelRuleGroupDto
	xScopeOrgID              *string
}

func (r ApiPutMimirPrologueRelabelRulesRequest) MimirRelabelRuleGroupDto(mimirRelabelRuleGroupDto MimirRelabelRuleGroupDto) ApiPutMimirPrologueRelabelRulesRequest {
	r.mimirRelabelRuleGroupDto = &mimirRelabelRuleGroupDto
	return r
}

// Grafana Tenant/Stack ID
func (r ApiPutMimirPrologueRelabelRulesRequest) XScopeOrgID(xScopeOrgID string) ApiPutMimirPrologueRelabelRulesRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiPutMimirPrologueRelabelRulesRequest) Execute() (*http.Response, error) {
	return r.ApiService.PutMimirPrologueRelabelRulesExecute(r)
}

/*
PutMimirPrologueRelabelRules Method for PutMimirPrologueRelabelRules

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPutMimirPrologueRelabelRulesRequest
*/
func (a *MimirRelabelRulesConfigControllerAPIService) PutMimirPrologueRelabelRules(ctx context.Context) ApiPutMimirPrologueRelabelRulesRequest {
	return ApiPutMimirPrologueRelabelRulesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *MimirRelabelRulesConfigControllerAPIService) PutMimirPrologueRelabelRulesExecute(r ApiPutMimirPrologueRelabelRulesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MimirRelabelRulesConfigControllerAPIService.PutMimirPrologueRelabelRules")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/config/relabel-rules/prologue"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.mimirRelabelRuleGroupDto == nil {
		return nil, reportError("mimirRelabelRuleGroupDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-yml", "application/x-yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	// body params
	localVarPostBody = r.mimirRelabelRuleGroupDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
