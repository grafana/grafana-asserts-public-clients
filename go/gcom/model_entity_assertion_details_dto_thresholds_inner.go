/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-062139
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// EntityAssertionDetailsDtoThresholdsInner - struct for EntityAssertionDetailsDtoThresholdsInner
type EntityAssertionDetailsDtoThresholdsInner struct {
	ThresholdMinMaxDto *ThresholdMinMaxDto
	ThresholdSingleDto *ThresholdSingleDto
}

// ThresholdMinMaxDtoAsEntityAssertionDetailsDtoThresholdsInner is a convenience function that returns ThresholdMinMaxDto wrapped in EntityAssertionDetailsDtoThresholdsInner
func ThresholdMinMaxDtoAsEntityAssertionDetailsDtoThresholdsInner(v *ThresholdMinMaxDto) EntityAssertionDetailsDtoThresholdsInner {
	return EntityAssertionDetailsDtoThresholdsInner{
		ThresholdMinMaxDto: v,
	}
}

// ThresholdSingleDtoAsEntityAssertionDetailsDtoThresholdsInner is a convenience function that returns ThresholdSingleDto wrapped in EntityAssertionDetailsDtoThresholdsInner
func ThresholdSingleDtoAsEntityAssertionDetailsDtoThresholdsInner(v *ThresholdSingleDto) EntityAssertionDetailsDtoThresholdsInner {
	return EntityAssertionDetailsDtoThresholdsInner{
		ThresholdSingleDto: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *EntityAssertionDetailsDtoThresholdsInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ThresholdMinMaxDto
	err = newStrictDecoder(data).Decode(&dst.ThresholdMinMaxDto)
	if err == nil {
		jsonThresholdMinMaxDto, _ := json.Marshal(dst.ThresholdMinMaxDto)
		if string(jsonThresholdMinMaxDto) == "{}" { // empty struct
			dst.ThresholdMinMaxDto = nil
		} else {
			if err = validator.Validate(dst.ThresholdMinMaxDto); err != nil {
				dst.ThresholdMinMaxDto = nil
			} else {
				match++
			}
		}
	} else {
		dst.ThresholdMinMaxDto = nil
	}

	// try to unmarshal data into ThresholdSingleDto
	err = newStrictDecoder(data).Decode(&dst.ThresholdSingleDto)
	if err == nil {
		jsonThresholdSingleDto, _ := json.Marshal(dst.ThresholdSingleDto)
		if string(jsonThresholdSingleDto) == "{}" { // empty struct
			dst.ThresholdSingleDto = nil
		} else {
			if err = validator.Validate(dst.ThresholdSingleDto); err != nil {
				dst.ThresholdSingleDto = nil
			} else {
				match++
			}
		}
	} else {
		dst.ThresholdSingleDto = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ThresholdMinMaxDto = nil
		dst.ThresholdSingleDto = nil

		return fmt.Errorf("data matches more than one schema in oneOf(EntityAssertionDetailsDtoThresholdsInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(EntityAssertionDetailsDtoThresholdsInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EntityAssertionDetailsDtoThresholdsInner) MarshalJSON() ([]byte, error) {
	if src.ThresholdMinMaxDto != nil {
		return json.Marshal(&src.ThresholdMinMaxDto)
	}

	if src.ThresholdSingleDto != nil {
		return json.Marshal(&src.ThresholdSingleDto)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EntityAssertionDetailsDtoThresholdsInner) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ThresholdMinMaxDto != nil {
		return obj.ThresholdMinMaxDto
	}

	if obj.ThresholdSingleDto != nil {
		return obj.ThresholdSingleDto
	}

	// all schemas are nil
	return nil
}

type NullableEntityAssertionDetailsDtoThresholdsInner struct {
	value *EntityAssertionDetailsDtoThresholdsInner
	isSet bool
}

func (v NullableEntityAssertionDetailsDtoThresholdsInner) Get() *EntityAssertionDetailsDtoThresholdsInner {
	return v.value
}

func (v *NullableEntityAssertionDetailsDtoThresholdsInner) Set(val *EntityAssertionDetailsDtoThresholdsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityAssertionDetailsDtoThresholdsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityAssertionDetailsDtoThresholdsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityAssertionDetailsDtoThresholdsInner(val *EntityAssertionDetailsDtoThresholdsInner) *NullableEntityAssertionDetailsDtoThresholdsInner {
	return &NullableEntityAssertionDetailsDtoThresholdsInner{value: val, isSet: true}
}

func (v NullableEntityAssertionDetailsDtoThresholdsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityAssertionDetailsDtoThresholdsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
