/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-161538
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
	"fmt"
)

// HttpStatus the model 'HttpStatus'
type HttpStatus string

// List of HttpStatus
const (
	_100_CONTINUE                        HttpStatus = "100 CONTINUE"
	_101_SWITCHING_PROTOCOLS             HttpStatus = "101 SWITCHING_PROTOCOLS"
	_102_PROCESSING                      HttpStatus = "102 PROCESSING"
	_103_EARLY_HINTS                     HttpStatus = "103 EARLY_HINTS"
	_103_CHECKPOINT                      HttpStatus = "103 CHECKPOINT"
	_200_OK                              HttpStatus = "200 OK"
	_201_CREATED                         HttpStatus = "201 CREATED"
	_202_ACCEPTED                        HttpStatus = "202 ACCEPTED"
	_203_NON_AUTHORITATIVE_INFORMATION   HttpStatus = "203 NON_AUTHORITATIVE_INFORMATION"
	_204_NO_CONTENT                      HttpStatus = "204 NO_CONTENT"
	_205_RESET_CONTENT                   HttpStatus = "205 RESET_CONTENT"
	_206_PARTIAL_CONTENT                 HttpStatus = "206 PARTIAL_CONTENT"
	_207_MULTI_STATUS                    HttpStatus = "207 MULTI_STATUS"
	_208_ALREADY_REPORTED                HttpStatus = "208 ALREADY_REPORTED"
	_226_IM_USED                         HttpStatus = "226 IM_USED"
	_300_MULTIPLE_CHOICES                HttpStatus = "300 MULTIPLE_CHOICES"
	_301_MOVED_PERMANENTLY               HttpStatus = "301 MOVED_PERMANENTLY"
	_302_FOUND                           HttpStatus = "302 FOUND"
	_302_MOVED_TEMPORARILY               HttpStatus = "302 MOVED_TEMPORARILY"
	_303_SEE_OTHER                       HttpStatus = "303 SEE_OTHER"
	_304_NOT_MODIFIED                    HttpStatus = "304 NOT_MODIFIED"
	_305_USE_PROXY                       HttpStatus = "305 USE_PROXY"
	_307_TEMPORARY_REDIRECT              HttpStatus = "307 TEMPORARY_REDIRECT"
	_308_PERMANENT_REDIRECT              HttpStatus = "308 PERMANENT_REDIRECT"
	_400_BAD_REQUEST                     HttpStatus = "400 BAD_REQUEST"
	_401_UNAUTHORIZED                    HttpStatus = "401 UNAUTHORIZED"
	_402_PAYMENT_REQUIRED                HttpStatus = "402 PAYMENT_REQUIRED"
	_403_FORBIDDEN                       HttpStatus = "403 FORBIDDEN"
	_404_NOT_FOUND                       HttpStatus = "404 NOT_FOUND"
	_405_METHOD_NOT_ALLOWED              HttpStatus = "405 METHOD_NOT_ALLOWED"
	_406_NOT_ACCEPTABLE                  HttpStatus = "406 NOT_ACCEPTABLE"
	_407_PROXY_AUTHENTICATION_REQUIRED   HttpStatus = "407 PROXY_AUTHENTICATION_REQUIRED"
	_408_REQUEST_TIMEOUT                 HttpStatus = "408 REQUEST_TIMEOUT"
	_409_CONFLICT                        HttpStatus = "409 CONFLICT"
	_410_GONE                            HttpStatus = "410 GONE"
	_411_LENGTH_REQUIRED                 HttpStatus = "411 LENGTH_REQUIRED"
	_412_PRECONDITION_FAILED             HttpStatus = "412 PRECONDITION_FAILED"
	_413_PAYLOAD_TOO_LARGE               HttpStatus = "413 PAYLOAD_TOO_LARGE"
	_413_REQUEST_ENTITY_TOO_LARGE        HttpStatus = "413 REQUEST_ENTITY_TOO_LARGE"
	_414_URI_TOO_LONG                    HttpStatus = "414 URI_TOO_LONG"
	_414_REQUEST_URI_TOO_LONG            HttpStatus = "414 REQUEST_URI_TOO_LONG"
	_415_UNSUPPORTED_MEDIA_TYPE          HttpStatus = "415 UNSUPPORTED_MEDIA_TYPE"
	_416_REQUESTED_RANGE_NOT_SATISFIABLE HttpStatus = "416 REQUESTED_RANGE_NOT_SATISFIABLE"
	_417_EXPECTATION_FAILED              HttpStatus = "417 EXPECTATION_FAILED"
	_418_I_AM_A_TEAPOT                   HttpStatus = "418 I_AM_A_TEAPOT"
	_419_INSUFFICIENT_SPACE_ON_RESOURCE  HttpStatus = "419 INSUFFICIENT_SPACE_ON_RESOURCE"
	_420_METHOD_FAILURE                  HttpStatus = "420 METHOD_FAILURE"
	_421_DESTINATION_LOCKED              HttpStatus = "421 DESTINATION_LOCKED"
	_422_UNPROCESSABLE_ENTITY            HttpStatus = "422 UNPROCESSABLE_ENTITY"
	_423_LOCKED                          HttpStatus = "423 LOCKED"
	_424_FAILED_DEPENDENCY               HttpStatus = "424 FAILED_DEPENDENCY"
	_425_TOO_EARLY                       HttpStatus = "425 TOO_EARLY"
	_426_UPGRADE_REQUIRED                HttpStatus = "426 UPGRADE_REQUIRED"
	_428_PRECONDITION_REQUIRED           HttpStatus = "428 PRECONDITION_REQUIRED"
	_429_TOO_MANY_REQUESTS               HttpStatus = "429 TOO_MANY_REQUESTS"
	_431_REQUEST_HEADER_FIELDS_TOO_LARGE HttpStatus = "431 REQUEST_HEADER_FIELDS_TOO_LARGE"
	_451_UNAVAILABLE_FOR_LEGAL_REASONS   HttpStatus = "451 UNAVAILABLE_FOR_LEGAL_REASONS"
	_500_INTERNAL_SERVER_ERROR           HttpStatus = "500 INTERNAL_SERVER_ERROR"
	_501_NOT_IMPLEMENTED                 HttpStatus = "501 NOT_IMPLEMENTED"
	_502_BAD_GATEWAY                     HttpStatus = "502 BAD_GATEWAY"
	_503_SERVICE_UNAVAILABLE             HttpStatus = "503 SERVICE_UNAVAILABLE"
	_504_GATEWAY_TIMEOUT                 HttpStatus = "504 GATEWAY_TIMEOUT"
	_505_HTTP_VERSION_NOT_SUPPORTED      HttpStatus = "505 HTTP_VERSION_NOT_SUPPORTED"
	_506_VARIANT_ALSO_NEGOTIATES         HttpStatus = "506 VARIANT_ALSO_NEGOTIATES"
	_507_INSUFFICIENT_STORAGE            HttpStatus = "507 INSUFFICIENT_STORAGE"
	_508_LOOP_DETECTED                   HttpStatus = "508 LOOP_DETECTED"
	_509_BANDWIDTH_LIMIT_EXCEEDED        HttpStatus = "509 BANDWIDTH_LIMIT_EXCEEDED"
	_510_NOT_EXTENDED                    HttpStatus = "510 NOT_EXTENDED"
	_511_NETWORK_AUTHENTICATION_REQUIRED HttpStatus = "511 NETWORK_AUTHENTICATION_REQUIRED"
)

// All allowed values of HttpStatus enum
var AllowedHttpStatusEnumValues = []HttpStatus{
	"100 CONTINUE",
	"101 SWITCHING_PROTOCOLS",
	"102 PROCESSING",
	"103 EARLY_HINTS",
	"103 CHECKPOINT",
	"200 OK",
	"201 CREATED",
	"202 ACCEPTED",
	"203 NON_AUTHORITATIVE_INFORMATION",
	"204 NO_CONTENT",
	"205 RESET_CONTENT",
	"206 PARTIAL_CONTENT",
	"207 MULTI_STATUS",
	"208 ALREADY_REPORTED",
	"226 IM_USED",
	"300 MULTIPLE_CHOICES",
	"301 MOVED_PERMANENTLY",
	"302 FOUND",
	"302 MOVED_TEMPORARILY",
	"303 SEE_OTHER",
	"304 NOT_MODIFIED",
	"305 USE_PROXY",
	"307 TEMPORARY_REDIRECT",
	"308 PERMANENT_REDIRECT",
	"400 BAD_REQUEST",
	"401 UNAUTHORIZED",
	"402 PAYMENT_REQUIRED",
	"403 FORBIDDEN",
	"404 NOT_FOUND",
	"405 METHOD_NOT_ALLOWED",
	"406 NOT_ACCEPTABLE",
	"407 PROXY_AUTHENTICATION_REQUIRED",
	"408 REQUEST_TIMEOUT",
	"409 CONFLICT",
	"410 GONE",
	"411 LENGTH_REQUIRED",
	"412 PRECONDITION_FAILED",
	"413 PAYLOAD_TOO_LARGE",
	"413 REQUEST_ENTITY_TOO_LARGE",
	"414 URI_TOO_LONG",
	"414 REQUEST_URI_TOO_LONG",
	"415 UNSUPPORTED_MEDIA_TYPE",
	"416 REQUESTED_RANGE_NOT_SATISFIABLE",
	"417 EXPECTATION_FAILED",
	"418 I_AM_A_TEAPOT",
	"419 INSUFFICIENT_SPACE_ON_RESOURCE",
	"420 METHOD_FAILURE",
	"421 DESTINATION_LOCKED",
	"422 UNPROCESSABLE_ENTITY",
	"423 LOCKED",
	"424 FAILED_DEPENDENCY",
	"425 TOO_EARLY",
	"426 UPGRADE_REQUIRED",
	"428 PRECONDITION_REQUIRED",
	"429 TOO_MANY_REQUESTS",
	"431 REQUEST_HEADER_FIELDS_TOO_LARGE",
	"451 UNAVAILABLE_FOR_LEGAL_REASONS",
	"500 INTERNAL_SERVER_ERROR",
	"501 NOT_IMPLEMENTED",
	"502 BAD_GATEWAY",
	"503 SERVICE_UNAVAILABLE",
	"504 GATEWAY_TIMEOUT",
	"505 HTTP_VERSION_NOT_SUPPORTED",
	"506 VARIANT_ALSO_NEGOTIATES",
	"507 INSUFFICIENT_STORAGE",
	"508 LOOP_DETECTED",
	"509 BANDWIDTH_LIMIT_EXCEEDED",
	"510 NOT_EXTENDED",
	"511 NETWORK_AUTHENTICATION_REQUIRED",
}

func (v *HttpStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HttpStatus(value)
	for _, existing := range AllowedHttpStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HttpStatus", value)
}

// NewHttpStatusFromValue returns a pointer to a valid HttpStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHttpStatusFromValue(v string) (*HttpStatus, error) {
	ev := HttpStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HttpStatus: valid values are %v", v, AllowedHttpStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HttpStatus) IsValid() bool {
	for _, existing := range AllowedHttpStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HttpStatus value
func (v HttpStatus) Ptr() *HttpStatus {
	return &v
}

type NullableHttpStatus struct {
	value *HttpStatus
	isSet bool
}

func (v NullableHttpStatus) Get() *HttpStatus {
	return v.value
}

func (v *NullableHttpStatus) Set(val *HttpStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpStatus(val *HttpStatus) *NullableHttpStatus {
	return &NullableHttpStatus{value: val, isSet: true}
}

func (v NullableHttpStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
