/*
Asserts, Inc

Asserts Public API

API version: 1.0.0
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the AlertManagerTimeInterval type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertManagerTimeInterval{}

// AlertManagerTimeInterval struct for AlertManagerTimeInterval
type AlertManagerTimeInterval struct {
	Times                []string `json:"times,omitempty"`
	Weekdays             []string `json:"weekdays,omitempty"`
	Months               []string `json:"months,omitempty"`
	Years                []string `json:"years,omitempty"`
	Location             *string  `json:"location,omitempty"`
	DaysOfMonth          []string `json:"days_of_month,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AlertManagerTimeInterval AlertManagerTimeInterval

// NewAlertManagerTimeInterval instantiates a new AlertManagerTimeInterval object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertManagerTimeInterval() *AlertManagerTimeInterval {
	this := AlertManagerTimeInterval{}
	return &this
}

// NewAlertManagerTimeIntervalWithDefaults instantiates a new AlertManagerTimeInterval object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertManagerTimeIntervalWithDefaults() *AlertManagerTimeInterval {
	this := AlertManagerTimeInterval{}
	return &this
}

// GetTimes returns the Times field value if set, zero value otherwise.
func (o *AlertManagerTimeInterval) GetTimes() []string {
	if o == nil || IsNil(o.Times) {
		var ret []string
		return ret
	}
	return o.Times
}

// GetTimesOk returns a tuple with the Times field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerTimeInterval) GetTimesOk() ([]string, bool) {
	if o == nil || IsNil(o.Times) {
		return nil, false
	}
	return o.Times, true
}

// HasTimes returns a boolean if a field has been set.
func (o *AlertManagerTimeInterval) HasTimes() bool {
	if o != nil && !IsNil(o.Times) {
		return true
	}

	return false
}

// SetTimes gets a reference to the given []string and assigns it to the Times field.
func (o *AlertManagerTimeInterval) SetTimes(v []string) {
	o.Times = v
}

// GetWeekdays returns the Weekdays field value if set, zero value otherwise.
func (o *AlertManagerTimeInterval) GetWeekdays() []string {
	if o == nil || IsNil(o.Weekdays) {
		var ret []string
		return ret
	}
	return o.Weekdays
}

// GetWeekdaysOk returns a tuple with the Weekdays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerTimeInterval) GetWeekdaysOk() ([]string, bool) {
	if o == nil || IsNil(o.Weekdays) {
		return nil, false
	}
	return o.Weekdays, true
}

// HasWeekdays returns a boolean if a field has been set.
func (o *AlertManagerTimeInterval) HasWeekdays() bool {
	if o != nil && !IsNil(o.Weekdays) {
		return true
	}

	return false
}

// SetWeekdays gets a reference to the given []string and assigns it to the Weekdays field.
func (o *AlertManagerTimeInterval) SetWeekdays(v []string) {
	o.Weekdays = v
}

// GetMonths returns the Months field value if set, zero value otherwise.
func (o *AlertManagerTimeInterval) GetMonths() []string {
	if o == nil || IsNil(o.Months) {
		var ret []string
		return ret
	}
	return o.Months
}

// GetMonthsOk returns a tuple with the Months field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerTimeInterval) GetMonthsOk() ([]string, bool) {
	if o == nil || IsNil(o.Months) {
		return nil, false
	}
	return o.Months, true
}

// HasMonths returns a boolean if a field has been set.
func (o *AlertManagerTimeInterval) HasMonths() bool {
	if o != nil && !IsNil(o.Months) {
		return true
	}

	return false
}

// SetMonths gets a reference to the given []string and assigns it to the Months field.
func (o *AlertManagerTimeInterval) SetMonths(v []string) {
	o.Months = v
}

// GetYears returns the Years field value if set, zero value otherwise.
func (o *AlertManagerTimeInterval) GetYears() []string {
	if o == nil || IsNil(o.Years) {
		var ret []string
		return ret
	}
	return o.Years
}

// GetYearsOk returns a tuple with the Years field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerTimeInterval) GetYearsOk() ([]string, bool) {
	if o == nil || IsNil(o.Years) {
		return nil, false
	}
	return o.Years, true
}

// HasYears returns a boolean if a field has been set.
func (o *AlertManagerTimeInterval) HasYears() bool {
	if o != nil && !IsNil(o.Years) {
		return true
	}

	return false
}

// SetYears gets a reference to the given []string and assigns it to the Years field.
func (o *AlertManagerTimeInterval) SetYears(v []string) {
	o.Years = v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *AlertManagerTimeInterval) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerTimeInterval) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *AlertManagerTimeInterval) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *AlertManagerTimeInterval) SetLocation(v string) {
	o.Location = &v
}

// GetDaysOfMonth returns the DaysOfMonth field value if set, zero value otherwise.
func (o *AlertManagerTimeInterval) GetDaysOfMonth() []string {
	if o == nil || IsNil(o.DaysOfMonth) {
		var ret []string
		return ret
	}
	return o.DaysOfMonth
}

// GetDaysOfMonthOk returns a tuple with the DaysOfMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerTimeInterval) GetDaysOfMonthOk() ([]string, bool) {
	if o == nil || IsNil(o.DaysOfMonth) {
		return nil, false
	}
	return o.DaysOfMonth, true
}

// HasDaysOfMonth returns a boolean if a field has been set.
func (o *AlertManagerTimeInterval) HasDaysOfMonth() bool {
	if o != nil && !IsNil(o.DaysOfMonth) {
		return true
	}

	return false
}

// SetDaysOfMonth gets a reference to the given []string and assigns it to the DaysOfMonth field.
func (o *AlertManagerTimeInterval) SetDaysOfMonth(v []string) {
	o.DaysOfMonth = v
}

func (o AlertManagerTimeInterval) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertManagerTimeInterval) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Times) {
		toSerialize["times"] = o.Times
	}
	if !IsNil(o.Weekdays) {
		toSerialize["weekdays"] = o.Weekdays
	}
	if !IsNil(o.Months) {
		toSerialize["months"] = o.Months
	}
	if !IsNil(o.Years) {
		toSerialize["years"] = o.Years
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.DaysOfMonth) {
		toSerialize["days_of_month"] = o.DaysOfMonth
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AlertManagerTimeInterval) UnmarshalJSON(data []byte) (err error) {
	varAlertManagerTimeInterval := _AlertManagerTimeInterval{}

	err = json.Unmarshal(data, &varAlertManagerTimeInterval)

	if err != nil {
		return err
	}

	*o = AlertManagerTimeInterval(varAlertManagerTimeInterval)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "times")
		delete(additionalProperties, "weekdays")
		delete(additionalProperties, "months")
		delete(additionalProperties, "years")
		delete(additionalProperties, "location")
		delete(additionalProperties, "days_of_month")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAlertManagerTimeInterval struct {
	value *AlertManagerTimeInterval
	isSet bool
}

func (v NullableAlertManagerTimeInterval) Get() *AlertManagerTimeInterval {
	return v.value
}

func (v *NullableAlertManagerTimeInterval) Set(val *AlertManagerTimeInterval) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertManagerTimeInterval) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertManagerTimeInterval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertManagerTimeInterval(val *AlertManagerTimeInterval) *NullableAlertManagerTimeInterval {
	return &NullableAlertManagerTimeInterval{value: val, isSet: true}
}

func (v NullableAlertManagerTimeInterval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertManagerTimeInterval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
