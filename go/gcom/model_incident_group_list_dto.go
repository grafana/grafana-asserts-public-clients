/*
Asserts, Inc

Asserts Public API

API version: 2025.08.25-143403
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the IncidentGroupListDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IncidentGroupListDto{}

// IncidentGroupListDto struct for IncidentGroupListDto
type IncidentGroupListDto struct {
	IncidentGroups       []IncidentGroupDto `json:"incidentGroups,omitempty"`
	ChartName            *string            `json:"chartName,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IncidentGroupListDto IncidentGroupListDto

// NewIncidentGroupListDto instantiates a new IncidentGroupListDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncidentGroupListDto() *IncidentGroupListDto {
	this := IncidentGroupListDto{}
	return &this
}

// NewIncidentGroupListDtoWithDefaults instantiates a new IncidentGroupListDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentGroupListDtoWithDefaults() *IncidentGroupListDto {
	this := IncidentGroupListDto{}
	return &this
}

// GetIncidentGroups returns the IncidentGroups field value if set, zero value otherwise.
func (o *IncidentGroupListDto) GetIncidentGroups() []IncidentGroupDto {
	if o == nil || IsNil(o.IncidentGroups) {
		var ret []IncidentGroupDto
		return ret
	}
	return o.IncidentGroups
}

// GetIncidentGroupsOk returns a tuple with the IncidentGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentGroupListDto) GetIncidentGroupsOk() ([]IncidentGroupDto, bool) {
	if o == nil || IsNil(o.IncidentGroups) {
		return nil, false
	}
	return o.IncidentGroups, true
}

// HasIncidentGroups returns a boolean if a field has been set.
func (o *IncidentGroupListDto) HasIncidentGroups() bool {
	if o != nil && !IsNil(o.IncidentGroups) {
		return true
	}

	return false
}

// SetIncidentGroups gets a reference to the given []IncidentGroupDto and assigns it to the IncidentGroups field.
func (o *IncidentGroupListDto) SetIncidentGroups(v []IncidentGroupDto) {
	o.IncidentGroups = v
}

// GetChartName returns the ChartName field value if set, zero value otherwise.
func (o *IncidentGroupListDto) GetChartName() string {
	if o == nil || IsNil(o.ChartName) {
		var ret string
		return ret
	}
	return *o.ChartName
}

// GetChartNameOk returns a tuple with the ChartName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentGroupListDto) GetChartNameOk() (*string, bool) {
	if o == nil || IsNil(o.ChartName) {
		return nil, false
	}
	return o.ChartName, true
}

// HasChartName returns a boolean if a field has been set.
func (o *IncidentGroupListDto) HasChartName() bool {
	if o != nil && !IsNil(o.ChartName) {
		return true
	}

	return false
}

// SetChartName gets a reference to the given string and assigns it to the ChartName field.
func (o *IncidentGroupListDto) SetChartName(v string) {
	o.ChartName = &v
}

func (o IncidentGroupListDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IncidentGroupListDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IncidentGroups) {
		toSerialize["incidentGroups"] = o.IncidentGroups
	}
	if !IsNil(o.ChartName) {
		toSerialize["chartName"] = o.ChartName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IncidentGroupListDto) UnmarshalJSON(data []byte) (err error) {
	varIncidentGroupListDto := _IncidentGroupListDto{}

	err = json.Unmarshal(data, &varIncidentGroupListDto)

	if err != nil {
		return err
	}

	*o = IncidentGroupListDto(varIncidentGroupListDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "incidentGroups")
		delete(additionalProperties, "chartName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIncidentGroupListDto struct {
	value *IncidentGroupListDto
	isSet bool
}

func (v NullableIncidentGroupListDto) Get() *IncidentGroupListDto {
	return v.value
}

func (v *NullableIncidentGroupListDto) Set(val *IncidentGroupListDto) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentGroupListDto) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentGroupListDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentGroupListDto(val *IncidentGroupListDto) *NullableIncidentGroupListDto {
	return &NullableIncidentGroupListDto{value: val, isSet: true}
}

func (v NullableIncidentGroupListDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentGroupListDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
