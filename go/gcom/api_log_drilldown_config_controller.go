/*
Asserts, Inc

Asserts Public API

API version: 2025.08.25-143403
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// LogDrilldownConfigControllerAPIService LogDrilldownConfigControllerAPI service
type LogDrilldownConfigControllerAPIService service

type ApiDeleteConfigRequest struct {
	ctx         context.Context
	ApiService  *LogDrilldownConfigControllerAPIService
	name        string
	xScopeOrgID *string
}

// Grafana Tenant/Stack ID
func (r ApiDeleteConfigRequest) XScopeOrgID(xScopeOrgID string) ApiDeleteConfigRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiDeleteConfigRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteConfigExecute(r)
}

/*
DeleteConfig Delete log drilldown configuration

Deletes the specified log drilldown configuration entry for the tenant

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of the log configuration to delete
	@return ApiDeleteConfigRequest
*/
func (a *LogDrilldownConfigControllerAPIService) DeleteConfig(ctx context.Context, name string) ApiDeleteConfigRequest {
	return ApiDeleteConfigRequest{
		ApiService: a,
		ctx:        ctx,
		name:       name,
	}
}

// Execute executes the request
func (a *LogDrilldownConfigControllerAPIService) DeleteConfigExecute(r ApiDeleteConfigRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogDrilldownConfigControllerAPIService.DeleteConfig")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/config/log/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetTenantLogConfigRequest struct {
	ctx         context.Context
	ApiService  *LogDrilldownConfigControllerAPIService
	xScopeOrgID *string
}

// Grafana Tenant/Stack ID
func (r ApiGetTenantLogConfigRequest) XScopeOrgID(xScopeOrgID string) ApiGetTenantLogConfigRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiGetTenantLogConfigRequest) Execute() (*TenantLogConfigResponseDto, *http.Response, error) {
	return r.ApiService.GetTenantLogConfigExecute(r)
}

/*
GetTenantLogConfig Get tenant log configuration

Retrieves all the log drilldown configuration entries for the tenant

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetTenantLogConfigRequest
*/
func (a *LogDrilldownConfigControllerAPIService) GetTenantLogConfig(ctx context.Context) ApiGetTenantLogConfigRequest {
	return ApiGetTenantLogConfigRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return TenantLogConfigResponseDto
func (a *LogDrilldownConfigControllerAPIService) GetTenantLogConfigExecute(r ApiGetTenantLogConfigRequest) (*TenantLogConfigResponseDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TenantLogConfigResponseDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogDrilldownConfigControllerAPIService.GetTenantLogConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/config/log"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpsertLogDrilldownConfigRequest struct {
	ctx                   context.Context
	ApiService            *LogDrilldownConfigControllerAPIService
	logDrilldownConfigDto *LogDrilldownConfigDto
	xScopeOrgID           *string
}

func (r ApiUpsertLogDrilldownConfigRequest) LogDrilldownConfigDto(logDrilldownConfigDto LogDrilldownConfigDto) ApiUpsertLogDrilldownConfigRequest {
	r.logDrilldownConfigDto = &logDrilldownConfigDto
	return r
}

// Grafana Tenant/Stack ID
func (r ApiUpsertLogDrilldownConfigRequest) XScopeOrgID(xScopeOrgID string) ApiUpsertLogDrilldownConfigRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiUpsertLogDrilldownConfigRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpsertLogDrilldownConfigExecute(r)
}

/*
UpsertLogDrilldownConfig Upsert log drilldown configuration

Creates or updates the log drilldown configuration entry for the tenant

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiUpsertLogDrilldownConfigRequest
*/
func (a *LogDrilldownConfigControllerAPIService) UpsertLogDrilldownConfig(ctx context.Context) ApiUpsertLogDrilldownConfigRequest {
	return ApiUpsertLogDrilldownConfigRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *LogDrilldownConfigControllerAPIService) UpsertLogDrilldownConfigExecute(r ApiUpsertLogDrilldownConfigRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogDrilldownConfigControllerAPIService.UpsertLogDrilldownConfig")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/config/log"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.logDrilldownConfigDto == nil {
		return nil, reportError("logDrilldownConfigDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-yml", "application/x-yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/x-yml", "application/x-yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	// body params
	localVarPostBody = r.logDrilldownConfigDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
