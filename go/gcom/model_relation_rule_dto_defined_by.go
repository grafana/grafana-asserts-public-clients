/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-062139
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// RelationRuleDtoDefinedBy - struct for RelationRuleDtoDefinedBy
type RelationRuleDtoDefinedBy struct {
	DefinedByMetricsDto       *DefinedByMetricsDto
	DefinedByPropertyMatchDto *DefinedByPropertyMatchDto
}

// DefinedByMetricsDtoAsRelationRuleDtoDefinedBy is a convenience function that returns DefinedByMetricsDto wrapped in RelationRuleDtoDefinedBy
func DefinedByMetricsDtoAsRelationRuleDtoDefinedBy(v *DefinedByMetricsDto) RelationRuleDtoDefinedBy {
	return RelationRuleDtoDefinedBy{
		DefinedByMetricsDto: v,
	}
}

// DefinedByPropertyMatchDtoAsRelationRuleDtoDefinedBy is a convenience function that returns DefinedByPropertyMatchDto wrapped in RelationRuleDtoDefinedBy
func DefinedByPropertyMatchDtoAsRelationRuleDtoDefinedBy(v *DefinedByPropertyMatchDto) RelationRuleDtoDefinedBy {
	return RelationRuleDtoDefinedBy{
		DefinedByPropertyMatchDto: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *RelationRuleDtoDefinedBy) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DefinedByMetricsDto
	err = newStrictDecoder(data).Decode(&dst.DefinedByMetricsDto)
	if err == nil {
		jsonDefinedByMetricsDto, _ := json.Marshal(dst.DefinedByMetricsDto)
		if string(jsonDefinedByMetricsDto) == "{}" { // empty struct
			dst.DefinedByMetricsDto = nil
		} else {
			if err = validator.Validate(dst.DefinedByMetricsDto); err != nil {
				dst.DefinedByMetricsDto = nil
			} else {
				match++
			}
		}
	} else {
		dst.DefinedByMetricsDto = nil
	}

	// try to unmarshal data into DefinedByPropertyMatchDto
	err = newStrictDecoder(data).Decode(&dst.DefinedByPropertyMatchDto)
	if err == nil {
		jsonDefinedByPropertyMatchDto, _ := json.Marshal(dst.DefinedByPropertyMatchDto)
		if string(jsonDefinedByPropertyMatchDto) == "{}" { // empty struct
			dst.DefinedByPropertyMatchDto = nil
		} else {
			if err = validator.Validate(dst.DefinedByPropertyMatchDto); err != nil {
				dst.DefinedByPropertyMatchDto = nil
			} else {
				match++
			}
		}
	} else {
		dst.DefinedByPropertyMatchDto = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DefinedByMetricsDto = nil
		dst.DefinedByPropertyMatchDto = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RelationRuleDtoDefinedBy)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RelationRuleDtoDefinedBy)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RelationRuleDtoDefinedBy) MarshalJSON() ([]byte, error) {
	if src.DefinedByMetricsDto != nil {
		return json.Marshal(&src.DefinedByMetricsDto)
	}

	if src.DefinedByPropertyMatchDto != nil {
		return json.Marshal(&src.DefinedByPropertyMatchDto)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RelationRuleDtoDefinedBy) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DefinedByMetricsDto != nil {
		return obj.DefinedByMetricsDto
	}

	if obj.DefinedByPropertyMatchDto != nil {
		return obj.DefinedByPropertyMatchDto
	}

	// all schemas are nil
	return nil
}

type NullableRelationRuleDtoDefinedBy struct {
	value *RelationRuleDtoDefinedBy
	isSet bool
}

func (v NullableRelationRuleDtoDefinedBy) Get() *RelationRuleDtoDefinedBy {
	return v.value
}

func (v *NullableRelationRuleDtoDefinedBy) Set(val *RelationRuleDtoDefinedBy) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationRuleDtoDefinedBy) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationRuleDtoDefinedBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationRuleDtoDefinedBy(val *RelationRuleDtoDefinedBy) *NullableRelationRuleDtoDefinedBy {
	return &NullableRelationRuleDtoDefinedBy{value: val, isSet: true}
}

func (v NullableRelationRuleDtoDefinedBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationRuleDtoDefinedBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
