/*
Asserts, Inc

Asserts Public API

API version: 2025.08.07-125604
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the VersionedRulesPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionedRulesPayload{}

// VersionedRulesPayload struct for VersionedRulesPayload
type VersionedRulesPayload struct {
	Version              *string           `json:"version,omitempty"`
	Rules                []PrometheusRules `json:"rules,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VersionedRulesPayload VersionedRulesPayload

// NewVersionedRulesPayload instantiates a new VersionedRulesPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionedRulesPayload() *VersionedRulesPayload {
	this := VersionedRulesPayload{}
	return &this
}

// NewVersionedRulesPayloadWithDefaults instantiates a new VersionedRulesPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionedRulesPayloadWithDefaults() *VersionedRulesPayload {
	this := VersionedRulesPayload{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *VersionedRulesPayload) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedRulesPayload) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *VersionedRulesPayload) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *VersionedRulesPayload) SetVersion(v string) {
	o.Version = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *VersionedRulesPayload) GetRules() []PrometheusRules {
	if o == nil || IsNil(o.Rules) {
		var ret []PrometheusRules
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedRulesPayload) GetRulesOk() ([]PrometheusRules, bool) {
	if o == nil || IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *VersionedRulesPayload) HasRules() bool {
	if o != nil && !IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []PrometheusRules and assigns it to the Rules field.
func (o *VersionedRulesPayload) SetRules(v []PrometheusRules) {
	o.Rules = v
}

func (o VersionedRulesPayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionedRulesPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VersionedRulesPayload) UnmarshalJSON(data []byte) (err error) {
	varVersionedRulesPayload := _VersionedRulesPayload{}

	err = json.Unmarshal(data, &varVersionedRulesPayload)

	if err != nil {
		return err
	}

	*o = VersionedRulesPayload(varVersionedRulesPayload)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "version")
		delete(additionalProperties, "rules")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVersionedRulesPayload struct {
	value *VersionedRulesPayload
	isSet bool
}

func (v NullableVersionedRulesPayload) Get() *VersionedRulesPayload {
	return v.value
}

func (v *NullableVersionedRulesPayload) Set(val *VersionedRulesPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionedRulesPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionedRulesPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionedRulesPayload(val *VersionedRulesPayload) *NullableVersionedRulesPayload {
	return &NullableVersionedRulesPayload{value: val, isSet: true}
}

func (v NullableVersionedRulesPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionedRulesPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
