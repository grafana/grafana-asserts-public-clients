/*
Asserts, Inc

Asserts Public API

API version: 1.0.4
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the AMReceiverVictorOps type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AMReceiverVictorOps{}

// AMReceiverVictorOps struct for AMReceiverVictorOps
type AMReceiverVictorOps struct {
	SendResolved         *bool             `json:"send_resolved,omitempty"`
	ApiKey               *string           `json:"api_key,omitempty"`
	ApiKeyFile           *string           `json:"api_key_file,omitempty"`
	ApiUrl               *string           `json:"api_url,omitempty"`
	RoutingKey           *string           `json:"routing_key,omitempty"`
	MessageType          *string           `json:"message_type,omitempty"`
	EntityDisplayName    *string           `json:"entity_display_name,omitempty"`
	StateMessage         *string           `json:"state_message,omitempty"`
	MonitoringTool       *string           `json:"monitoring_tool,omitempty"`
	HttpConfig           *AlertManagerHttp `json:"http_config,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AMReceiverVictorOps AMReceiverVictorOps

// NewAMReceiverVictorOps instantiates a new AMReceiverVictorOps object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAMReceiverVictorOps() *AMReceiverVictorOps {
	this := AMReceiverVictorOps{}
	return &this
}

// NewAMReceiverVictorOpsWithDefaults instantiates a new AMReceiverVictorOps object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAMReceiverVictorOpsWithDefaults() *AMReceiverVictorOps {
	this := AMReceiverVictorOps{}
	return &this
}

// GetSendResolved returns the SendResolved field value if set, zero value otherwise.
func (o *AMReceiverVictorOps) GetSendResolved() bool {
	if o == nil || IsNil(o.SendResolved) {
		var ret bool
		return ret
	}
	return *o.SendResolved
}

// GetSendResolvedOk returns a tuple with the SendResolved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverVictorOps) GetSendResolvedOk() (*bool, bool) {
	if o == nil || IsNil(o.SendResolved) {
		return nil, false
	}
	return o.SendResolved, true
}

// HasSendResolved returns a boolean if a field has been set.
func (o *AMReceiverVictorOps) HasSendResolved() bool {
	if o != nil && !IsNil(o.SendResolved) {
		return true
	}

	return false
}

// SetSendResolved gets a reference to the given bool and assigns it to the SendResolved field.
func (o *AMReceiverVictorOps) SetSendResolved(v bool) {
	o.SendResolved = &v
}

// GetApiKey returns the ApiKey field value if set, zero value otherwise.
func (o *AMReceiverVictorOps) GetApiKey() string {
	if o == nil || IsNil(o.ApiKey) {
		var ret string
		return ret
	}
	return *o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverVictorOps) GetApiKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ApiKey) {
		return nil, false
	}
	return o.ApiKey, true
}

// HasApiKey returns a boolean if a field has been set.
func (o *AMReceiverVictorOps) HasApiKey() bool {
	if o != nil && !IsNil(o.ApiKey) {
		return true
	}

	return false
}

// SetApiKey gets a reference to the given string and assigns it to the ApiKey field.
func (o *AMReceiverVictorOps) SetApiKey(v string) {
	o.ApiKey = &v
}

// GetApiKeyFile returns the ApiKeyFile field value if set, zero value otherwise.
func (o *AMReceiverVictorOps) GetApiKeyFile() string {
	if o == nil || IsNil(o.ApiKeyFile) {
		var ret string
		return ret
	}
	return *o.ApiKeyFile
}

// GetApiKeyFileOk returns a tuple with the ApiKeyFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverVictorOps) GetApiKeyFileOk() (*string, bool) {
	if o == nil || IsNil(o.ApiKeyFile) {
		return nil, false
	}
	return o.ApiKeyFile, true
}

// HasApiKeyFile returns a boolean if a field has been set.
func (o *AMReceiverVictorOps) HasApiKeyFile() bool {
	if o != nil && !IsNil(o.ApiKeyFile) {
		return true
	}

	return false
}

// SetApiKeyFile gets a reference to the given string and assigns it to the ApiKeyFile field.
func (o *AMReceiverVictorOps) SetApiKeyFile(v string) {
	o.ApiKeyFile = &v
}

// GetApiUrl returns the ApiUrl field value if set, zero value otherwise.
func (o *AMReceiverVictorOps) GetApiUrl() string {
	if o == nil || IsNil(o.ApiUrl) {
		var ret string
		return ret
	}
	return *o.ApiUrl
}

// GetApiUrlOk returns a tuple with the ApiUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverVictorOps) GetApiUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ApiUrl) {
		return nil, false
	}
	return o.ApiUrl, true
}

// HasApiUrl returns a boolean if a field has been set.
func (o *AMReceiverVictorOps) HasApiUrl() bool {
	if o != nil && !IsNil(o.ApiUrl) {
		return true
	}

	return false
}

// SetApiUrl gets a reference to the given string and assigns it to the ApiUrl field.
func (o *AMReceiverVictorOps) SetApiUrl(v string) {
	o.ApiUrl = &v
}

// GetRoutingKey returns the RoutingKey field value if set, zero value otherwise.
func (o *AMReceiverVictorOps) GetRoutingKey() string {
	if o == nil || IsNil(o.RoutingKey) {
		var ret string
		return ret
	}
	return *o.RoutingKey
}

// GetRoutingKeyOk returns a tuple with the RoutingKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverVictorOps) GetRoutingKeyOk() (*string, bool) {
	if o == nil || IsNil(o.RoutingKey) {
		return nil, false
	}
	return o.RoutingKey, true
}

// HasRoutingKey returns a boolean if a field has been set.
func (o *AMReceiverVictorOps) HasRoutingKey() bool {
	if o != nil && !IsNil(o.RoutingKey) {
		return true
	}

	return false
}

// SetRoutingKey gets a reference to the given string and assigns it to the RoutingKey field.
func (o *AMReceiverVictorOps) SetRoutingKey(v string) {
	o.RoutingKey = &v
}

// GetMessageType returns the MessageType field value if set, zero value otherwise.
func (o *AMReceiverVictorOps) GetMessageType() string {
	if o == nil || IsNil(o.MessageType) {
		var ret string
		return ret
	}
	return *o.MessageType
}

// GetMessageTypeOk returns a tuple with the MessageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverVictorOps) GetMessageTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MessageType) {
		return nil, false
	}
	return o.MessageType, true
}

// HasMessageType returns a boolean if a field has been set.
func (o *AMReceiverVictorOps) HasMessageType() bool {
	if o != nil && !IsNil(o.MessageType) {
		return true
	}

	return false
}

// SetMessageType gets a reference to the given string and assigns it to the MessageType field.
func (o *AMReceiverVictorOps) SetMessageType(v string) {
	o.MessageType = &v
}

// GetEntityDisplayName returns the EntityDisplayName field value if set, zero value otherwise.
func (o *AMReceiverVictorOps) GetEntityDisplayName() string {
	if o == nil || IsNil(o.EntityDisplayName) {
		var ret string
		return ret
	}
	return *o.EntityDisplayName
}

// GetEntityDisplayNameOk returns a tuple with the EntityDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverVictorOps) GetEntityDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.EntityDisplayName) {
		return nil, false
	}
	return o.EntityDisplayName, true
}

// HasEntityDisplayName returns a boolean if a field has been set.
func (o *AMReceiverVictorOps) HasEntityDisplayName() bool {
	if o != nil && !IsNil(o.EntityDisplayName) {
		return true
	}

	return false
}

// SetEntityDisplayName gets a reference to the given string and assigns it to the EntityDisplayName field.
func (o *AMReceiverVictorOps) SetEntityDisplayName(v string) {
	o.EntityDisplayName = &v
}

// GetStateMessage returns the StateMessage field value if set, zero value otherwise.
func (o *AMReceiverVictorOps) GetStateMessage() string {
	if o == nil || IsNil(o.StateMessage) {
		var ret string
		return ret
	}
	return *o.StateMessage
}

// GetStateMessageOk returns a tuple with the StateMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverVictorOps) GetStateMessageOk() (*string, bool) {
	if o == nil || IsNil(o.StateMessage) {
		return nil, false
	}
	return o.StateMessage, true
}

// HasStateMessage returns a boolean if a field has been set.
func (o *AMReceiverVictorOps) HasStateMessage() bool {
	if o != nil && !IsNil(o.StateMessage) {
		return true
	}

	return false
}

// SetStateMessage gets a reference to the given string and assigns it to the StateMessage field.
func (o *AMReceiverVictorOps) SetStateMessage(v string) {
	o.StateMessage = &v
}

// GetMonitoringTool returns the MonitoringTool field value if set, zero value otherwise.
func (o *AMReceiverVictorOps) GetMonitoringTool() string {
	if o == nil || IsNil(o.MonitoringTool) {
		var ret string
		return ret
	}
	return *o.MonitoringTool
}

// GetMonitoringToolOk returns a tuple with the MonitoringTool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverVictorOps) GetMonitoringToolOk() (*string, bool) {
	if o == nil || IsNil(o.MonitoringTool) {
		return nil, false
	}
	return o.MonitoringTool, true
}

// HasMonitoringTool returns a boolean if a field has been set.
func (o *AMReceiverVictorOps) HasMonitoringTool() bool {
	if o != nil && !IsNil(o.MonitoringTool) {
		return true
	}

	return false
}

// SetMonitoringTool gets a reference to the given string and assigns it to the MonitoringTool field.
func (o *AMReceiverVictorOps) SetMonitoringTool(v string) {
	o.MonitoringTool = &v
}

// GetHttpConfig returns the HttpConfig field value if set, zero value otherwise.
func (o *AMReceiverVictorOps) GetHttpConfig() AlertManagerHttp {
	if o == nil || IsNil(o.HttpConfig) {
		var ret AlertManagerHttp
		return ret
	}
	return *o.HttpConfig
}

// GetHttpConfigOk returns a tuple with the HttpConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverVictorOps) GetHttpConfigOk() (*AlertManagerHttp, bool) {
	if o == nil || IsNil(o.HttpConfig) {
		return nil, false
	}
	return o.HttpConfig, true
}

// HasHttpConfig returns a boolean if a field has been set.
func (o *AMReceiverVictorOps) HasHttpConfig() bool {
	if o != nil && !IsNil(o.HttpConfig) {
		return true
	}

	return false
}

// SetHttpConfig gets a reference to the given AlertManagerHttp and assigns it to the HttpConfig field.
func (o *AMReceiverVictorOps) SetHttpConfig(v AlertManagerHttp) {
	o.HttpConfig = &v
}

func (o AMReceiverVictorOps) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AMReceiverVictorOps) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SendResolved) {
		toSerialize["send_resolved"] = o.SendResolved
	}
	if !IsNil(o.ApiKey) {
		toSerialize["api_key"] = o.ApiKey
	}
	if !IsNil(o.ApiKeyFile) {
		toSerialize["api_key_file"] = o.ApiKeyFile
	}
	if !IsNil(o.ApiUrl) {
		toSerialize["api_url"] = o.ApiUrl
	}
	if !IsNil(o.RoutingKey) {
		toSerialize["routing_key"] = o.RoutingKey
	}
	if !IsNil(o.MessageType) {
		toSerialize["message_type"] = o.MessageType
	}
	if !IsNil(o.EntityDisplayName) {
		toSerialize["entity_display_name"] = o.EntityDisplayName
	}
	if !IsNil(o.StateMessage) {
		toSerialize["state_message"] = o.StateMessage
	}
	if !IsNil(o.MonitoringTool) {
		toSerialize["monitoring_tool"] = o.MonitoringTool
	}
	if !IsNil(o.HttpConfig) {
		toSerialize["http_config"] = o.HttpConfig
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AMReceiverVictorOps) UnmarshalJSON(data []byte) (err error) {
	varAMReceiverVictorOps := _AMReceiverVictorOps{}

	err = json.Unmarshal(data, &varAMReceiverVictorOps)

	if err != nil {
		return err
	}

	*o = AMReceiverVictorOps(varAMReceiverVictorOps)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "send_resolved")
		delete(additionalProperties, "api_key")
		delete(additionalProperties, "api_key_file")
		delete(additionalProperties, "api_url")
		delete(additionalProperties, "routing_key")
		delete(additionalProperties, "message_type")
		delete(additionalProperties, "entity_display_name")
		delete(additionalProperties, "state_message")
		delete(additionalProperties, "monitoring_tool")
		delete(additionalProperties, "http_config")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAMReceiverVictorOps struct {
	value *AMReceiverVictorOps
	isSet bool
}

func (v NullableAMReceiverVictorOps) Get() *AMReceiverVictorOps {
	return v.value
}

func (v *NullableAMReceiverVictorOps) Set(val *AMReceiverVictorOps) {
	v.value = val
	v.isSet = true
}

func (v NullableAMReceiverVictorOps) IsSet() bool {
	return v.isSet
}

func (v *NullableAMReceiverVictorOps) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAMReceiverVictorOps(val *AMReceiverVictorOps) *NullableAMReceiverVictorOps {
	return &NullableAMReceiverVictorOps{value: val, isSet: true}
}

func (v NullableAMReceiverVictorOps) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAMReceiverVictorOps) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
