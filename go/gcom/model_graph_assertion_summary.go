/*
Asserts, Inc

Asserts Public API

API version: 2025.08.07-125604
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the GraphAssertionSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GraphAssertionSummary{}

// GraphAssertionSummary struct for GraphAssertionSummary
type GraphAssertionSummary struct {
	Severity             *string          `json:"severity,omitempty"`
	Amend                *bool            `json:"amend,omitempty"`
	Assertions           []GraphAssertion `json:"assertions,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GraphAssertionSummary GraphAssertionSummary

// NewGraphAssertionSummary instantiates a new GraphAssertionSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGraphAssertionSummary() *GraphAssertionSummary {
	this := GraphAssertionSummary{}
	return &this
}

// NewGraphAssertionSummaryWithDefaults instantiates a new GraphAssertionSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGraphAssertionSummaryWithDefaults() *GraphAssertionSummary {
	this := GraphAssertionSummary{}
	return &this
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *GraphAssertionSummary) GetSeverity() string {
	if o == nil || IsNil(o.Severity) {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphAssertionSummary) GetSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *GraphAssertionSummary) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *GraphAssertionSummary) SetSeverity(v string) {
	o.Severity = &v
}

// GetAmend returns the Amend field value if set, zero value otherwise.
func (o *GraphAssertionSummary) GetAmend() bool {
	if o == nil || IsNil(o.Amend) {
		var ret bool
		return ret
	}
	return *o.Amend
}

// GetAmendOk returns a tuple with the Amend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphAssertionSummary) GetAmendOk() (*bool, bool) {
	if o == nil || IsNil(o.Amend) {
		return nil, false
	}
	return o.Amend, true
}

// HasAmend returns a boolean if a field has been set.
func (o *GraphAssertionSummary) HasAmend() bool {
	if o != nil && !IsNil(o.Amend) {
		return true
	}

	return false
}

// SetAmend gets a reference to the given bool and assigns it to the Amend field.
func (o *GraphAssertionSummary) SetAmend(v bool) {
	o.Amend = &v
}

// GetAssertions returns the Assertions field value if set, zero value otherwise.
func (o *GraphAssertionSummary) GetAssertions() []GraphAssertion {
	if o == nil || IsNil(o.Assertions) {
		var ret []GraphAssertion
		return ret
	}
	return o.Assertions
}

// GetAssertionsOk returns a tuple with the Assertions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphAssertionSummary) GetAssertionsOk() ([]GraphAssertion, bool) {
	if o == nil || IsNil(o.Assertions) {
		return nil, false
	}
	return o.Assertions, true
}

// HasAssertions returns a boolean if a field has been set.
func (o *GraphAssertionSummary) HasAssertions() bool {
	if o != nil && !IsNil(o.Assertions) {
		return true
	}

	return false
}

// SetAssertions gets a reference to the given []GraphAssertion and assigns it to the Assertions field.
func (o *GraphAssertionSummary) SetAssertions(v []GraphAssertion) {
	o.Assertions = v
}

func (o GraphAssertionSummary) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GraphAssertionSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	if !IsNil(o.Amend) {
		toSerialize["amend"] = o.Amend
	}
	if !IsNil(o.Assertions) {
		toSerialize["assertions"] = o.Assertions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GraphAssertionSummary) UnmarshalJSON(data []byte) (err error) {
	varGraphAssertionSummary := _GraphAssertionSummary{}

	err = json.Unmarshal(data, &varGraphAssertionSummary)

	if err != nil {
		return err
	}

	*o = GraphAssertionSummary(varGraphAssertionSummary)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "severity")
		delete(additionalProperties, "amend")
		delete(additionalProperties, "assertions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGraphAssertionSummary struct {
	value *GraphAssertionSummary
	isSet bool
}

func (v NullableGraphAssertionSummary) Get() *GraphAssertionSummary {
	return v.value
}

func (v *NullableGraphAssertionSummary) Set(val *GraphAssertionSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableGraphAssertionSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableGraphAssertionSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGraphAssertionSummary(val *GraphAssertionSummary) *NullableGraphAssertionSummary {
	return &NullableGraphAssertionSummary{value: val, isSet: true}
}

func (v NullableGraphAssertionSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGraphAssertionSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
