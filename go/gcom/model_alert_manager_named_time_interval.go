/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-084942
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the AlertManagerNamedTimeInterval type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertManagerNamedTimeInterval{}

// AlertManagerNamedTimeInterval struct for AlertManagerNamedTimeInterval
type AlertManagerNamedTimeInterval struct {
	Name                 *string                    `json:"name,omitempty"`
	TimeIntervals        []AlertManagerTimeInterval `json:"time_intervals,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AlertManagerNamedTimeInterval AlertManagerNamedTimeInterval

// NewAlertManagerNamedTimeInterval instantiates a new AlertManagerNamedTimeInterval object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertManagerNamedTimeInterval() *AlertManagerNamedTimeInterval {
	this := AlertManagerNamedTimeInterval{}
	return &this
}

// NewAlertManagerNamedTimeIntervalWithDefaults instantiates a new AlertManagerNamedTimeInterval object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertManagerNamedTimeIntervalWithDefaults() *AlertManagerNamedTimeInterval {
	this := AlertManagerNamedTimeInterval{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AlertManagerNamedTimeInterval) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerNamedTimeInterval) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AlertManagerNamedTimeInterval) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AlertManagerNamedTimeInterval) SetName(v string) {
	o.Name = &v
}

// GetTimeIntervals returns the TimeIntervals field value if set, zero value otherwise.
func (o *AlertManagerNamedTimeInterval) GetTimeIntervals() []AlertManagerTimeInterval {
	if o == nil || IsNil(o.TimeIntervals) {
		var ret []AlertManagerTimeInterval
		return ret
	}
	return o.TimeIntervals
}

// GetTimeIntervalsOk returns a tuple with the TimeIntervals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerNamedTimeInterval) GetTimeIntervalsOk() ([]AlertManagerTimeInterval, bool) {
	if o == nil || IsNil(o.TimeIntervals) {
		return nil, false
	}
	return o.TimeIntervals, true
}

// HasTimeIntervals returns a boolean if a field has been set.
func (o *AlertManagerNamedTimeInterval) HasTimeIntervals() bool {
	if o != nil && !IsNil(o.TimeIntervals) {
		return true
	}

	return false
}

// SetTimeIntervals gets a reference to the given []AlertManagerTimeInterval and assigns it to the TimeIntervals field.
func (o *AlertManagerNamedTimeInterval) SetTimeIntervals(v []AlertManagerTimeInterval) {
	o.TimeIntervals = v
}

func (o AlertManagerNamedTimeInterval) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertManagerNamedTimeInterval) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.TimeIntervals) {
		toSerialize["time_intervals"] = o.TimeIntervals
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AlertManagerNamedTimeInterval) UnmarshalJSON(data []byte) (err error) {
	varAlertManagerNamedTimeInterval := _AlertManagerNamedTimeInterval{}

	err = json.Unmarshal(data, &varAlertManagerNamedTimeInterval)

	if err != nil {
		return err
	}

	*o = AlertManagerNamedTimeInterval(varAlertManagerNamedTimeInterval)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "time_intervals")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAlertManagerNamedTimeInterval struct {
	value *AlertManagerNamedTimeInterval
	isSet bool
}

func (v NullableAlertManagerNamedTimeInterval) Get() *AlertManagerNamedTimeInterval {
	return v.value
}

func (v *NullableAlertManagerNamedTimeInterval) Set(val *AlertManagerNamedTimeInterval) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertManagerNamedTimeInterval) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertManagerNamedTimeInterval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertManagerNamedTimeInterval(val *AlertManagerNamedTimeInterval) *NullableAlertManagerNamedTimeInterval {
	return &NullableAlertManagerNamedTimeInterval{value: val, isSet: true}
}

func (v NullableAlertManagerNamedTimeInterval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertManagerNamedTimeInterval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
