/*
Asserts, Inc

Asserts Public API

API version: 2025.09.11-132913
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the EntityRuleDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntityRuleDto{}

// EntityRuleDto struct for EntityRuleDto
type EntityRuleDto struct {
	Type                 *string           `json:"type,omitempty"`
	Name                 *string           `json:"name,omitempty"`
	Scope                map[string]string `json:"scope,omitempty"`
	Lookup               map[string]string `json:"lookup,omitempty"`
	DefinedBy            []PropertyRuleDto `json:"definedBy,omitempty"`
	EnrichedBy           []PropertyRuleDto `json:"enrichedBy,omitempty"`
	Disabled             *bool             `json:"disabled,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EntityRuleDto EntityRuleDto

// NewEntityRuleDto instantiates a new EntityRuleDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityRuleDto() *EntityRuleDto {
	this := EntityRuleDto{}
	return &this
}

// NewEntityRuleDtoWithDefaults instantiates a new EntityRuleDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityRuleDtoWithDefaults() *EntityRuleDto {
	this := EntityRuleDto{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EntityRuleDto) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityRuleDto) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EntityRuleDto) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EntityRuleDto) SetType(v string) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EntityRuleDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityRuleDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EntityRuleDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EntityRuleDto) SetName(v string) {
	o.Name = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *EntityRuleDto) GetScope() map[string]string {
	if o == nil || IsNil(o.Scope) {
		var ret map[string]string
		return ret
	}
	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityRuleDto) GetScopeOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Scope) {
		return map[string]string{}, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *EntityRuleDto) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given map[string]string and assigns it to the Scope field.
func (o *EntityRuleDto) SetScope(v map[string]string) {
	o.Scope = v
}

// GetLookup returns the Lookup field value if set, zero value otherwise.
func (o *EntityRuleDto) GetLookup() map[string]string {
	if o == nil || IsNil(o.Lookup) {
		var ret map[string]string
		return ret
	}
	return o.Lookup
}

// GetLookupOk returns a tuple with the Lookup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityRuleDto) GetLookupOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Lookup) {
		return map[string]string{}, false
	}
	return o.Lookup, true
}

// HasLookup returns a boolean if a field has been set.
func (o *EntityRuleDto) HasLookup() bool {
	if o != nil && !IsNil(o.Lookup) {
		return true
	}

	return false
}

// SetLookup gets a reference to the given map[string]string and assigns it to the Lookup field.
func (o *EntityRuleDto) SetLookup(v map[string]string) {
	o.Lookup = v
}

// GetDefinedBy returns the DefinedBy field value if set, zero value otherwise.
func (o *EntityRuleDto) GetDefinedBy() []PropertyRuleDto {
	if o == nil || IsNil(o.DefinedBy) {
		var ret []PropertyRuleDto
		return ret
	}
	return o.DefinedBy
}

// GetDefinedByOk returns a tuple with the DefinedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityRuleDto) GetDefinedByOk() ([]PropertyRuleDto, bool) {
	if o == nil || IsNil(o.DefinedBy) {
		return nil, false
	}
	return o.DefinedBy, true
}

// HasDefinedBy returns a boolean if a field has been set.
func (o *EntityRuleDto) HasDefinedBy() bool {
	if o != nil && !IsNil(o.DefinedBy) {
		return true
	}

	return false
}

// SetDefinedBy gets a reference to the given []PropertyRuleDto and assigns it to the DefinedBy field.
func (o *EntityRuleDto) SetDefinedBy(v []PropertyRuleDto) {
	o.DefinedBy = v
}

// GetEnrichedBy returns the EnrichedBy field value if set, zero value otherwise.
func (o *EntityRuleDto) GetEnrichedBy() []PropertyRuleDto {
	if o == nil || IsNil(o.EnrichedBy) {
		var ret []PropertyRuleDto
		return ret
	}
	return o.EnrichedBy
}

// GetEnrichedByOk returns a tuple with the EnrichedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityRuleDto) GetEnrichedByOk() ([]PropertyRuleDto, bool) {
	if o == nil || IsNil(o.EnrichedBy) {
		return nil, false
	}
	return o.EnrichedBy, true
}

// HasEnrichedBy returns a boolean if a field has been set.
func (o *EntityRuleDto) HasEnrichedBy() bool {
	if o != nil && !IsNil(o.EnrichedBy) {
		return true
	}

	return false
}

// SetEnrichedBy gets a reference to the given []PropertyRuleDto and assigns it to the EnrichedBy field.
func (o *EntityRuleDto) SetEnrichedBy(v []PropertyRuleDto) {
	o.EnrichedBy = v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *EntityRuleDto) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityRuleDto) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *EntityRuleDto) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *EntityRuleDto) SetDisabled(v bool) {
	o.Disabled = &v
}

func (o EntityRuleDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntityRuleDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.Lookup) {
		toSerialize["lookup"] = o.Lookup
	}
	if !IsNil(o.DefinedBy) {
		toSerialize["definedBy"] = o.DefinedBy
	}
	if !IsNil(o.EnrichedBy) {
		toSerialize["enrichedBy"] = o.EnrichedBy
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EntityRuleDto) UnmarshalJSON(data []byte) (err error) {
	varEntityRuleDto := _EntityRuleDto{}

	err = json.Unmarshal(data, &varEntityRuleDto)

	if err != nil {
		return err
	}

	*o = EntityRuleDto(varEntityRuleDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "scope")
		delete(additionalProperties, "lookup")
		delete(additionalProperties, "definedBy")
		delete(additionalProperties, "enrichedBy")
		delete(additionalProperties, "disabled")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEntityRuleDto struct {
	value *EntityRuleDto
	isSet bool
}

func (v NullableEntityRuleDto) Get() *EntityRuleDto {
	return v.value
}

func (v *NullableEntityRuleDto) Set(val *EntityRuleDto) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityRuleDto) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityRuleDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityRuleDto(val *EntityRuleDto) *NullableEntityRuleDto {
	return &NullableEntityRuleDto{value: val, isSet: true}
}

func (v NullableEntityRuleDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityRuleDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
