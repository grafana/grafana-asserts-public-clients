/*
Asserts, Inc

Asserts Public API

API version: 1.0.0
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the PropertyMatcherDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PropertyMatcherDto{}

// PropertyMatcherDto struct for PropertyMatcherDto
type PropertyMatcherDto struct {
	Name                 string      `json:"name"`
	Value                interface{} `json:"value,omitempty"`
	Op                   string      `json:"op"`
	Uom                  *string     `json:"uom,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PropertyMatcherDto PropertyMatcherDto

// NewPropertyMatcherDto instantiates a new PropertyMatcherDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPropertyMatcherDto(name string, op string) *PropertyMatcherDto {
	this := PropertyMatcherDto{}
	this.Name = name
	this.Op = op
	return &this
}

// NewPropertyMatcherDtoWithDefaults instantiates a new PropertyMatcherDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertyMatcherDtoWithDefaults() *PropertyMatcherDto {
	this := PropertyMatcherDto{}
	return &this
}

// GetName returns the Name field value
func (o *PropertyMatcherDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PropertyMatcherDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PropertyMatcherDto) SetName(v string) {
	o.Name = v
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PropertyMatcherDto) GetValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PropertyMatcherDto) GetValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return &o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *PropertyMatcherDto) HasValue() bool {
	if o != nil && IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given interface{} and assigns it to the Value field.
func (o *PropertyMatcherDto) SetValue(v interface{}) {
	o.Value = v
}

// GetOp returns the Op field value
func (o *PropertyMatcherDto) GetOp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Op
}

// GetOpOk returns a tuple with the Op field value
// and a boolean to check if the value has been set.
func (o *PropertyMatcherDto) GetOpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Op, true
}

// SetOp sets field value
func (o *PropertyMatcherDto) SetOp(v string) {
	o.Op = v
}

// GetUom returns the Uom field value if set, zero value otherwise.
func (o *PropertyMatcherDto) GetUom() string {
	if o == nil || IsNil(o.Uom) {
		var ret string
		return ret
	}
	return *o.Uom
}

// GetUomOk returns a tuple with the Uom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyMatcherDto) GetUomOk() (*string, bool) {
	if o == nil || IsNil(o.Uom) {
		return nil, false
	}
	return o.Uom, true
}

// HasUom returns a boolean if a field has been set.
func (o *PropertyMatcherDto) HasUom() bool {
	if o != nil && !IsNil(o.Uom) {
		return true
	}

	return false
}

// SetUom gets a reference to the given string and assigns it to the Uom field.
func (o *PropertyMatcherDto) SetUom(v string) {
	o.Uom = &v
}

func (o PropertyMatcherDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PropertyMatcherDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	toSerialize["op"] = o.Op
	if !IsNil(o.Uom) {
		toSerialize["uom"] = o.Uom
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PropertyMatcherDto) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varPropertyMatcherDto := _PropertyMatcherDto{}

	err = json.Unmarshal(data, &varPropertyMatcherDto)

	if err != nil {
		return err
	}

	*o = PropertyMatcherDto(varPropertyMatcherDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "value")
		delete(additionalProperties, "op")
		delete(additionalProperties, "uom")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePropertyMatcherDto struct {
	value *PropertyMatcherDto
	isSet bool
}

func (v NullablePropertyMatcherDto) Get() *PropertyMatcherDto {
	return v.value
}

func (v *NullablePropertyMatcherDto) Set(val *PropertyMatcherDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyMatcherDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyMatcherDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyMatcherDto(val *PropertyMatcherDto) *NullablePropertyMatcherDto {
	return &NullablePropertyMatcherDto{value: val, isSet: true}
}

func (v NullablePropertyMatcherDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyMatcherDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
