/*
Asserts, Inc

Asserts Public API

API version: 1.0.4
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the AMReceiverImage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AMReceiverImage{}

// AMReceiverImage struct for AMReceiverImage
type AMReceiverImage struct {
	Href                 *string `json:"href,omitempty"`
	Source               *string `json:"source,omitempty"`
	Alt                  *string `json:"alt,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AMReceiverImage AMReceiverImage

// NewAMReceiverImage instantiates a new AMReceiverImage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAMReceiverImage() *AMReceiverImage {
	this := AMReceiverImage{}
	return &this
}

// NewAMReceiverImageWithDefaults instantiates a new AMReceiverImage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAMReceiverImageWithDefaults() *AMReceiverImage {
	this := AMReceiverImage{}
	return &this
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *AMReceiverImage) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverImage) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *AMReceiverImage) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *AMReceiverImage) SetHref(v string) {
	o.Href = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *AMReceiverImage) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverImage) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *AMReceiverImage) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *AMReceiverImage) SetSource(v string) {
	o.Source = &v
}

// GetAlt returns the Alt field value if set, zero value otherwise.
func (o *AMReceiverImage) GetAlt() string {
	if o == nil || IsNil(o.Alt) {
		var ret string
		return ret
	}
	return *o.Alt
}

// GetAltOk returns a tuple with the Alt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverImage) GetAltOk() (*string, bool) {
	if o == nil || IsNil(o.Alt) {
		return nil, false
	}
	return o.Alt, true
}

// HasAlt returns a boolean if a field has been set.
func (o *AMReceiverImage) HasAlt() bool {
	if o != nil && !IsNil(o.Alt) {
		return true
	}

	return false
}

// SetAlt gets a reference to the given string and assigns it to the Alt field.
func (o *AMReceiverImage) SetAlt(v string) {
	o.Alt = &v
}

func (o AMReceiverImage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AMReceiverImage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Alt) {
		toSerialize["alt"] = o.Alt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AMReceiverImage) UnmarshalJSON(data []byte) (err error) {
	varAMReceiverImage := _AMReceiverImage{}

	err = json.Unmarshal(data, &varAMReceiverImage)

	if err != nil {
		return err
	}

	*o = AMReceiverImage(varAMReceiverImage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "href")
		delete(additionalProperties, "source")
		delete(additionalProperties, "alt")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAMReceiverImage struct {
	value *AMReceiverImage
	isSet bool
}

func (v NullableAMReceiverImage) Get() *AMReceiverImage {
	return v.value
}

func (v *NullableAMReceiverImage) Set(val *AMReceiverImage) {
	v.value = val
	v.isSet = true
}

func (v NullableAMReceiverImage) IsSet() bool {
	return v.isSet
}

func (v *NullableAMReceiverImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAMReceiverImage(val *AMReceiverImage) *NullableAMReceiverImage {
	return &NullableAMReceiverImage{value: val, isSet: true}
}

func (v NullableAMReceiverImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAMReceiverImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
