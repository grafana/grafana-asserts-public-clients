/*
Asserts, Inc

Asserts Public API

API version: 1.0.1
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
	"reflect"
	"strings"
)

// checks if the ModelMappingLatencyAverageDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelMappingLatencyAverageDto{}

// ModelMappingLatencyAverageDto struct for ModelMappingLatencyAverageDto
type ModelMappingLatencyAverageDto struct {
	ModelMappingSignalDto
	LatencyAverageType   string  `json:"latencyAverageType" validate:"regexp=counter|gauge"`
	SumMetricName        *string `json:"sumMetricName,omitempty"`
	SumMetricUnit        *string `json:"sumMetricUnit,omitempty" validate:"regexp=((milli|micro|)seconds)|((m|μ|)s)"`
	CountMetricName      *string `json:"countMetricName,omitempty"`
	GaugeMetricName      *string `json:"gaugeMetricName,omitempty"`
	GaugeMetricUnit      *string `json:"gaugeMetricUnit,omitempty" validate:"regexp=((milli|micro|)seconds)|((m|μ|)s)"`
	AdditionalProperties map[string]interface{}
}

type _ModelMappingLatencyAverageDto ModelMappingLatencyAverageDto

// NewModelMappingLatencyAverageDto instantiates a new ModelMappingLatencyAverageDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelMappingLatencyAverageDto(latencyAverageType string, entityNameLabel string, metricSource string, requestType string, kind string) *ModelMappingLatencyAverageDto {
	this := ModelMappingLatencyAverageDto{}
	this.EntityNameLabel = entityNameLabel
	this.MetricSource = metricSource
	this.RequestType = requestType
	this.Kind = kind
	this.LatencyAverageType = latencyAverageType
	return &this
}

// NewModelMappingLatencyAverageDtoWithDefaults instantiates a new ModelMappingLatencyAverageDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelMappingLatencyAverageDtoWithDefaults() *ModelMappingLatencyAverageDto {
	this := ModelMappingLatencyAverageDto{}
	return &this
}

// GetLatencyAverageType returns the LatencyAverageType field value
func (o *ModelMappingLatencyAverageDto) GetLatencyAverageType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LatencyAverageType
}

// GetLatencyAverageTypeOk returns a tuple with the LatencyAverageType field value
// and a boolean to check if the value has been set.
func (o *ModelMappingLatencyAverageDto) GetLatencyAverageTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LatencyAverageType, true
}

// SetLatencyAverageType sets field value
func (o *ModelMappingLatencyAverageDto) SetLatencyAverageType(v string) {
	o.LatencyAverageType = v
}

// GetSumMetricName returns the SumMetricName field value if set, zero value otherwise.
func (o *ModelMappingLatencyAverageDto) GetSumMetricName() string {
	if o == nil || IsNil(o.SumMetricName) {
		var ret string
		return ret
	}
	return *o.SumMetricName
}

// GetSumMetricNameOk returns a tuple with the SumMetricName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMappingLatencyAverageDto) GetSumMetricNameOk() (*string, bool) {
	if o == nil || IsNil(o.SumMetricName) {
		return nil, false
	}
	return o.SumMetricName, true
}

// HasSumMetricName returns a boolean if a field has been set.
func (o *ModelMappingLatencyAverageDto) HasSumMetricName() bool {
	if o != nil && !IsNil(o.SumMetricName) {
		return true
	}

	return false
}

// SetSumMetricName gets a reference to the given string and assigns it to the SumMetricName field.
func (o *ModelMappingLatencyAverageDto) SetSumMetricName(v string) {
	o.SumMetricName = &v
}

// GetSumMetricUnit returns the SumMetricUnit field value if set, zero value otherwise.
func (o *ModelMappingLatencyAverageDto) GetSumMetricUnit() string {
	if o == nil || IsNil(o.SumMetricUnit) {
		var ret string
		return ret
	}
	return *o.SumMetricUnit
}

// GetSumMetricUnitOk returns a tuple with the SumMetricUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMappingLatencyAverageDto) GetSumMetricUnitOk() (*string, bool) {
	if o == nil || IsNil(o.SumMetricUnit) {
		return nil, false
	}
	return o.SumMetricUnit, true
}

// HasSumMetricUnit returns a boolean if a field has been set.
func (o *ModelMappingLatencyAverageDto) HasSumMetricUnit() bool {
	if o != nil && !IsNil(o.SumMetricUnit) {
		return true
	}

	return false
}

// SetSumMetricUnit gets a reference to the given string and assigns it to the SumMetricUnit field.
func (o *ModelMappingLatencyAverageDto) SetSumMetricUnit(v string) {
	o.SumMetricUnit = &v
}

// GetCountMetricName returns the CountMetricName field value if set, zero value otherwise.
func (o *ModelMappingLatencyAverageDto) GetCountMetricName() string {
	if o == nil || IsNil(o.CountMetricName) {
		var ret string
		return ret
	}
	return *o.CountMetricName
}

// GetCountMetricNameOk returns a tuple with the CountMetricName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMappingLatencyAverageDto) GetCountMetricNameOk() (*string, bool) {
	if o == nil || IsNil(o.CountMetricName) {
		return nil, false
	}
	return o.CountMetricName, true
}

// HasCountMetricName returns a boolean if a field has been set.
func (o *ModelMappingLatencyAverageDto) HasCountMetricName() bool {
	if o != nil && !IsNil(o.CountMetricName) {
		return true
	}

	return false
}

// SetCountMetricName gets a reference to the given string and assigns it to the CountMetricName field.
func (o *ModelMappingLatencyAverageDto) SetCountMetricName(v string) {
	o.CountMetricName = &v
}

// GetGaugeMetricName returns the GaugeMetricName field value if set, zero value otherwise.
func (o *ModelMappingLatencyAverageDto) GetGaugeMetricName() string {
	if o == nil || IsNil(o.GaugeMetricName) {
		var ret string
		return ret
	}
	return *o.GaugeMetricName
}

// GetGaugeMetricNameOk returns a tuple with the GaugeMetricName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMappingLatencyAverageDto) GetGaugeMetricNameOk() (*string, bool) {
	if o == nil || IsNil(o.GaugeMetricName) {
		return nil, false
	}
	return o.GaugeMetricName, true
}

// HasGaugeMetricName returns a boolean if a field has been set.
func (o *ModelMappingLatencyAverageDto) HasGaugeMetricName() bool {
	if o != nil && !IsNil(o.GaugeMetricName) {
		return true
	}

	return false
}

// SetGaugeMetricName gets a reference to the given string and assigns it to the GaugeMetricName field.
func (o *ModelMappingLatencyAverageDto) SetGaugeMetricName(v string) {
	o.GaugeMetricName = &v
}

// GetGaugeMetricUnit returns the GaugeMetricUnit field value if set, zero value otherwise.
func (o *ModelMappingLatencyAverageDto) GetGaugeMetricUnit() string {
	if o == nil || IsNil(o.GaugeMetricUnit) {
		var ret string
		return ret
	}
	return *o.GaugeMetricUnit
}

// GetGaugeMetricUnitOk returns a tuple with the GaugeMetricUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMappingLatencyAverageDto) GetGaugeMetricUnitOk() (*string, bool) {
	if o == nil || IsNil(o.GaugeMetricUnit) {
		return nil, false
	}
	return o.GaugeMetricUnit, true
}

// HasGaugeMetricUnit returns a boolean if a field has been set.
func (o *ModelMappingLatencyAverageDto) HasGaugeMetricUnit() bool {
	if o != nil && !IsNil(o.GaugeMetricUnit) {
		return true
	}

	return false
}

// SetGaugeMetricUnit gets a reference to the given string and assigns it to the GaugeMetricUnit field.
func (o *ModelMappingLatencyAverageDto) SetGaugeMetricUnit(v string) {
	o.GaugeMetricUnit = &v
}

func (o ModelMappingLatencyAverageDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelMappingLatencyAverageDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedModelMappingSignalDto, errModelMappingSignalDto := json.Marshal(o.ModelMappingSignalDto)
	if errModelMappingSignalDto != nil {
		return map[string]interface{}{}, errModelMappingSignalDto
	}
	errModelMappingSignalDto = json.Unmarshal([]byte(serializedModelMappingSignalDto), &toSerialize)
	if errModelMappingSignalDto != nil {
		return map[string]interface{}{}, errModelMappingSignalDto
	}
	toSerialize["latencyAverageType"] = o.LatencyAverageType
	if !IsNil(o.SumMetricName) {
		toSerialize["sumMetricName"] = o.SumMetricName
	}
	if !IsNil(o.SumMetricUnit) {
		toSerialize["sumMetricUnit"] = o.SumMetricUnit
	}
	if !IsNil(o.CountMetricName) {
		toSerialize["countMetricName"] = o.CountMetricName
	}
	if !IsNil(o.GaugeMetricName) {
		toSerialize["gaugeMetricName"] = o.GaugeMetricName
	}
	if !IsNil(o.GaugeMetricUnit) {
		toSerialize["gaugeMetricUnit"] = o.GaugeMetricUnit
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelMappingLatencyAverageDto) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	type ModelMappingLatencyAverageDtoWithoutEmbeddedStruct struct {
		LatencyAverageType string  `json:"latencyAverageType" validate:"regexp=counter|gauge"`
		SumMetricName      *string `json:"sumMetricName,omitempty"`
		SumMetricUnit      *string `json:"sumMetricUnit,omitempty" validate:"regexp=((milli|micro|)seconds)|((m|μ|)s)"`
		CountMetricName    *string `json:"countMetricName,omitempty"`
		GaugeMetricName    *string `json:"gaugeMetricName,omitempty"`
		GaugeMetricUnit    *string `json:"gaugeMetricUnit,omitempty" validate:"regexp=((milli|micro|)seconds)|((m|μ|)s)"`
	}

	varModelMappingLatencyAverageDtoWithoutEmbeddedStruct := ModelMappingLatencyAverageDtoWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varModelMappingLatencyAverageDtoWithoutEmbeddedStruct)
	if err == nil {
		varModelMappingLatencyAverageDto := _ModelMappingLatencyAverageDto{}
		varModelMappingLatencyAverageDto.LatencyAverageType = varModelMappingLatencyAverageDtoWithoutEmbeddedStruct.LatencyAverageType
		varModelMappingLatencyAverageDto.SumMetricName = varModelMappingLatencyAverageDtoWithoutEmbeddedStruct.SumMetricName
		varModelMappingLatencyAverageDto.SumMetricUnit = varModelMappingLatencyAverageDtoWithoutEmbeddedStruct.SumMetricUnit
		varModelMappingLatencyAverageDto.CountMetricName = varModelMappingLatencyAverageDtoWithoutEmbeddedStruct.CountMetricName
		varModelMappingLatencyAverageDto.GaugeMetricName = varModelMappingLatencyAverageDtoWithoutEmbeddedStruct.GaugeMetricName
		varModelMappingLatencyAverageDto.GaugeMetricUnit = varModelMappingLatencyAverageDtoWithoutEmbeddedStruct.GaugeMetricUnit
		*o = ModelMappingLatencyAverageDto(varModelMappingLatencyAverageDto)
	} else {
		return err
	}

	varModelMappingLatencyAverageDto := _ModelMappingLatencyAverageDto{}

	err = json.Unmarshal(data, &varModelMappingLatencyAverageDto)
	if err == nil {
		o.ModelMappingSignalDto = varModelMappingLatencyAverageDto.ModelMappingSignalDto
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "latencyAverageType")
		delete(additionalProperties, "sumMetricName")
		delete(additionalProperties, "sumMetricUnit")
		delete(additionalProperties, "countMetricName")
		delete(additionalProperties, "gaugeMetricName")
		delete(additionalProperties, "gaugeMetricUnit")

		// remove fields from embedded structs
		reflectModelMappingSignalDto := reflect.ValueOf(o.ModelMappingSignalDto)
		for i := 0; i < reflectModelMappingSignalDto.Type().NumField(); i++ {
			t := reflectModelMappingSignalDto.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelMappingLatencyAverageDto struct {
	value *ModelMappingLatencyAverageDto
	isSet bool
}

func (v NullableModelMappingLatencyAverageDto) Get() *ModelMappingLatencyAverageDto {
	return v.value
}

func (v *NullableModelMappingLatencyAverageDto) Set(val *ModelMappingLatencyAverageDto) {
	v.value = val
	v.isSet = true
}

func (v NullableModelMappingLatencyAverageDto) IsSet() bool {
	return v.isSet
}

func (v *NullableModelMappingLatencyAverageDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelMappingLatencyAverageDto(val *ModelMappingLatencyAverageDto) *NullableModelMappingLatencyAverageDto {
	return &NullableModelMappingLatencyAverageDto{value: val, isSet: true}
}

func (v NullableModelMappingLatencyAverageDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelMappingLatencyAverageDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
