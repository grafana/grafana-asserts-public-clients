/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-112305
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the SearchDefinitionItemDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchDefinitionItemDto{}

// SearchDefinitionItemDto struct for SearchDefinitionItemDto
type SearchDefinitionItemDto struct {
	Id                   *string                `json:"id,omitempty"`
	Score                *float64               `json:"score,omitempty"`
	DefinitionId         *int32                 `json:"definitionId,omitempty"`
	BoundDescription     *string                `json:"boundDescription,omitempty"`
	Description          *string                `json:"description,omitempty"`
	Bindings             map[string]interface{} `json:"bindings,omitempty"`
	FilterCriteria       []EntityMatcherDto     `json:"filterCriteria,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SearchDefinitionItemDto SearchDefinitionItemDto

// NewSearchDefinitionItemDto instantiates a new SearchDefinitionItemDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchDefinitionItemDto() *SearchDefinitionItemDto {
	this := SearchDefinitionItemDto{}
	return &this
}

// NewSearchDefinitionItemDtoWithDefaults instantiates a new SearchDefinitionItemDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchDefinitionItemDtoWithDefaults() *SearchDefinitionItemDto {
	this := SearchDefinitionItemDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SearchDefinitionItemDto) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchDefinitionItemDto) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SearchDefinitionItemDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SearchDefinitionItemDto) SetId(v string) {
	o.Id = &v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *SearchDefinitionItemDto) GetScore() float64 {
	if o == nil || IsNil(o.Score) {
		var ret float64
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchDefinitionItemDto) GetScoreOk() (*float64, bool) {
	if o == nil || IsNil(o.Score) {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *SearchDefinitionItemDto) HasScore() bool {
	if o != nil && !IsNil(o.Score) {
		return true
	}

	return false
}

// SetScore gets a reference to the given float64 and assigns it to the Score field.
func (o *SearchDefinitionItemDto) SetScore(v float64) {
	o.Score = &v
}

// GetDefinitionId returns the DefinitionId field value if set, zero value otherwise.
func (o *SearchDefinitionItemDto) GetDefinitionId() int32 {
	if o == nil || IsNil(o.DefinitionId) {
		var ret int32
		return ret
	}
	return *o.DefinitionId
}

// GetDefinitionIdOk returns a tuple with the DefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchDefinitionItemDto) GetDefinitionIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DefinitionId) {
		return nil, false
	}
	return o.DefinitionId, true
}

// HasDefinitionId returns a boolean if a field has been set.
func (o *SearchDefinitionItemDto) HasDefinitionId() bool {
	if o != nil && !IsNil(o.DefinitionId) {
		return true
	}

	return false
}

// SetDefinitionId gets a reference to the given int32 and assigns it to the DefinitionId field.
func (o *SearchDefinitionItemDto) SetDefinitionId(v int32) {
	o.DefinitionId = &v
}

// GetBoundDescription returns the BoundDescription field value if set, zero value otherwise.
func (o *SearchDefinitionItemDto) GetBoundDescription() string {
	if o == nil || IsNil(o.BoundDescription) {
		var ret string
		return ret
	}
	return *o.BoundDescription
}

// GetBoundDescriptionOk returns a tuple with the BoundDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchDefinitionItemDto) GetBoundDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.BoundDescription) {
		return nil, false
	}
	return o.BoundDescription, true
}

// HasBoundDescription returns a boolean if a field has been set.
func (o *SearchDefinitionItemDto) HasBoundDescription() bool {
	if o != nil && !IsNil(o.BoundDescription) {
		return true
	}

	return false
}

// SetBoundDescription gets a reference to the given string and assigns it to the BoundDescription field.
func (o *SearchDefinitionItemDto) SetBoundDescription(v string) {
	o.BoundDescription = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SearchDefinitionItemDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchDefinitionItemDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SearchDefinitionItemDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SearchDefinitionItemDto) SetDescription(v string) {
	o.Description = &v
}

// GetBindings returns the Bindings field value if set, zero value otherwise.
func (o *SearchDefinitionItemDto) GetBindings() map[string]interface{} {
	if o == nil || IsNil(o.Bindings) {
		var ret map[string]interface{}
		return ret
	}
	return o.Bindings
}

// GetBindingsOk returns a tuple with the Bindings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchDefinitionItemDto) GetBindingsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Bindings) {
		return map[string]interface{}{}, false
	}
	return o.Bindings, true
}

// HasBindings returns a boolean if a field has been set.
func (o *SearchDefinitionItemDto) HasBindings() bool {
	if o != nil && !IsNil(o.Bindings) {
		return true
	}

	return false
}

// SetBindings gets a reference to the given map[string]interface{} and assigns it to the Bindings field.
func (o *SearchDefinitionItemDto) SetBindings(v map[string]interface{}) {
	o.Bindings = v
}

// GetFilterCriteria returns the FilterCriteria field value if set, zero value otherwise.
func (o *SearchDefinitionItemDto) GetFilterCriteria() []EntityMatcherDto {
	if o == nil || IsNil(o.FilterCriteria) {
		var ret []EntityMatcherDto
		return ret
	}
	return o.FilterCriteria
}

// GetFilterCriteriaOk returns a tuple with the FilterCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchDefinitionItemDto) GetFilterCriteriaOk() ([]EntityMatcherDto, bool) {
	if o == nil || IsNil(o.FilterCriteria) {
		return nil, false
	}
	return o.FilterCriteria, true
}

// HasFilterCriteria returns a boolean if a field has been set.
func (o *SearchDefinitionItemDto) HasFilterCriteria() bool {
	if o != nil && !IsNil(o.FilterCriteria) {
		return true
	}

	return false
}

// SetFilterCriteria gets a reference to the given []EntityMatcherDto and assigns it to the FilterCriteria field.
func (o *SearchDefinitionItemDto) SetFilterCriteria(v []EntityMatcherDto) {
	o.FilterCriteria = v
}

func (o SearchDefinitionItemDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchDefinitionItemDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Score) {
		toSerialize["score"] = o.Score
	}
	if !IsNil(o.DefinitionId) {
		toSerialize["definitionId"] = o.DefinitionId
	}
	if !IsNil(o.BoundDescription) {
		toSerialize["boundDescription"] = o.BoundDescription
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Bindings) {
		toSerialize["bindings"] = o.Bindings
	}
	if !IsNil(o.FilterCriteria) {
		toSerialize["filterCriteria"] = o.FilterCriteria
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SearchDefinitionItemDto) UnmarshalJSON(data []byte) (err error) {
	varSearchDefinitionItemDto := _SearchDefinitionItemDto{}

	err = json.Unmarshal(data, &varSearchDefinitionItemDto)

	if err != nil {
		return err
	}

	*o = SearchDefinitionItemDto(varSearchDefinitionItemDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "score")
		delete(additionalProperties, "definitionId")
		delete(additionalProperties, "boundDescription")
		delete(additionalProperties, "description")
		delete(additionalProperties, "bindings")
		delete(additionalProperties, "filterCriteria")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSearchDefinitionItemDto struct {
	value *SearchDefinitionItemDto
	isSet bool
}

func (v NullableSearchDefinitionItemDto) Get() *SearchDefinitionItemDto {
	return v.value
}

func (v *NullableSearchDefinitionItemDto) Set(val *SearchDefinitionItemDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchDefinitionItemDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchDefinitionItemDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchDefinitionItemDto(val *SearchDefinitionItemDto) *NullableSearchDefinitionItemDto {
	return &NullableSearchDefinitionItemDto{value: val, isSet: true}
}

func (v NullableSearchDefinitionItemDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchDefinitionItemDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
