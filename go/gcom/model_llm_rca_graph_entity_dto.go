/*
Asserts, Inc

Asserts Public API

API version: 2025.09.11-132913
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the LlmRcaGraphEntityDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LlmRcaGraphEntityDto{}

// LlmRcaGraphEntityDto struct for LlmRcaGraphEntityDto
type LlmRcaGraphEntityDto struct {
	Id                   *int64                    `json:"id,omitempty"`
	Type                 *string                   `json:"type,omitempty"`
	Name                 *string                   `json:"name,omitempty"`
	Scope                map[string]interface{}    `json:"scope,omitempty"`
	Properties           map[string]interface{}    `json:"properties,omitempty"`
	Relations            map[string][]EntityKeyDto `json:"relations,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LlmRcaGraphEntityDto LlmRcaGraphEntityDto

// NewLlmRcaGraphEntityDto instantiates a new LlmRcaGraphEntityDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLlmRcaGraphEntityDto() *LlmRcaGraphEntityDto {
	this := LlmRcaGraphEntityDto{}
	return &this
}

// NewLlmRcaGraphEntityDtoWithDefaults instantiates a new LlmRcaGraphEntityDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLlmRcaGraphEntityDtoWithDefaults() *LlmRcaGraphEntityDto {
	this := LlmRcaGraphEntityDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LlmRcaGraphEntityDto) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LlmRcaGraphEntityDto) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LlmRcaGraphEntityDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *LlmRcaGraphEntityDto) SetId(v int64) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *LlmRcaGraphEntityDto) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LlmRcaGraphEntityDto) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *LlmRcaGraphEntityDto) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *LlmRcaGraphEntityDto) SetType(v string) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LlmRcaGraphEntityDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LlmRcaGraphEntityDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LlmRcaGraphEntityDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LlmRcaGraphEntityDto) SetName(v string) {
	o.Name = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *LlmRcaGraphEntityDto) GetScope() map[string]interface{} {
	if o == nil || IsNil(o.Scope) {
		var ret map[string]interface{}
		return ret
	}
	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LlmRcaGraphEntityDto) GetScopeOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Scope) {
		return map[string]interface{}{}, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *LlmRcaGraphEntityDto) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given map[string]interface{} and assigns it to the Scope field.
func (o *LlmRcaGraphEntityDto) SetScope(v map[string]interface{}) {
	o.Scope = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *LlmRcaGraphEntityDto) GetProperties() map[string]interface{} {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]interface{}
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LlmRcaGraphEntityDto) GetPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]interface{}{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *LlmRcaGraphEntityDto) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]interface{} and assigns it to the Properties field.
func (o *LlmRcaGraphEntityDto) SetProperties(v map[string]interface{}) {
	o.Properties = v
}

// GetRelations returns the Relations field value if set, zero value otherwise.
func (o *LlmRcaGraphEntityDto) GetRelations() map[string][]EntityKeyDto {
	if o == nil || IsNil(o.Relations) {
		var ret map[string][]EntityKeyDto
		return ret
	}
	return o.Relations
}

// GetRelationsOk returns a tuple with the Relations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LlmRcaGraphEntityDto) GetRelationsOk() (map[string][]EntityKeyDto, bool) {
	if o == nil || IsNil(o.Relations) {
		return map[string][]EntityKeyDto{}, false
	}
	return o.Relations, true
}

// HasRelations returns a boolean if a field has been set.
func (o *LlmRcaGraphEntityDto) HasRelations() bool {
	if o != nil && !IsNil(o.Relations) {
		return true
	}

	return false
}

// SetRelations gets a reference to the given map[string][]EntityKeyDto and assigns it to the Relations field.
func (o *LlmRcaGraphEntityDto) SetRelations(v map[string][]EntityKeyDto) {
	o.Relations = v
}

func (o LlmRcaGraphEntityDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LlmRcaGraphEntityDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.Relations) {
		toSerialize["relations"] = o.Relations
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LlmRcaGraphEntityDto) UnmarshalJSON(data []byte) (err error) {
	varLlmRcaGraphEntityDto := _LlmRcaGraphEntityDto{}

	err = json.Unmarshal(data, &varLlmRcaGraphEntityDto)

	if err != nil {
		return err
	}

	*o = LlmRcaGraphEntityDto(varLlmRcaGraphEntityDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "scope")
		delete(additionalProperties, "properties")
		delete(additionalProperties, "relations")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLlmRcaGraphEntityDto struct {
	value *LlmRcaGraphEntityDto
	isSet bool
}

func (v NullableLlmRcaGraphEntityDto) Get() *LlmRcaGraphEntityDto {
	return v.value
}

func (v *NullableLlmRcaGraphEntityDto) Set(val *LlmRcaGraphEntityDto) {
	v.value = val
	v.isSet = true
}

func (v NullableLlmRcaGraphEntityDto) IsSet() bool {
	return v.isSet
}

func (v *NullableLlmRcaGraphEntityDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLlmRcaGraphEntityDto(val *LlmRcaGraphEntityDto) *NullableLlmRcaGraphEntityDto {
	return &NullableLlmRcaGraphEntityDto{value: val, isSet: true}
}

func (v NullableLlmRcaGraphEntityDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLlmRcaGraphEntityDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
