/*
Asserts, Inc

Asserts Public API

API version: 1.0.1
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the SearchDefinitionDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchDefinitionDto{}

// SearchDefinitionDto struct for SearchDefinitionDto
type SearchDefinitionDto struct {
	Id                   *int32                                `json:"id,omitempty"`
	Indexed              *bool                                 `json:"indexed,omitempty"`
	DescribedQuery       *string                               `json:"describedQuery,omitempty"`
	Description          *string                               `json:"description,omitempty"`
	RawQuery             *string                               `json:"rawQuery,omitempty"`
	Bindings             map[string]SearchDefinitionBindingDto `json:"bindings,omitempty"`
	TypeDetails          *SearchDefinitionTypeDetailsDto       `json:"typeDetails,omitempty"`
	FilterCriteria       []EntityMatcherDto                    `json:"filterCriteria,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SearchDefinitionDto SearchDefinitionDto

// NewSearchDefinitionDto instantiates a new SearchDefinitionDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchDefinitionDto() *SearchDefinitionDto {
	this := SearchDefinitionDto{}
	return &this
}

// NewSearchDefinitionDtoWithDefaults instantiates a new SearchDefinitionDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchDefinitionDtoWithDefaults() *SearchDefinitionDto {
	this := SearchDefinitionDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SearchDefinitionDto) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchDefinitionDto) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SearchDefinitionDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SearchDefinitionDto) SetId(v int32) {
	o.Id = &v
}

// GetIndexed returns the Indexed field value if set, zero value otherwise.
func (o *SearchDefinitionDto) GetIndexed() bool {
	if o == nil || IsNil(o.Indexed) {
		var ret bool
		return ret
	}
	return *o.Indexed
}

// GetIndexedOk returns a tuple with the Indexed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchDefinitionDto) GetIndexedOk() (*bool, bool) {
	if o == nil || IsNil(o.Indexed) {
		return nil, false
	}
	return o.Indexed, true
}

// HasIndexed returns a boolean if a field has been set.
func (o *SearchDefinitionDto) HasIndexed() bool {
	if o != nil && !IsNil(o.Indexed) {
		return true
	}

	return false
}

// SetIndexed gets a reference to the given bool and assigns it to the Indexed field.
func (o *SearchDefinitionDto) SetIndexed(v bool) {
	o.Indexed = &v
}

// GetDescribedQuery returns the DescribedQuery field value if set, zero value otherwise.
func (o *SearchDefinitionDto) GetDescribedQuery() string {
	if o == nil || IsNil(o.DescribedQuery) {
		var ret string
		return ret
	}
	return *o.DescribedQuery
}

// GetDescribedQueryOk returns a tuple with the DescribedQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchDefinitionDto) GetDescribedQueryOk() (*string, bool) {
	if o == nil || IsNil(o.DescribedQuery) {
		return nil, false
	}
	return o.DescribedQuery, true
}

// HasDescribedQuery returns a boolean if a field has been set.
func (o *SearchDefinitionDto) HasDescribedQuery() bool {
	if o != nil && !IsNil(o.DescribedQuery) {
		return true
	}

	return false
}

// SetDescribedQuery gets a reference to the given string and assigns it to the DescribedQuery field.
func (o *SearchDefinitionDto) SetDescribedQuery(v string) {
	o.DescribedQuery = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SearchDefinitionDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchDefinitionDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SearchDefinitionDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SearchDefinitionDto) SetDescription(v string) {
	o.Description = &v
}

// GetRawQuery returns the RawQuery field value if set, zero value otherwise.
func (o *SearchDefinitionDto) GetRawQuery() string {
	if o == nil || IsNil(o.RawQuery) {
		var ret string
		return ret
	}
	return *o.RawQuery
}

// GetRawQueryOk returns a tuple with the RawQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchDefinitionDto) GetRawQueryOk() (*string, bool) {
	if o == nil || IsNil(o.RawQuery) {
		return nil, false
	}
	return o.RawQuery, true
}

// HasRawQuery returns a boolean if a field has been set.
func (o *SearchDefinitionDto) HasRawQuery() bool {
	if o != nil && !IsNil(o.RawQuery) {
		return true
	}

	return false
}

// SetRawQuery gets a reference to the given string and assigns it to the RawQuery field.
func (o *SearchDefinitionDto) SetRawQuery(v string) {
	o.RawQuery = &v
}

// GetBindings returns the Bindings field value if set, zero value otherwise.
func (o *SearchDefinitionDto) GetBindings() map[string]SearchDefinitionBindingDto {
	if o == nil || IsNil(o.Bindings) {
		var ret map[string]SearchDefinitionBindingDto
		return ret
	}
	return o.Bindings
}

// GetBindingsOk returns a tuple with the Bindings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchDefinitionDto) GetBindingsOk() (map[string]SearchDefinitionBindingDto, bool) {
	if o == nil || IsNil(o.Bindings) {
		return map[string]SearchDefinitionBindingDto{}, false
	}
	return o.Bindings, true
}

// HasBindings returns a boolean if a field has been set.
func (o *SearchDefinitionDto) HasBindings() bool {
	if o != nil && !IsNil(o.Bindings) {
		return true
	}

	return false
}

// SetBindings gets a reference to the given map[string]SearchDefinitionBindingDto and assigns it to the Bindings field.
func (o *SearchDefinitionDto) SetBindings(v map[string]SearchDefinitionBindingDto) {
	o.Bindings = v
}

// GetTypeDetails returns the TypeDetails field value if set, zero value otherwise.
func (o *SearchDefinitionDto) GetTypeDetails() SearchDefinitionTypeDetailsDto {
	if o == nil || IsNil(o.TypeDetails) {
		var ret SearchDefinitionTypeDetailsDto
		return ret
	}
	return *o.TypeDetails
}

// GetTypeDetailsOk returns a tuple with the TypeDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchDefinitionDto) GetTypeDetailsOk() (*SearchDefinitionTypeDetailsDto, bool) {
	if o == nil || IsNil(o.TypeDetails) {
		return nil, false
	}
	return o.TypeDetails, true
}

// HasTypeDetails returns a boolean if a field has been set.
func (o *SearchDefinitionDto) HasTypeDetails() bool {
	if o != nil && !IsNil(o.TypeDetails) {
		return true
	}

	return false
}

// SetTypeDetails gets a reference to the given SearchDefinitionTypeDetailsDto and assigns it to the TypeDetails field.
func (o *SearchDefinitionDto) SetTypeDetails(v SearchDefinitionTypeDetailsDto) {
	o.TypeDetails = &v
}

// GetFilterCriteria returns the FilterCriteria field value if set, zero value otherwise.
func (o *SearchDefinitionDto) GetFilterCriteria() []EntityMatcherDto {
	if o == nil || IsNil(o.FilterCriteria) {
		var ret []EntityMatcherDto
		return ret
	}
	return o.FilterCriteria
}

// GetFilterCriteriaOk returns a tuple with the FilterCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchDefinitionDto) GetFilterCriteriaOk() ([]EntityMatcherDto, bool) {
	if o == nil || IsNil(o.FilterCriteria) {
		return nil, false
	}
	return o.FilterCriteria, true
}

// HasFilterCriteria returns a boolean if a field has been set.
func (o *SearchDefinitionDto) HasFilterCriteria() bool {
	if o != nil && !IsNil(o.FilterCriteria) {
		return true
	}

	return false
}

// SetFilterCriteria gets a reference to the given []EntityMatcherDto and assigns it to the FilterCriteria field.
func (o *SearchDefinitionDto) SetFilterCriteria(v []EntityMatcherDto) {
	o.FilterCriteria = v
}

func (o SearchDefinitionDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchDefinitionDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Indexed) {
		toSerialize["indexed"] = o.Indexed
	}
	if !IsNil(o.DescribedQuery) {
		toSerialize["describedQuery"] = o.DescribedQuery
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.RawQuery) {
		toSerialize["rawQuery"] = o.RawQuery
	}
	if !IsNil(o.Bindings) {
		toSerialize["bindings"] = o.Bindings
	}
	if !IsNil(o.TypeDetails) {
		toSerialize["typeDetails"] = o.TypeDetails
	}
	if !IsNil(o.FilterCriteria) {
		toSerialize["filterCriteria"] = o.FilterCriteria
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SearchDefinitionDto) UnmarshalJSON(data []byte) (err error) {
	varSearchDefinitionDto := _SearchDefinitionDto{}

	err = json.Unmarshal(data, &varSearchDefinitionDto)

	if err != nil {
		return err
	}

	*o = SearchDefinitionDto(varSearchDefinitionDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "indexed")
		delete(additionalProperties, "describedQuery")
		delete(additionalProperties, "description")
		delete(additionalProperties, "rawQuery")
		delete(additionalProperties, "bindings")
		delete(additionalProperties, "typeDetails")
		delete(additionalProperties, "filterCriteria")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSearchDefinitionDto struct {
	value *SearchDefinitionDto
	isSet bool
}

func (v NullableSearchDefinitionDto) Get() *SearchDefinitionDto {
	return v.value
}

func (v *NullableSearchDefinitionDto) Set(val *SearchDefinitionDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchDefinitionDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchDefinitionDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchDefinitionDto(val *SearchDefinitionDto) *NullableSearchDefinitionDto {
	return &NullableSearchDefinitionDto{value: val, isSet: true}
}

func (v NullableSearchDefinitionDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchDefinitionDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
