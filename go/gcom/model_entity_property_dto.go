/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-110859
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the EntityPropertyDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntityPropertyDto{}

// EntityPropertyDto struct for EntityPropertyDto
type EntityPropertyDto struct {
	Name                 *string `json:"name,omitempty"`
	Type                 *string `json:"type,omitempty"`
	Uom                  *string `json:"uom,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EntityPropertyDto EntityPropertyDto

// NewEntityPropertyDto instantiates a new EntityPropertyDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityPropertyDto() *EntityPropertyDto {
	this := EntityPropertyDto{}
	return &this
}

// NewEntityPropertyDtoWithDefaults instantiates a new EntityPropertyDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityPropertyDtoWithDefaults() *EntityPropertyDto {
	this := EntityPropertyDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EntityPropertyDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityPropertyDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EntityPropertyDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EntityPropertyDto) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EntityPropertyDto) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityPropertyDto) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EntityPropertyDto) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EntityPropertyDto) SetType(v string) {
	o.Type = &v
}

// GetUom returns the Uom field value if set, zero value otherwise.
func (o *EntityPropertyDto) GetUom() string {
	if o == nil || IsNil(o.Uom) {
		var ret string
		return ret
	}
	return *o.Uom
}

// GetUomOk returns a tuple with the Uom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityPropertyDto) GetUomOk() (*string, bool) {
	if o == nil || IsNil(o.Uom) {
		return nil, false
	}
	return o.Uom, true
}

// HasUom returns a boolean if a field has been set.
func (o *EntityPropertyDto) HasUom() bool {
	if o != nil && !IsNil(o.Uom) {
		return true
	}

	return false
}

// SetUom gets a reference to the given string and assigns it to the Uom field.
func (o *EntityPropertyDto) SetUom(v string) {
	o.Uom = &v
}

func (o EntityPropertyDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntityPropertyDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Uom) {
		toSerialize["uom"] = o.Uom
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EntityPropertyDto) UnmarshalJSON(data []byte) (err error) {
	varEntityPropertyDto := _EntityPropertyDto{}

	err = json.Unmarshal(data, &varEntityPropertyDto)

	if err != nil {
		return err
	}

	*o = EntityPropertyDto(varEntityPropertyDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "uom")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEntityPropertyDto struct {
	value *EntityPropertyDto
	isSet bool
}

func (v NullableEntityPropertyDto) Get() *EntityPropertyDto {
	return v.value
}

func (v *NullableEntityPropertyDto) Set(val *EntityPropertyDto) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityPropertyDto) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityPropertyDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityPropertyDto(val *EntityPropertyDto) *NullableEntityPropertyDto {
	return &NullableEntityPropertyDto{value: val, isSet: true}
}

func (v NullableEntityPropertyDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityPropertyDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
