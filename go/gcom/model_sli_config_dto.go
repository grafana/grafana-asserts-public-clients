/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-112305
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the SliConfigDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SliConfigDto{}

// SliConfigDto struct for SliConfigDto
type SliConfigDto struct {
	Name                 *string `json:"name,omitempty"`
	Kind                 string  `json:"kind"`
	AdditionalProperties map[string]interface{}
}

type _SliConfigDto SliConfigDto

// NewSliConfigDto instantiates a new SliConfigDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSliConfigDto(kind string) *SliConfigDto {
	this := SliConfigDto{}
	this.Kind = kind
	return &this
}

// NewSliConfigDtoWithDefaults instantiates a new SliConfigDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSliConfigDtoWithDefaults() *SliConfigDto {
	this := SliConfigDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SliConfigDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SliConfigDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SliConfigDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SliConfigDto) SetName(v string) {
	o.Name = &v
}

// GetKind returns the Kind field value
func (o *SliConfigDto) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *SliConfigDto) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *SliConfigDto) SetKind(v string) {
	o.Kind = v
}

func (o SliConfigDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SliConfigDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["kind"] = o.Kind

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SliConfigDto) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varSliConfigDto := _SliConfigDto{}

	err = json.Unmarshal(data, &varSliConfigDto)

	if err != nil {
		return err
	}

	*o = SliConfigDto(varSliConfigDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "kind")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSliConfigDto struct {
	value *SliConfigDto
	isSet bool
}

func (v NullableSliConfigDto) Get() *SliConfigDto {
	return v.value
}

func (v *NullableSliConfigDto) Set(val *SliConfigDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSliConfigDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSliConfigDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSliConfigDto(val *SliConfigDto) *NullableSliConfigDto {
	return &NullableSliConfigDto{value: val, isSet: true}
}

func (v NullableSliConfigDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSliConfigDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
