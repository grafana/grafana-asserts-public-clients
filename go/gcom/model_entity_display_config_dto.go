/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-110859
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the EntityDisplayConfigDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntityDisplayConfigDto{}

// EntityDisplayConfigDto struct for EntityDisplayConfigDto
type EntityDisplayConfigDto struct {
	Color                *string `json:"color,omitempty"`
	Shape                *string `json:"shape,omitempty"`
	Icon                 *string `json:"icon,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EntityDisplayConfigDto EntityDisplayConfigDto

// NewEntityDisplayConfigDto instantiates a new EntityDisplayConfigDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityDisplayConfigDto() *EntityDisplayConfigDto {
	this := EntityDisplayConfigDto{}
	return &this
}

// NewEntityDisplayConfigDtoWithDefaults instantiates a new EntityDisplayConfigDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityDisplayConfigDtoWithDefaults() *EntityDisplayConfigDto {
	this := EntityDisplayConfigDto{}
	return &this
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *EntityDisplayConfigDto) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityDisplayConfigDto) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *EntityDisplayConfigDto) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *EntityDisplayConfigDto) SetColor(v string) {
	o.Color = &v
}

// GetShape returns the Shape field value if set, zero value otherwise.
func (o *EntityDisplayConfigDto) GetShape() string {
	if o == nil || IsNil(o.Shape) {
		var ret string
		return ret
	}
	return *o.Shape
}

// GetShapeOk returns a tuple with the Shape field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityDisplayConfigDto) GetShapeOk() (*string, bool) {
	if o == nil || IsNil(o.Shape) {
		return nil, false
	}
	return o.Shape, true
}

// HasShape returns a boolean if a field has been set.
func (o *EntityDisplayConfigDto) HasShape() bool {
	if o != nil && !IsNil(o.Shape) {
		return true
	}

	return false
}

// SetShape gets a reference to the given string and assigns it to the Shape field.
func (o *EntityDisplayConfigDto) SetShape(v string) {
	o.Shape = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *EntityDisplayConfigDto) GetIcon() string {
	if o == nil || IsNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityDisplayConfigDto) GetIconOk() (*string, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *EntityDisplayConfigDto) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *EntityDisplayConfigDto) SetIcon(v string) {
	o.Icon = &v
}

func (o EntityDisplayConfigDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntityDisplayConfigDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.Shape) {
		toSerialize["shape"] = o.Shape
	}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EntityDisplayConfigDto) UnmarshalJSON(data []byte) (err error) {
	varEntityDisplayConfigDto := _EntityDisplayConfigDto{}

	err = json.Unmarshal(data, &varEntityDisplayConfigDto)

	if err != nil {
		return err
	}

	*o = EntityDisplayConfigDto(varEntityDisplayConfigDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "color")
		delete(additionalProperties, "shape")
		delete(additionalProperties, "icon")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEntityDisplayConfigDto struct {
	value *EntityDisplayConfigDto
	isSet bool
}

func (v NullableEntityDisplayConfigDto) Get() *EntityDisplayConfigDto {
	return v.value
}

func (v *NullableEntityDisplayConfigDto) Set(val *EntityDisplayConfigDto) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityDisplayConfigDto) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityDisplayConfigDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityDisplayConfigDto(val *EntityDisplayConfigDto) *NullableEntityDisplayConfigDto {
	return &NullableEntityDisplayConfigDto{value: val, isSet: true}
}

func (v NullableEntityDisplayConfigDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityDisplayConfigDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
