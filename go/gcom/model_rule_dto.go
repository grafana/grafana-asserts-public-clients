/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-055054
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the RuleDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RuleDto{}

// RuleDto struct for RuleDto
type RuleDto struct {
	RuleGroup            *string           `json:"ruleGroup,omitempty"`
	GenerateDefaultRules *bool             `json:"generateDefaultRules,omitempty"`
	AssertsRuleName      *string           `json:"assertsRuleName,omitempty"`
	RuleExpr             *string           `json:"ruleExpr,omitempty"`
	LabelsTemplate       map[string]string `json:"labelsTemplate,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RuleDto RuleDto

// NewRuleDto instantiates a new RuleDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleDto() *RuleDto {
	this := RuleDto{}
	return &this
}

// NewRuleDtoWithDefaults instantiates a new RuleDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleDtoWithDefaults() *RuleDto {
	this := RuleDto{}
	return &this
}

// GetRuleGroup returns the RuleGroup field value if set, zero value otherwise.
func (o *RuleDto) GetRuleGroup() string {
	if o == nil || IsNil(o.RuleGroup) {
		var ret string
		return ret
	}
	return *o.RuleGroup
}

// GetRuleGroupOk returns a tuple with the RuleGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleDto) GetRuleGroupOk() (*string, bool) {
	if o == nil || IsNil(o.RuleGroup) {
		return nil, false
	}
	return o.RuleGroup, true
}

// HasRuleGroup returns a boolean if a field has been set.
func (o *RuleDto) HasRuleGroup() bool {
	if o != nil && !IsNil(o.RuleGroup) {
		return true
	}

	return false
}

// SetRuleGroup gets a reference to the given string and assigns it to the RuleGroup field.
func (o *RuleDto) SetRuleGroup(v string) {
	o.RuleGroup = &v
}

// GetGenerateDefaultRules returns the GenerateDefaultRules field value if set, zero value otherwise.
func (o *RuleDto) GetGenerateDefaultRules() bool {
	if o == nil || IsNil(o.GenerateDefaultRules) {
		var ret bool
		return ret
	}
	return *o.GenerateDefaultRules
}

// GetGenerateDefaultRulesOk returns a tuple with the GenerateDefaultRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleDto) GetGenerateDefaultRulesOk() (*bool, bool) {
	if o == nil || IsNil(o.GenerateDefaultRules) {
		return nil, false
	}
	return o.GenerateDefaultRules, true
}

// HasGenerateDefaultRules returns a boolean if a field has been set.
func (o *RuleDto) HasGenerateDefaultRules() bool {
	if o != nil && !IsNil(o.GenerateDefaultRules) {
		return true
	}

	return false
}

// SetGenerateDefaultRules gets a reference to the given bool and assigns it to the GenerateDefaultRules field.
func (o *RuleDto) SetGenerateDefaultRules(v bool) {
	o.GenerateDefaultRules = &v
}

// GetAssertsRuleName returns the AssertsRuleName field value if set, zero value otherwise.
func (o *RuleDto) GetAssertsRuleName() string {
	if o == nil || IsNil(o.AssertsRuleName) {
		var ret string
		return ret
	}
	return *o.AssertsRuleName
}

// GetAssertsRuleNameOk returns a tuple with the AssertsRuleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleDto) GetAssertsRuleNameOk() (*string, bool) {
	if o == nil || IsNil(o.AssertsRuleName) {
		return nil, false
	}
	return o.AssertsRuleName, true
}

// HasAssertsRuleName returns a boolean if a field has been set.
func (o *RuleDto) HasAssertsRuleName() bool {
	if o != nil && !IsNil(o.AssertsRuleName) {
		return true
	}

	return false
}

// SetAssertsRuleName gets a reference to the given string and assigns it to the AssertsRuleName field.
func (o *RuleDto) SetAssertsRuleName(v string) {
	o.AssertsRuleName = &v
}

// GetRuleExpr returns the RuleExpr field value if set, zero value otherwise.
func (o *RuleDto) GetRuleExpr() string {
	if o == nil || IsNil(o.RuleExpr) {
		var ret string
		return ret
	}
	return *o.RuleExpr
}

// GetRuleExprOk returns a tuple with the RuleExpr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleDto) GetRuleExprOk() (*string, bool) {
	if o == nil || IsNil(o.RuleExpr) {
		return nil, false
	}
	return o.RuleExpr, true
}

// HasRuleExpr returns a boolean if a field has been set.
func (o *RuleDto) HasRuleExpr() bool {
	if o != nil && !IsNil(o.RuleExpr) {
		return true
	}

	return false
}

// SetRuleExpr gets a reference to the given string and assigns it to the RuleExpr field.
func (o *RuleDto) SetRuleExpr(v string) {
	o.RuleExpr = &v
}

// GetLabelsTemplate returns the LabelsTemplate field value if set, zero value otherwise.
func (o *RuleDto) GetLabelsTemplate() map[string]string {
	if o == nil || IsNil(o.LabelsTemplate) {
		var ret map[string]string
		return ret
	}
	return o.LabelsTemplate
}

// GetLabelsTemplateOk returns a tuple with the LabelsTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleDto) GetLabelsTemplateOk() (map[string]string, bool) {
	if o == nil || IsNil(o.LabelsTemplate) {
		return map[string]string{}, false
	}
	return o.LabelsTemplate, true
}

// HasLabelsTemplate returns a boolean if a field has been set.
func (o *RuleDto) HasLabelsTemplate() bool {
	if o != nil && !IsNil(o.LabelsTemplate) {
		return true
	}

	return false
}

// SetLabelsTemplate gets a reference to the given map[string]string and assigns it to the LabelsTemplate field.
func (o *RuleDto) SetLabelsTemplate(v map[string]string) {
	o.LabelsTemplate = v
}

func (o RuleDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuleDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RuleGroup) {
		toSerialize["ruleGroup"] = o.RuleGroup
	}
	if !IsNil(o.GenerateDefaultRules) {
		toSerialize["generateDefaultRules"] = o.GenerateDefaultRules
	}
	if !IsNil(o.AssertsRuleName) {
		toSerialize["assertsRuleName"] = o.AssertsRuleName
	}
	if !IsNil(o.RuleExpr) {
		toSerialize["ruleExpr"] = o.RuleExpr
	}
	if !IsNil(o.LabelsTemplate) {
		toSerialize["labelsTemplate"] = o.LabelsTemplate
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RuleDto) UnmarshalJSON(data []byte) (err error) {
	varRuleDto := _RuleDto{}

	err = json.Unmarshal(data, &varRuleDto)

	if err != nil {
		return err
	}

	*o = RuleDto(varRuleDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ruleGroup")
		delete(additionalProperties, "generateDefaultRules")
		delete(additionalProperties, "assertsRuleName")
		delete(additionalProperties, "ruleExpr")
		delete(additionalProperties, "labelsTemplate")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRuleDto struct {
	value *RuleDto
	isSet bool
}

func (v NullableRuleDto) Get() *RuleDto {
	return v.value
}

func (v *NullableRuleDto) Set(val *RuleDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleDto(val *RuleDto) *NullableRuleDto {
	return &NullableRuleDto{value: val, isSet: true}
}

func (v NullableRuleDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
