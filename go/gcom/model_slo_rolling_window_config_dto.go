/*
Asserts, Inc

Asserts Public API

API version: 2025.09.11-132913
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
	"reflect"
	"strings"
)

// checks if the SloRollingWindowConfigDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SloRollingWindowConfigDto{}

// SloRollingWindowConfigDto struct for SloRollingWindowConfigDto
type SloRollingWindowConfigDto struct {
	SloWindowConfigDto
	AdditionalProperties map[string]interface{}
}

type _SloRollingWindowConfigDto SloRollingWindowConfigDto

// NewSloRollingWindowConfigDto instantiates a new SloRollingWindowConfigDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSloRollingWindowConfigDto(kind string) *SloRollingWindowConfigDto {
	this := SloRollingWindowConfigDto{}
	this.Kind = kind
	return &this
}

// NewSloRollingWindowConfigDtoWithDefaults instantiates a new SloRollingWindowConfigDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSloRollingWindowConfigDtoWithDefaults() *SloRollingWindowConfigDto {
	this := SloRollingWindowConfigDto{}
	return &this
}

func (o SloRollingWindowConfigDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SloRollingWindowConfigDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedSloWindowConfigDto, errSloWindowConfigDto := json.Marshal(o.SloWindowConfigDto)
	if errSloWindowConfigDto != nil {
		return map[string]interface{}{}, errSloWindowConfigDto
	}
	errSloWindowConfigDto = json.Unmarshal([]byte(serializedSloWindowConfigDto), &toSerialize)
	if errSloWindowConfigDto != nil {
		return map[string]interface{}{}, errSloWindowConfigDto
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SloRollingWindowConfigDto) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	type SloRollingWindowConfigDtoWithoutEmbeddedStruct struct {
	}

	varSloRollingWindowConfigDtoWithoutEmbeddedStruct := SloRollingWindowConfigDtoWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varSloRollingWindowConfigDtoWithoutEmbeddedStruct)
	if err == nil {
		varSloRollingWindowConfigDto := _SloRollingWindowConfigDto{}
		*o = SloRollingWindowConfigDto(varSloRollingWindowConfigDto)
	} else {
		return err
	}

	varSloRollingWindowConfigDto := _SloRollingWindowConfigDto{}

	err = json.Unmarshal(data, &varSloRollingWindowConfigDto)
	if err == nil {
		o.SloWindowConfigDto = varSloRollingWindowConfigDto.SloWindowConfigDto
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {

		// remove fields from embedded structs
		reflectSloWindowConfigDto := reflect.ValueOf(o.SloWindowConfigDto)
		for i := 0; i < reflectSloWindowConfigDto.Type().NumField(); i++ {
			t := reflectSloWindowConfigDto.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSloRollingWindowConfigDto struct {
	value *SloRollingWindowConfigDto
	isSet bool
}

func (v NullableSloRollingWindowConfigDto) Get() *SloRollingWindowConfigDto {
	return v.value
}

func (v *NullableSloRollingWindowConfigDto) Set(val *SloRollingWindowConfigDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSloRollingWindowConfigDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSloRollingWindowConfigDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloRollingWindowConfigDto(val *SloRollingWindowConfigDto) *NullableSloRollingWindowConfigDto {
	return &NullableSloRollingWindowConfigDto{value: val, isSet: true}
}

func (v NullableSloRollingWindowConfigDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloRollingWindowConfigDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
