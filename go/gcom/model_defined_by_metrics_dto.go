/*
Asserts, Inc

Asserts Public API

API version: 2025.08.25-143624
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
	"reflect"
	"strings"
)

// checks if the DefinedByMetricsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DefinedByMetricsDto{}

// DefinedByMetricsDto struct for DefinedByMetricsDto
type DefinedByMetricsDto struct {
	DefinedByDto
	Pattern              *string           `json:"pattern,omitempty"`
	StartEntityMatchers  map[string]string `json:"startEntityMatchers,omitempty"`
	EndEntityMatchers    map[string]string `json:"endEntityMatchers,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DefinedByMetricsDto DefinedByMetricsDto

// NewDefinedByMetricsDto instantiates a new DefinedByMetricsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefinedByMetricsDto(source string) *DefinedByMetricsDto {
	this := DefinedByMetricsDto{}
	this.Source = source
	return &this
}

// NewDefinedByMetricsDtoWithDefaults instantiates a new DefinedByMetricsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefinedByMetricsDtoWithDefaults() *DefinedByMetricsDto {
	this := DefinedByMetricsDto{}
	return &this
}

// GetPattern returns the Pattern field value if set, zero value otherwise.
func (o *DefinedByMetricsDto) GetPattern() string {
	if o == nil || IsNil(o.Pattern) {
		var ret string
		return ret
	}
	return *o.Pattern
}

// GetPatternOk returns a tuple with the Pattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefinedByMetricsDto) GetPatternOk() (*string, bool) {
	if o == nil || IsNil(o.Pattern) {
		return nil, false
	}
	return o.Pattern, true
}

// HasPattern returns a boolean if a field has been set.
func (o *DefinedByMetricsDto) HasPattern() bool {
	if o != nil && !IsNil(o.Pattern) {
		return true
	}

	return false
}

// SetPattern gets a reference to the given string and assigns it to the Pattern field.
func (o *DefinedByMetricsDto) SetPattern(v string) {
	o.Pattern = &v
}

// GetStartEntityMatchers returns the StartEntityMatchers field value if set, zero value otherwise.
func (o *DefinedByMetricsDto) GetStartEntityMatchers() map[string]string {
	if o == nil || IsNil(o.StartEntityMatchers) {
		var ret map[string]string
		return ret
	}
	return o.StartEntityMatchers
}

// GetStartEntityMatchersOk returns a tuple with the StartEntityMatchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefinedByMetricsDto) GetStartEntityMatchersOk() (map[string]string, bool) {
	if o == nil || IsNil(o.StartEntityMatchers) {
		return map[string]string{}, false
	}
	return o.StartEntityMatchers, true
}

// HasStartEntityMatchers returns a boolean if a field has been set.
func (o *DefinedByMetricsDto) HasStartEntityMatchers() bool {
	if o != nil && !IsNil(o.StartEntityMatchers) {
		return true
	}

	return false
}

// SetStartEntityMatchers gets a reference to the given map[string]string and assigns it to the StartEntityMatchers field.
func (o *DefinedByMetricsDto) SetStartEntityMatchers(v map[string]string) {
	o.StartEntityMatchers = v
}

// GetEndEntityMatchers returns the EndEntityMatchers field value if set, zero value otherwise.
func (o *DefinedByMetricsDto) GetEndEntityMatchers() map[string]string {
	if o == nil || IsNil(o.EndEntityMatchers) {
		var ret map[string]string
		return ret
	}
	return o.EndEntityMatchers
}

// GetEndEntityMatchersOk returns a tuple with the EndEntityMatchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefinedByMetricsDto) GetEndEntityMatchersOk() (map[string]string, bool) {
	if o == nil || IsNil(o.EndEntityMatchers) {
		return map[string]string{}, false
	}
	return o.EndEntityMatchers, true
}

// HasEndEntityMatchers returns a boolean if a field has been set.
func (o *DefinedByMetricsDto) HasEndEntityMatchers() bool {
	if o != nil && !IsNil(o.EndEntityMatchers) {
		return true
	}

	return false
}

// SetEndEntityMatchers gets a reference to the given map[string]string and assigns it to the EndEntityMatchers field.
func (o *DefinedByMetricsDto) SetEndEntityMatchers(v map[string]string) {
	o.EndEntityMatchers = v
}

func (o DefinedByMetricsDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DefinedByMetricsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedDefinedByDto, errDefinedByDto := json.Marshal(o.DefinedByDto)
	if errDefinedByDto != nil {
		return map[string]interface{}{}, errDefinedByDto
	}
	errDefinedByDto = json.Unmarshal([]byte(serializedDefinedByDto), &toSerialize)
	if errDefinedByDto != nil {
		return map[string]interface{}{}, errDefinedByDto
	}
	if !IsNil(o.Pattern) {
		toSerialize["pattern"] = o.Pattern
	}
	if !IsNil(o.StartEntityMatchers) {
		toSerialize["startEntityMatchers"] = o.StartEntityMatchers
	}
	if !IsNil(o.EndEntityMatchers) {
		toSerialize["endEntityMatchers"] = o.EndEntityMatchers
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DefinedByMetricsDto) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	type DefinedByMetricsDtoWithoutEmbeddedStruct struct {
		Pattern             *string           `json:"pattern,omitempty"`
		StartEntityMatchers map[string]string `json:"startEntityMatchers,omitempty"`
		EndEntityMatchers   map[string]string `json:"endEntityMatchers,omitempty"`
	}

	varDefinedByMetricsDtoWithoutEmbeddedStruct := DefinedByMetricsDtoWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varDefinedByMetricsDtoWithoutEmbeddedStruct)
	if err == nil {
		varDefinedByMetricsDto := _DefinedByMetricsDto{}
		varDefinedByMetricsDto.Pattern = varDefinedByMetricsDtoWithoutEmbeddedStruct.Pattern
		varDefinedByMetricsDto.StartEntityMatchers = varDefinedByMetricsDtoWithoutEmbeddedStruct.StartEntityMatchers
		varDefinedByMetricsDto.EndEntityMatchers = varDefinedByMetricsDtoWithoutEmbeddedStruct.EndEntityMatchers
		*o = DefinedByMetricsDto(varDefinedByMetricsDto)
	} else {
		return err
	}

	varDefinedByMetricsDto := _DefinedByMetricsDto{}

	err = json.Unmarshal(data, &varDefinedByMetricsDto)
	if err == nil {
		o.DefinedByDto = varDefinedByMetricsDto.DefinedByDto
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "pattern")
		delete(additionalProperties, "startEntityMatchers")
		delete(additionalProperties, "endEntityMatchers")

		// remove fields from embedded structs
		reflectDefinedByDto := reflect.ValueOf(o.DefinedByDto)
		for i := 0; i < reflectDefinedByDto.Type().NumField(); i++ {
			t := reflectDefinedByDto.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDefinedByMetricsDto struct {
	value *DefinedByMetricsDto
	isSet bool
}

func (v NullableDefinedByMetricsDto) Get() *DefinedByMetricsDto {
	return v.value
}

func (v *NullableDefinedByMetricsDto) Set(val *DefinedByMetricsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDefinedByMetricsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDefinedByMetricsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefinedByMetricsDto(val *DefinedByMetricsDto) *NullableDefinedByMetricsDto {
	return &NullableDefinedByMetricsDto{value: val, isSet: true}
}

func (v NullableDefinedByMetricsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefinedByMetricsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
