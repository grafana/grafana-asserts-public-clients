/*
Asserts, Inc

Asserts Public API

API version: 2025.08.25-143403
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the AlertManagerHttp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertManagerHttp{}

// AlertManagerHttp struct for AlertManagerHttp
type AlertManagerHttp struct {
	Authorization        *AlertManagerAuthorization `json:"authorization,omitempty"`
	Oauth2               *AlertManagerOAuth2        `json:"oauth2,omitempty"`
	BasicAuth            *AlertManagerBasicAuth     `json:"basic_auth,omitempty"`
	EnableHttp2          *bool                      `json:"enable_http2,omitempty"`
	ProxyUrl             *string                    `json:"proxy_url,omitempty"`
	FollowRedirects      *bool                      `json:"follow_redirects,omitempty"`
	TlsConfig            *AlertManagerTls           `json:"tls_config,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AlertManagerHttp AlertManagerHttp

// NewAlertManagerHttp instantiates a new AlertManagerHttp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertManagerHttp() *AlertManagerHttp {
	this := AlertManagerHttp{}
	return &this
}

// NewAlertManagerHttpWithDefaults instantiates a new AlertManagerHttp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertManagerHttpWithDefaults() *AlertManagerHttp {
	this := AlertManagerHttp{}
	return &this
}

// GetAuthorization returns the Authorization field value if set, zero value otherwise.
func (o *AlertManagerHttp) GetAuthorization() AlertManagerAuthorization {
	if o == nil || IsNil(o.Authorization) {
		var ret AlertManagerAuthorization
		return ret
	}
	return *o.Authorization
}

// GetAuthorizationOk returns a tuple with the Authorization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerHttp) GetAuthorizationOk() (*AlertManagerAuthorization, bool) {
	if o == nil || IsNil(o.Authorization) {
		return nil, false
	}
	return o.Authorization, true
}

// HasAuthorization returns a boolean if a field has been set.
func (o *AlertManagerHttp) HasAuthorization() bool {
	if o != nil && !IsNil(o.Authorization) {
		return true
	}

	return false
}

// SetAuthorization gets a reference to the given AlertManagerAuthorization and assigns it to the Authorization field.
func (o *AlertManagerHttp) SetAuthorization(v AlertManagerAuthorization) {
	o.Authorization = &v
}

// GetOauth2 returns the Oauth2 field value if set, zero value otherwise.
func (o *AlertManagerHttp) GetOauth2() AlertManagerOAuth2 {
	if o == nil || IsNil(o.Oauth2) {
		var ret AlertManagerOAuth2
		return ret
	}
	return *o.Oauth2
}

// GetOauth2Ok returns a tuple with the Oauth2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerHttp) GetOauth2Ok() (*AlertManagerOAuth2, bool) {
	if o == nil || IsNil(o.Oauth2) {
		return nil, false
	}
	return o.Oauth2, true
}

// HasOauth2 returns a boolean if a field has been set.
func (o *AlertManagerHttp) HasOauth2() bool {
	if o != nil && !IsNil(o.Oauth2) {
		return true
	}

	return false
}

// SetOauth2 gets a reference to the given AlertManagerOAuth2 and assigns it to the Oauth2 field.
func (o *AlertManagerHttp) SetOauth2(v AlertManagerOAuth2) {
	o.Oauth2 = &v
}

// GetBasicAuth returns the BasicAuth field value if set, zero value otherwise.
func (o *AlertManagerHttp) GetBasicAuth() AlertManagerBasicAuth {
	if o == nil || IsNil(o.BasicAuth) {
		var ret AlertManagerBasicAuth
		return ret
	}
	return *o.BasicAuth
}

// GetBasicAuthOk returns a tuple with the BasicAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerHttp) GetBasicAuthOk() (*AlertManagerBasicAuth, bool) {
	if o == nil || IsNil(o.BasicAuth) {
		return nil, false
	}
	return o.BasicAuth, true
}

// HasBasicAuth returns a boolean if a field has been set.
func (o *AlertManagerHttp) HasBasicAuth() bool {
	if o != nil && !IsNil(o.BasicAuth) {
		return true
	}

	return false
}

// SetBasicAuth gets a reference to the given AlertManagerBasicAuth and assigns it to the BasicAuth field.
func (o *AlertManagerHttp) SetBasicAuth(v AlertManagerBasicAuth) {
	o.BasicAuth = &v
}

// GetEnableHttp2 returns the EnableHttp2 field value if set, zero value otherwise.
func (o *AlertManagerHttp) GetEnableHttp2() bool {
	if o == nil || IsNil(o.EnableHttp2) {
		var ret bool
		return ret
	}
	return *o.EnableHttp2
}

// GetEnableHttp2Ok returns a tuple with the EnableHttp2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerHttp) GetEnableHttp2Ok() (*bool, bool) {
	if o == nil || IsNil(o.EnableHttp2) {
		return nil, false
	}
	return o.EnableHttp2, true
}

// HasEnableHttp2 returns a boolean if a field has been set.
func (o *AlertManagerHttp) HasEnableHttp2() bool {
	if o != nil && !IsNil(o.EnableHttp2) {
		return true
	}

	return false
}

// SetEnableHttp2 gets a reference to the given bool and assigns it to the EnableHttp2 field.
func (o *AlertManagerHttp) SetEnableHttp2(v bool) {
	o.EnableHttp2 = &v
}

// GetProxyUrl returns the ProxyUrl field value if set, zero value otherwise.
func (o *AlertManagerHttp) GetProxyUrl() string {
	if o == nil || IsNil(o.ProxyUrl) {
		var ret string
		return ret
	}
	return *o.ProxyUrl
}

// GetProxyUrlOk returns a tuple with the ProxyUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerHttp) GetProxyUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ProxyUrl) {
		return nil, false
	}
	return o.ProxyUrl, true
}

// HasProxyUrl returns a boolean if a field has been set.
func (o *AlertManagerHttp) HasProxyUrl() bool {
	if o != nil && !IsNil(o.ProxyUrl) {
		return true
	}

	return false
}

// SetProxyUrl gets a reference to the given string and assigns it to the ProxyUrl field.
func (o *AlertManagerHttp) SetProxyUrl(v string) {
	o.ProxyUrl = &v
}

// GetFollowRedirects returns the FollowRedirects field value if set, zero value otherwise.
func (o *AlertManagerHttp) GetFollowRedirects() bool {
	if o == nil || IsNil(o.FollowRedirects) {
		var ret bool
		return ret
	}
	return *o.FollowRedirects
}

// GetFollowRedirectsOk returns a tuple with the FollowRedirects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerHttp) GetFollowRedirectsOk() (*bool, bool) {
	if o == nil || IsNil(o.FollowRedirects) {
		return nil, false
	}
	return o.FollowRedirects, true
}

// HasFollowRedirects returns a boolean if a field has been set.
func (o *AlertManagerHttp) HasFollowRedirects() bool {
	if o != nil && !IsNil(o.FollowRedirects) {
		return true
	}

	return false
}

// SetFollowRedirects gets a reference to the given bool and assigns it to the FollowRedirects field.
func (o *AlertManagerHttp) SetFollowRedirects(v bool) {
	o.FollowRedirects = &v
}

// GetTlsConfig returns the TlsConfig field value if set, zero value otherwise.
func (o *AlertManagerHttp) GetTlsConfig() AlertManagerTls {
	if o == nil || IsNil(o.TlsConfig) {
		var ret AlertManagerTls
		return ret
	}
	return *o.TlsConfig
}

// GetTlsConfigOk returns a tuple with the TlsConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerHttp) GetTlsConfigOk() (*AlertManagerTls, bool) {
	if o == nil || IsNil(o.TlsConfig) {
		return nil, false
	}
	return o.TlsConfig, true
}

// HasTlsConfig returns a boolean if a field has been set.
func (o *AlertManagerHttp) HasTlsConfig() bool {
	if o != nil && !IsNil(o.TlsConfig) {
		return true
	}

	return false
}

// SetTlsConfig gets a reference to the given AlertManagerTls and assigns it to the TlsConfig field.
func (o *AlertManagerHttp) SetTlsConfig(v AlertManagerTls) {
	o.TlsConfig = &v
}

func (o AlertManagerHttp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertManagerHttp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Authorization) {
		toSerialize["authorization"] = o.Authorization
	}
	if !IsNil(o.Oauth2) {
		toSerialize["oauth2"] = o.Oauth2
	}
	if !IsNil(o.BasicAuth) {
		toSerialize["basic_auth"] = o.BasicAuth
	}
	if !IsNil(o.EnableHttp2) {
		toSerialize["enable_http2"] = o.EnableHttp2
	}
	if !IsNil(o.ProxyUrl) {
		toSerialize["proxy_url"] = o.ProxyUrl
	}
	if !IsNil(o.FollowRedirects) {
		toSerialize["follow_redirects"] = o.FollowRedirects
	}
	if !IsNil(o.TlsConfig) {
		toSerialize["tls_config"] = o.TlsConfig
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AlertManagerHttp) UnmarshalJSON(data []byte) (err error) {
	varAlertManagerHttp := _AlertManagerHttp{}

	err = json.Unmarshal(data, &varAlertManagerHttp)

	if err != nil {
		return err
	}

	*o = AlertManagerHttp(varAlertManagerHttp)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "authorization")
		delete(additionalProperties, "oauth2")
		delete(additionalProperties, "basic_auth")
		delete(additionalProperties, "enable_http2")
		delete(additionalProperties, "proxy_url")
		delete(additionalProperties, "follow_redirects")
		delete(additionalProperties, "tls_config")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAlertManagerHttp struct {
	value *AlertManagerHttp
	isSet bool
}

func (v NullableAlertManagerHttp) Get() *AlertManagerHttp {
	return v.value
}

func (v *NullableAlertManagerHttp) Set(val *AlertManagerHttp) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertManagerHttp) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertManagerHttp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertManagerHttp(val *AlertManagerHttp) *NullableAlertManagerHttp {
	return &NullableAlertManagerHttp{value: val, isSet: true}
}

func (v NullableAlertManagerHttp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertManagerHttp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
