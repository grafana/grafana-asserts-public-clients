/*
Asserts, Inc

Asserts Public API

API version: 1.0.4
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the EnvironmentDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentDto{}

// EnvironmentDto struct for EnvironmentDto
type EnvironmentDto struct {
	Name                 *string       `json:"name,omitempty"`
	EnvsForLog           []string      `json:"envsForLog,omitempty"`
	SitesForLog          []string      `json:"sitesForLog,omitempty"`
	LogConfig            *LogConfigDto `json:"logConfig,omitempty"`
	DefaultConfig        *bool         `json:"defaultConfig,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EnvironmentDto EnvironmentDto

// NewEnvironmentDto instantiates a new EnvironmentDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentDto() *EnvironmentDto {
	this := EnvironmentDto{}
	return &this
}

// NewEnvironmentDtoWithDefaults instantiates a new EnvironmentDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentDtoWithDefaults() *EnvironmentDto {
	this := EnvironmentDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EnvironmentDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EnvironmentDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EnvironmentDto) SetName(v string) {
	o.Name = &v
}

// GetEnvsForLog returns the EnvsForLog field value if set, zero value otherwise.
func (o *EnvironmentDto) GetEnvsForLog() []string {
	if o == nil || IsNil(o.EnvsForLog) {
		var ret []string
		return ret
	}
	return o.EnvsForLog
}

// GetEnvsForLogOk returns a tuple with the EnvsForLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentDto) GetEnvsForLogOk() ([]string, bool) {
	if o == nil || IsNil(o.EnvsForLog) {
		return nil, false
	}
	return o.EnvsForLog, true
}

// HasEnvsForLog returns a boolean if a field has been set.
func (o *EnvironmentDto) HasEnvsForLog() bool {
	if o != nil && !IsNil(o.EnvsForLog) {
		return true
	}

	return false
}

// SetEnvsForLog gets a reference to the given []string and assigns it to the EnvsForLog field.
func (o *EnvironmentDto) SetEnvsForLog(v []string) {
	o.EnvsForLog = v
}

// GetSitesForLog returns the SitesForLog field value if set, zero value otherwise.
func (o *EnvironmentDto) GetSitesForLog() []string {
	if o == nil || IsNil(o.SitesForLog) {
		var ret []string
		return ret
	}
	return o.SitesForLog
}

// GetSitesForLogOk returns a tuple with the SitesForLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentDto) GetSitesForLogOk() ([]string, bool) {
	if o == nil || IsNil(o.SitesForLog) {
		return nil, false
	}
	return o.SitesForLog, true
}

// HasSitesForLog returns a boolean if a field has been set.
func (o *EnvironmentDto) HasSitesForLog() bool {
	if o != nil && !IsNil(o.SitesForLog) {
		return true
	}

	return false
}

// SetSitesForLog gets a reference to the given []string and assigns it to the SitesForLog field.
func (o *EnvironmentDto) SetSitesForLog(v []string) {
	o.SitesForLog = v
}

// GetLogConfig returns the LogConfig field value if set, zero value otherwise.
func (o *EnvironmentDto) GetLogConfig() LogConfigDto {
	if o == nil || IsNil(o.LogConfig) {
		var ret LogConfigDto
		return ret
	}
	return *o.LogConfig
}

// GetLogConfigOk returns a tuple with the LogConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentDto) GetLogConfigOk() (*LogConfigDto, bool) {
	if o == nil || IsNil(o.LogConfig) {
		return nil, false
	}
	return o.LogConfig, true
}

// HasLogConfig returns a boolean if a field has been set.
func (o *EnvironmentDto) HasLogConfig() bool {
	if o != nil && !IsNil(o.LogConfig) {
		return true
	}

	return false
}

// SetLogConfig gets a reference to the given LogConfigDto and assigns it to the LogConfig field.
func (o *EnvironmentDto) SetLogConfig(v LogConfigDto) {
	o.LogConfig = &v
}

// GetDefaultConfig returns the DefaultConfig field value if set, zero value otherwise.
func (o *EnvironmentDto) GetDefaultConfig() bool {
	if o == nil || IsNil(o.DefaultConfig) {
		var ret bool
		return ret
	}
	return *o.DefaultConfig
}

// GetDefaultConfigOk returns a tuple with the DefaultConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentDto) GetDefaultConfigOk() (*bool, bool) {
	if o == nil || IsNil(o.DefaultConfig) {
		return nil, false
	}
	return o.DefaultConfig, true
}

// HasDefaultConfig returns a boolean if a field has been set.
func (o *EnvironmentDto) HasDefaultConfig() bool {
	if o != nil && !IsNil(o.DefaultConfig) {
		return true
	}

	return false
}

// SetDefaultConfig gets a reference to the given bool and assigns it to the DefaultConfig field.
func (o *EnvironmentDto) SetDefaultConfig(v bool) {
	o.DefaultConfig = &v
}

func (o EnvironmentDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.EnvsForLog) {
		toSerialize["envsForLog"] = o.EnvsForLog
	}
	if !IsNil(o.SitesForLog) {
		toSerialize["sitesForLog"] = o.SitesForLog
	}
	if !IsNil(o.LogConfig) {
		toSerialize["logConfig"] = o.LogConfig
	}
	if !IsNil(o.DefaultConfig) {
		toSerialize["defaultConfig"] = o.DefaultConfig
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnvironmentDto) UnmarshalJSON(data []byte) (err error) {
	varEnvironmentDto := _EnvironmentDto{}

	err = json.Unmarshal(data, &varEnvironmentDto)

	if err != nil {
		return err
	}

	*o = EnvironmentDto(varEnvironmentDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "envsForLog")
		delete(additionalProperties, "sitesForLog")
		delete(additionalProperties, "logConfig")
		delete(additionalProperties, "defaultConfig")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEnvironmentDto struct {
	value *EnvironmentDto
	isSet bool
}

func (v NullableEnvironmentDto) Get() *EnvironmentDto {
	return v.value
}

func (v *NullableEnvironmentDto) Set(val *EnvironmentDto) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentDto) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentDto(val *EnvironmentDto) *NullableEnvironmentDto {
	return &NullableEnvironmentDto{value: val, isSet: true}
}

func (v NullableEnvironmentDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
