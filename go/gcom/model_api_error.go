/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-055054
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the ApiError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiError{}

// ApiError struct for ApiError
type ApiError struct {
	Status               *ApiErrorStatus          `json:"status,omitempty"`
	RequestId            *string                  `json:"requestId,omitempty"`
	Timestamp            *int64                   `json:"timestamp,omitempty"`
	Message              *string                  `json:"message,omitempty"`
	DebugMessage         *string                  `json:"debugMessage,omitempty"`
	SubErrors            []ApiErrorSubErrorsInner `json:"subErrors,omitempty"`
	TraceId              *string                  `json:"trace_id,omitempty"`
	SpanId               *string                  `json:"span_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApiError ApiError

// NewApiError instantiates a new ApiError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiError() *ApiError {
	this := ApiError{}
	return &this
}

// NewApiErrorWithDefaults instantiates a new ApiError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiErrorWithDefaults() *ApiError {
	this := ApiError{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ApiError) GetStatus() ApiErrorStatus {
	if o == nil || IsNil(o.Status) {
		var ret ApiErrorStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiError) GetStatusOk() (*ApiErrorStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ApiError) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ApiErrorStatus and assigns it to the Status field.
func (o *ApiError) SetStatus(v ApiErrorStatus) {
	o.Status = &v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *ApiError) GetRequestId() string {
	if o == nil || IsNil(o.RequestId) {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiError) GetRequestIdOk() (*string, bool) {
	if o == nil || IsNil(o.RequestId) {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *ApiError) HasRequestId() bool {
	if o != nil && !IsNil(o.RequestId) {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *ApiError) SetRequestId(v string) {
	o.RequestId = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *ApiError) GetTimestamp() int64 {
	if o == nil || IsNil(o.Timestamp) {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiError) GetTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *ApiError) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *ApiError) SetTimestamp(v int64) {
	o.Timestamp = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ApiError) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiError) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ApiError) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ApiError) SetMessage(v string) {
	o.Message = &v
}

// GetDebugMessage returns the DebugMessage field value if set, zero value otherwise.
func (o *ApiError) GetDebugMessage() string {
	if o == nil || IsNil(o.DebugMessage) {
		var ret string
		return ret
	}
	return *o.DebugMessage
}

// GetDebugMessageOk returns a tuple with the DebugMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiError) GetDebugMessageOk() (*string, bool) {
	if o == nil || IsNil(o.DebugMessage) {
		return nil, false
	}
	return o.DebugMessage, true
}

// HasDebugMessage returns a boolean if a field has been set.
func (o *ApiError) HasDebugMessage() bool {
	if o != nil && !IsNil(o.DebugMessage) {
		return true
	}

	return false
}

// SetDebugMessage gets a reference to the given string and assigns it to the DebugMessage field.
func (o *ApiError) SetDebugMessage(v string) {
	o.DebugMessage = &v
}

// GetSubErrors returns the SubErrors field value if set, zero value otherwise.
func (o *ApiError) GetSubErrors() []ApiErrorSubErrorsInner {
	if o == nil || IsNil(o.SubErrors) {
		var ret []ApiErrorSubErrorsInner
		return ret
	}
	return o.SubErrors
}

// GetSubErrorsOk returns a tuple with the SubErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiError) GetSubErrorsOk() ([]ApiErrorSubErrorsInner, bool) {
	if o == nil || IsNil(o.SubErrors) {
		return nil, false
	}
	return o.SubErrors, true
}

// HasSubErrors returns a boolean if a field has been set.
func (o *ApiError) HasSubErrors() bool {
	if o != nil && !IsNil(o.SubErrors) {
		return true
	}

	return false
}

// SetSubErrors gets a reference to the given []ApiErrorSubErrorsInner and assigns it to the SubErrors field.
func (o *ApiError) SetSubErrors(v []ApiErrorSubErrorsInner) {
	o.SubErrors = v
}

// GetTraceId returns the TraceId field value if set, zero value otherwise.
func (o *ApiError) GetTraceId() string {
	if o == nil || IsNil(o.TraceId) {
		var ret string
		return ret
	}
	return *o.TraceId
}

// GetTraceIdOk returns a tuple with the TraceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiError) GetTraceIdOk() (*string, bool) {
	if o == nil || IsNil(o.TraceId) {
		return nil, false
	}
	return o.TraceId, true
}

// HasTraceId returns a boolean if a field has been set.
func (o *ApiError) HasTraceId() bool {
	if o != nil && !IsNil(o.TraceId) {
		return true
	}

	return false
}

// SetTraceId gets a reference to the given string and assigns it to the TraceId field.
func (o *ApiError) SetTraceId(v string) {
	o.TraceId = &v
}

// GetSpanId returns the SpanId field value if set, zero value otherwise.
func (o *ApiError) GetSpanId() string {
	if o == nil || IsNil(o.SpanId) {
		var ret string
		return ret
	}
	return *o.SpanId
}

// GetSpanIdOk returns a tuple with the SpanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiError) GetSpanIdOk() (*string, bool) {
	if o == nil || IsNil(o.SpanId) {
		return nil, false
	}
	return o.SpanId, true
}

// HasSpanId returns a boolean if a field has been set.
func (o *ApiError) HasSpanId() bool {
	if o != nil && !IsNil(o.SpanId) {
		return true
	}

	return false
}

// SetSpanId gets a reference to the given string and assigns it to the SpanId field.
func (o *ApiError) SetSpanId(v string) {
	o.SpanId = &v
}

func (o ApiError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.RequestId) {
		toSerialize["requestId"] = o.RequestId
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.DebugMessage) {
		toSerialize["debugMessage"] = o.DebugMessage
	}
	if !IsNil(o.SubErrors) {
		toSerialize["subErrors"] = o.SubErrors
	}
	if !IsNil(o.TraceId) {
		toSerialize["trace_id"] = o.TraceId
	}
	if !IsNil(o.SpanId) {
		toSerialize["span_id"] = o.SpanId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApiError) UnmarshalJSON(data []byte) (err error) {
	varApiError := _ApiError{}

	err = json.Unmarshal(data, &varApiError)

	if err != nil {
		return err
	}

	*o = ApiError(varApiError)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "status")
		delete(additionalProperties, "requestId")
		delete(additionalProperties, "timestamp")
		delete(additionalProperties, "message")
		delete(additionalProperties, "debugMessage")
		delete(additionalProperties, "subErrors")
		delete(additionalProperties, "trace_id")
		delete(additionalProperties, "span_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApiError struct {
	value *ApiError
	isSet bool
}

func (v NullableApiError) Get() *ApiError {
	return v.value
}

func (v *NullableApiError) Set(val *ApiError) {
	v.value = val
	v.isSet = true
}

func (v NullableApiError) IsSet() bool {
	return v.isSet
}

func (v *NullableApiError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiError(val *ApiError) *NullableApiError {
	return &NullableApiError{value: val, isSet: true}
}

func (v NullableApiError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
