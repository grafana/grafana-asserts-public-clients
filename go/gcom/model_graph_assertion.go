/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-055054
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the GraphAssertion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GraphAssertion{}

// GraphAssertion struct for GraphAssertion
type GraphAssertion struct {
	AssertionName        *string `json:"assertionName,omitempty"`
	Severity             *string `json:"severity,omitempty"`
	Category             *string `json:"category,omitempty"`
	EntityType           *string `json:"entityType,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GraphAssertion GraphAssertion

// NewGraphAssertion instantiates a new GraphAssertion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGraphAssertion() *GraphAssertion {
	this := GraphAssertion{}
	return &this
}

// NewGraphAssertionWithDefaults instantiates a new GraphAssertion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGraphAssertionWithDefaults() *GraphAssertion {
	this := GraphAssertion{}
	return &this
}

// GetAssertionName returns the AssertionName field value if set, zero value otherwise.
func (o *GraphAssertion) GetAssertionName() string {
	if o == nil || IsNil(o.AssertionName) {
		var ret string
		return ret
	}
	return *o.AssertionName
}

// GetAssertionNameOk returns a tuple with the AssertionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphAssertion) GetAssertionNameOk() (*string, bool) {
	if o == nil || IsNil(o.AssertionName) {
		return nil, false
	}
	return o.AssertionName, true
}

// HasAssertionName returns a boolean if a field has been set.
func (o *GraphAssertion) HasAssertionName() bool {
	if o != nil && !IsNil(o.AssertionName) {
		return true
	}

	return false
}

// SetAssertionName gets a reference to the given string and assigns it to the AssertionName field.
func (o *GraphAssertion) SetAssertionName(v string) {
	o.AssertionName = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *GraphAssertion) GetSeverity() string {
	if o == nil || IsNil(o.Severity) {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphAssertion) GetSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *GraphAssertion) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *GraphAssertion) SetSeverity(v string) {
	o.Severity = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *GraphAssertion) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphAssertion) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *GraphAssertion) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *GraphAssertion) SetCategory(v string) {
	o.Category = &v
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *GraphAssertion) GetEntityType() string {
	if o == nil || IsNil(o.EntityType) {
		var ret string
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphAssertion) GetEntityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EntityType) {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *GraphAssertion) HasEntityType() bool {
	if o != nil && !IsNil(o.EntityType) {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given string and assigns it to the EntityType field.
func (o *GraphAssertion) SetEntityType(v string) {
	o.EntityType = &v
}

func (o GraphAssertion) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GraphAssertion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AssertionName) {
		toSerialize["assertionName"] = o.AssertionName
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.EntityType) {
		toSerialize["entityType"] = o.EntityType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GraphAssertion) UnmarshalJSON(data []byte) (err error) {
	varGraphAssertion := _GraphAssertion{}

	err = json.Unmarshal(data, &varGraphAssertion)

	if err != nil {
		return err
	}

	*o = GraphAssertion(varGraphAssertion)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "assertionName")
		delete(additionalProperties, "severity")
		delete(additionalProperties, "category")
		delete(additionalProperties, "entityType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGraphAssertion struct {
	value *GraphAssertion
	isSet bool
}

func (v NullableGraphAssertion) Get() *GraphAssertion {
	return v.value
}

func (v *NullableGraphAssertion) Set(val *GraphAssertion) {
	v.value = val
	v.isSet = true
}

func (v NullableGraphAssertion) IsSet() bool {
	return v.isSet
}

func (v *NullableGraphAssertion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGraphAssertion(val *GraphAssertion) *NullableGraphAssertion {
	return &NullableGraphAssertion{value: val, isSet: true}
}

func (v NullableGraphAssertion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGraphAssertion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
