/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-161538
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the VersionedAlertManagerPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionedAlertManagerPayload{}

// VersionedAlertManagerPayload struct for VersionedAlertManagerPayload
type VersionedAlertManagerPayload struct {
	Version              *string             `json:"version,omitempty"`
	Config               *AlertManagerConfig `json:"config,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VersionedAlertManagerPayload VersionedAlertManagerPayload

// NewVersionedAlertManagerPayload instantiates a new VersionedAlertManagerPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionedAlertManagerPayload() *VersionedAlertManagerPayload {
	this := VersionedAlertManagerPayload{}
	return &this
}

// NewVersionedAlertManagerPayloadWithDefaults instantiates a new VersionedAlertManagerPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionedAlertManagerPayloadWithDefaults() *VersionedAlertManagerPayload {
	this := VersionedAlertManagerPayload{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *VersionedAlertManagerPayload) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedAlertManagerPayload) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *VersionedAlertManagerPayload) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *VersionedAlertManagerPayload) SetVersion(v string) {
	o.Version = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *VersionedAlertManagerPayload) GetConfig() AlertManagerConfig {
	if o == nil || IsNil(o.Config) {
		var ret AlertManagerConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedAlertManagerPayload) GetConfigOk() (*AlertManagerConfig, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *VersionedAlertManagerPayload) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given AlertManagerConfig and assigns it to the Config field.
func (o *VersionedAlertManagerPayload) SetConfig(v AlertManagerConfig) {
	o.Config = &v
}

func (o VersionedAlertManagerPayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionedAlertManagerPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VersionedAlertManagerPayload) UnmarshalJSON(data []byte) (err error) {
	varVersionedAlertManagerPayload := _VersionedAlertManagerPayload{}

	err = json.Unmarshal(data, &varVersionedAlertManagerPayload)

	if err != nil {
		return err
	}

	*o = VersionedAlertManagerPayload(varVersionedAlertManagerPayload)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "version")
		delete(additionalProperties, "config")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVersionedAlertManagerPayload struct {
	value *VersionedAlertManagerPayload
	isSet bool
}

func (v NullableVersionedAlertManagerPayload) Get() *VersionedAlertManagerPayload {
	return v.value
}

func (v *NullableVersionedAlertManagerPayload) Set(val *VersionedAlertManagerPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionedAlertManagerPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionedAlertManagerPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionedAlertManagerPayload(val *VersionedAlertManagerPayload) *NullableVersionedAlertManagerPayload {
	return &NullableVersionedAlertManagerPayload{value: val, isSet: true}
}

func (v NullableVersionedAlertManagerPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionedAlertManagerPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
