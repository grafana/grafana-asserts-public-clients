/*
Asserts, Inc

Asserts Public API

API version: 1.0.0
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the DisabledRulesDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DisabledRulesDto{}

// DisabledRulesDto struct for DisabledRulesDto
type DisabledRulesDto struct {
	Disabled             []string `json:"disabled,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DisabledRulesDto DisabledRulesDto

// NewDisabledRulesDto instantiates a new DisabledRulesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisabledRulesDto() *DisabledRulesDto {
	this := DisabledRulesDto{}
	return &this
}

// NewDisabledRulesDtoWithDefaults instantiates a new DisabledRulesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDisabledRulesDtoWithDefaults() *DisabledRulesDto {
	this := DisabledRulesDto{}
	return &this
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *DisabledRulesDto) GetDisabled() []string {
	if o == nil || IsNil(o.Disabled) {
		var ret []string
		return ret
	}
	return o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisabledRulesDto) GetDisabledOk() ([]string, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *DisabledRulesDto) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given []string and assigns it to the Disabled field.
func (o *DisabledRulesDto) SetDisabled(v []string) {
	o.Disabled = v
}

func (o DisabledRulesDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DisabledRulesDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DisabledRulesDto) UnmarshalJSON(data []byte) (err error) {
	varDisabledRulesDto := _DisabledRulesDto{}

	err = json.Unmarshal(data, &varDisabledRulesDto)

	if err != nil {
		return err
	}

	*o = DisabledRulesDto(varDisabledRulesDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "disabled")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDisabledRulesDto struct {
	value *DisabledRulesDto
	isSet bool
}

func (v NullableDisabledRulesDto) Get() *DisabledRulesDto {
	return v.value
}

func (v *NullableDisabledRulesDto) Set(val *DisabledRulesDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDisabledRulesDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDisabledRulesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisabledRulesDto(val *DisabledRulesDto) *NullableDisabledRulesDto {
	return &NullableDisabledRulesDto{value: val, isSet: true}
}

func (v NullableDisabledRulesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisabledRulesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
