/*
Asserts, Inc

Asserts Public API

API version: 2025.08.07-125604
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the AlertManagerInhibitRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertManagerInhibitRule{}

// AlertManagerInhibitRule struct for AlertManagerInhibitRule
type AlertManagerInhibitRule struct {
	Equal []string `json:"equal,omitempty"`
	// Deprecated
	TargetMatch map[string]string `json:"target_match,omitempty"`
	// Deprecated
	TargetMatchRe  map[string]string `json:"target_match_re,omitempty"`
	TargetMatchers []string          `json:"target_matchers,omitempty"`
	// Deprecated
	SourceMatch map[string]string `json:"source_match,omitempty"`
	// Deprecated
	SourceMatchRe        map[string]string `json:"source_match_re,omitempty"`
	SourceMatchers       []string          `json:"source_matchers,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AlertManagerInhibitRule AlertManagerInhibitRule

// NewAlertManagerInhibitRule instantiates a new AlertManagerInhibitRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertManagerInhibitRule() *AlertManagerInhibitRule {
	this := AlertManagerInhibitRule{}
	return &this
}

// NewAlertManagerInhibitRuleWithDefaults instantiates a new AlertManagerInhibitRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertManagerInhibitRuleWithDefaults() *AlertManagerInhibitRule {
	this := AlertManagerInhibitRule{}
	return &this
}

// GetEqual returns the Equal field value if set, zero value otherwise.
func (o *AlertManagerInhibitRule) GetEqual() []string {
	if o == nil || IsNil(o.Equal) {
		var ret []string
		return ret
	}
	return o.Equal
}

// GetEqualOk returns a tuple with the Equal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerInhibitRule) GetEqualOk() ([]string, bool) {
	if o == nil || IsNil(o.Equal) {
		return nil, false
	}
	return o.Equal, true
}

// HasEqual returns a boolean if a field has been set.
func (o *AlertManagerInhibitRule) HasEqual() bool {
	if o != nil && !IsNil(o.Equal) {
		return true
	}

	return false
}

// SetEqual gets a reference to the given []string and assigns it to the Equal field.
func (o *AlertManagerInhibitRule) SetEqual(v []string) {
	o.Equal = v
}

// GetTargetMatch returns the TargetMatch field value if set, zero value otherwise.
// Deprecated
func (o *AlertManagerInhibitRule) GetTargetMatch() map[string]string {
	if o == nil || IsNil(o.TargetMatch) {
		var ret map[string]string
		return ret
	}
	return o.TargetMatch
}

// GetTargetMatchOk returns a tuple with the TargetMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *AlertManagerInhibitRule) GetTargetMatchOk() (map[string]string, bool) {
	if o == nil || IsNil(o.TargetMatch) {
		return map[string]string{}, false
	}
	return o.TargetMatch, true
}

// HasTargetMatch returns a boolean if a field has been set.
func (o *AlertManagerInhibitRule) HasTargetMatch() bool {
	if o != nil && !IsNil(o.TargetMatch) {
		return true
	}

	return false
}

// SetTargetMatch gets a reference to the given map[string]string and assigns it to the TargetMatch field.
// Deprecated
func (o *AlertManagerInhibitRule) SetTargetMatch(v map[string]string) {
	o.TargetMatch = v
}

// GetTargetMatchRe returns the TargetMatchRe field value if set, zero value otherwise.
// Deprecated
func (o *AlertManagerInhibitRule) GetTargetMatchRe() map[string]string {
	if o == nil || IsNil(o.TargetMatchRe) {
		var ret map[string]string
		return ret
	}
	return o.TargetMatchRe
}

// GetTargetMatchReOk returns a tuple with the TargetMatchRe field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *AlertManagerInhibitRule) GetTargetMatchReOk() (map[string]string, bool) {
	if o == nil || IsNil(o.TargetMatchRe) {
		return map[string]string{}, false
	}
	return o.TargetMatchRe, true
}

// HasTargetMatchRe returns a boolean if a field has been set.
func (o *AlertManagerInhibitRule) HasTargetMatchRe() bool {
	if o != nil && !IsNil(o.TargetMatchRe) {
		return true
	}

	return false
}

// SetTargetMatchRe gets a reference to the given map[string]string and assigns it to the TargetMatchRe field.
// Deprecated
func (o *AlertManagerInhibitRule) SetTargetMatchRe(v map[string]string) {
	o.TargetMatchRe = v
}

// GetTargetMatchers returns the TargetMatchers field value if set, zero value otherwise.
func (o *AlertManagerInhibitRule) GetTargetMatchers() []string {
	if o == nil || IsNil(o.TargetMatchers) {
		var ret []string
		return ret
	}
	return o.TargetMatchers
}

// GetTargetMatchersOk returns a tuple with the TargetMatchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerInhibitRule) GetTargetMatchersOk() ([]string, bool) {
	if o == nil || IsNil(o.TargetMatchers) {
		return nil, false
	}
	return o.TargetMatchers, true
}

// HasTargetMatchers returns a boolean if a field has been set.
func (o *AlertManagerInhibitRule) HasTargetMatchers() bool {
	if o != nil && !IsNil(o.TargetMatchers) {
		return true
	}

	return false
}

// SetTargetMatchers gets a reference to the given []string and assigns it to the TargetMatchers field.
func (o *AlertManagerInhibitRule) SetTargetMatchers(v []string) {
	o.TargetMatchers = v
}

// GetSourceMatch returns the SourceMatch field value if set, zero value otherwise.
// Deprecated
func (o *AlertManagerInhibitRule) GetSourceMatch() map[string]string {
	if o == nil || IsNil(o.SourceMatch) {
		var ret map[string]string
		return ret
	}
	return o.SourceMatch
}

// GetSourceMatchOk returns a tuple with the SourceMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *AlertManagerInhibitRule) GetSourceMatchOk() (map[string]string, bool) {
	if o == nil || IsNil(o.SourceMatch) {
		return map[string]string{}, false
	}
	return o.SourceMatch, true
}

// HasSourceMatch returns a boolean if a field has been set.
func (o *AlertManagerInhibitRule) HasSourceMatch() bool {
	if o != nil && !IsNil(o.SourceMatch) {
		return true
	}

	return false
}

// SetSourceMatch gets a reference to the given map[string]string and assigns it to the SourceMatch field.
// Deprecated
func (o *AlertManagerInhibitRule) SetSourceMatch(v map[string]string) {
	o.SourceMatch = v
}

// GetSourceMatchRe returns the SourceMatchRe field value if set, zero value otherwise.
// Deprecated
func (o *AlertManagerInhibitRule) GetSourceMatchRe() map[string]string {
	if o == nil || IsNil(o.SourceMatchRe) {
		var ret map[string]string
		return ret
	}
	return o.SourceMatchRe
}

// GetSourceMatchReOk returns a tuple with the SourceMatchRe field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *AlertManagerInhibitRule) GetSourceMatchReOk() (map[string]string, bool) {
	if o == nil || IsNil(o.SourceMatchRe) {
		return map[string]string{}, false
	}
	return o.SourceMatchRe, true
}

// HasSourceMatchRe returns a boolean if a field has been set.
func (o *AlertManagerInhibitRule) HasSourceMatchRe() bool {
	if o != nil && !IsNil(o.SourceMatchRe) {
		return true
	}

	return false
}

// SetSourceMatchRe gets a reference to the given map[string]string and assigns it to the SourceMatchRe field.
// Deprecated
func (o *AlertManagerInhibitRule) SetSourceMatchRe(v map[string]string) {
	o.SourceMatchRe = v
}

// GetSourceMatchers returns the SourceMatchers field value if set, zero value otherwise.
func (o *AlertManagerInhibitRule) GetSourceMatchers() []string {
	if o == nil || IsNil(o.SourceMatchers) {
		var ret []string
		return ret
	}
	return o.SourceMatchers
}

// GetSourceMatchersOk returns a tuple with the SourceMatchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerInhibitRule) GetSourceMatchersOk() ([]string, bool) {
	if o == nil || IsNil(o.SourceMatchers) {
		return nil, false
	}
	return o.SourceMatchers, true
}

// HasSourceMatchers returns a boolean if a field has been set.
func (o *AlertManagerInhibitRule) HasSourceMatchers() bool {
	if o != nil && !IsNil(o.SourceMatchers) {
		return true
	}

	return false
}

// SetSourceMatchers gets a reference to the given []string and assigns it to the SourceMatchers field.
func (o *AlertManagerInhibitRule) SetSourceMatchers(v []string) {
	o.SourceMatchers = v
}

func (o AlertManagerInhibitRule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertManagerInhibitRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Equal) {
		toSerialize["equal"] = o.Equal
	}
	if !IsNil(o.TargetMatch) {
		toSerialize["target_match"] = o.TargetMatch
	}
	if !IsNil(o.TargetMatchRe) {
		toSerialize["target_match_re"] = o.TargetMatchRe
	}
	if !IsNil(o.TargetMatchers) {
		toSerialize["target_matchers"] = o.TargetMatchers
	}
	if !IsNil(o.SourceMatch) {
		toSerialize["source_match"] = o.SourceMatch
	}
	if !IsNil(o.SourceMatchRe) {
		toSerialize["source_match_re"] = o.SourceMatchRe
	}
	if !IsNil(o.SourceMatchers) {
		toSerialize["source_matchers"] = o.SourceMatchers
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AlertManagerInhibitRule) UnmarshalJSON(data []byte) (err error) {
	varAlertManagerInhibitRule := _AlertManagerInhibitRule{}

	err = json.Unmarshal(data, &varAlertManagerInhibitRule)

	if err != nil {
		return err
	}

	*o = AlertManagerInhibitRule(varAlertManagerInhibitRule)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "equal")
		delete(additionalProperties, "target_match")
		delete(additionalProperties, "target_match_re")
		delete(additionalProperties, "target_matchers")
		delete(additionalProperties, "source_match")
		delete(additionalProperties, "source_match_re")
		delete(additionalProperties, "source_matchers")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAlertManagerInhibitRule struct {
	value *AlertManagerInhibitRule
	isSet bool
}

func (v NullableAlertManagerInhibitRule) Get() *AlertManagerInhibitRule {
	return v.value
}

func (v *NullableAlertManagerInhibitRule) Set(val *AlertManagerInhibitRule) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertManagerInhibitRule) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertManagerInhibitRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertManagerInhibitRule(val *AlertManagerInhibitRule) *NullableAlertManagerInhibitRule {
	return &NullableAlertManagerInhibitRule{value: val, isSet: true}
}

func (v NullableAlertManagerInhibitRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertManagerInhibitRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
