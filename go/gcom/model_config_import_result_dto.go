/*
Asserts, Inc

Asserts Public API

API version: 2025.08.07-125604
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the ConfigImportResultDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigImportResultDto{}

// ConfigImportResultDto struct for ConfigImportResultDto
type ConfigImportResultDto struct {
	FailedConfigs        map[string][]string `json:"failedConfigs,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ConfigImportResultDto ConfigImportResultDto

// NewConfigImportResultDto instantiates a new ConfigImportResultDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigImportResultDto() *ConfigImportResultDto {
	this := ConfigImportResultDto{}
	return &this
}

// NewConfigImportResultDtoWithDefaults instantiates a new ConfigImportResultDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigImportResultDtoWithDefaults() *ConfigImportResultDto {
	this := ConfigImportResultDto{}
	return &this
}

// GetFailedConfigs returns the FailedConfigs field value if set, zero value otherwise.
func (o *ConfigImportResultDto) GetFailedConfigs() map[string][]string {
	if o == nil || IsNil(o.FailedConfigs) {
		var ret map[string][]string
		return ret
	}
	return o.FailedConfigs
}

// GetFailedConfigsOk returns a tuple with the FailedConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigImportResultDto) GetFailedConfigsOk() (map[string][]string, bool) {
	if o == nil || IsNil(o.FailedConfigs) {
		return map[string][]string{}, false
	}
	return o.FailedConfigs, true
}

// HasFailedConfigs returns a boolean if a field has been set.
func (o *ConfigImportResultDto) HasFailedConfigs() bool {
	if o != nil && !IsNil(o.FailedConfigs) {
		return true
	}

	return false
}

// SetFailedConfigs gets a reference to the given map[string][]string and assigns it to the FailedConfigs field.
func (o *ConfigImportResultDto) SetFailedConfigs(v map[string][]string) {
	o.FailedConfigs = v
}

func (o ConfigImportResultDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigImportResultDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FailedConfigs) {
		toSerialize["failedConfigs"] = o.FailedConfigs
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConfigImportResultDto) UnmarshalJSON(data []byte) (err error) {
	varConfigImportResultDto := _ConfigImportResultDto{}

	err = json.Unmarshal(data, &varConfigImportResultDto)

	if err != nil {
		return err
	}

	*o = ConfigImportResultDto(varConfigImportResultDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "failedConfigs")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConfigImportResultDto struct {
	value *ConfigImportResultDto
	isSet bool
}

func (v NullableConfigImportResultDto) Get() *ConfigImportResultDto {
	return v.value
}

func (v *NullableConfigImportResultDto) Set(val *ConfigImportResultDto) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigImportResultDto) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigImportResultDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigImportResultDto(val *ConfigImportResultDto) *NullableConfigImportResultDto {
	return &NullableConfigImportResultDto{value: val, isSet: true}
}

func (v NullableConfigImportResultDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigImportResultDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
