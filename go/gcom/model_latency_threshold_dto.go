/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-112305
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the LatencyThresholdDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LatencyThresholdDto{}

// LatencyThresholdDto struct for LatencyThresholdDto
type LatencyThresholdDto struct {
	RequestType          *string  `json:"requestType,omitempty"`
	RequestContext       *string  `json:"requestContext,omitempty"`
	UpperThreshold       *float64 `json:"upperThreshold,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LatencyThresholdDto LatencyThresholdDto

// NewLatencyThresholdDto instantiates a new LatencyThresholdDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLatencyThresholdDto() *LatencyThresholdDto {
	this := LatencyThresholdDto{}
	return &this
}

// NewLatencyThresholdDtoWithDefaults instantiates a new LatencyThresholdDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLatencyThresholdDtoWithDefaults() *LatencyThresholdDto {
	this := LatencyThresholdDto{}
	return &this
}

// GetRequestType returns the RequestType field value if set, zero value otherwise.
func (o *LatencyThresholdDto) GetRequestType() string {
	if o == nil || IsNil(o.RequestType) {
		var ret string
		return ret
	}
	return *o.RequestType
}

// GetRequestTypeOk returns a tuple with the RequestType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LatencyThresholdDto) GetRequestTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RequestType) {
		return nil, false
	}
	return o.RequestType, true
}

// HasRequestType returns a boolean if a field has been set.
func (o *LatencyThresholdDto) HasRequestType() bool {
	if o != nil && !IsNil(o.RequestType) {
		return true
	}

	return false
}

// SetRequestType gets a reference to the given string and assigns it to the RequestType field.
func (o *LatencyThresholdDto) SetRequestType(v string) {
	o.RequestType = &v
}

// GetRequestContext returns the RequestContext field value if set, zero value otherwise.
func (o *LatencyThresholdDto) GetRequestContext() string {
	if o == nil || IsNil(o.RequestContext) {
		var ret string
		return ret
	}
	return *o.RequestContext
}

// GetRequestContextOk returns a tuple with the RequestContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LatencyThresholdDto) GetRequestContextOk() (*string, bool) {
	if o == nil || IsNil(o.RequestContext) {
		return nil, false
	}
	return o.RequestContext, true
}

// HasRequestContext returns a boolean if a field has been set.
func (o *LatencyThresholdDto) HasRequestContext() bool {
	if o != nil && !IsNil(o.RequestContext) {
		return true
	}

	return false
}

// SetRequestContext gets a reference to the given string and assigns it to the RequestContext field.
func (o *LatencyThresholdDto) SetRequestContext(v string) {
	o.RequestContext = &v
}

// GetUpperThreshold returns the UpperThreshold field value if set, zero value otherwise.
func (o *LatencyThresholdDto) GetUpperThreshold() float64 {
	if o == nil || IsNil(o.UpperThreshold) {
		var ret float64
		return ret
	}
	return *o.UpperThreshold
}

// GetUpperThresholdOk returns a tuple with the UpperThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LatencyThresholdDto) GetUpperThresholdOk() (*float64, bool) {
	if o == nil || IsNil(o.UpperThreshold) {
		return nil, false
	}
	return o.UpperThreshold, true
}

// HasUpperThreshold returns a boolean if a field has been set.
func (o *LatencyThresholdDto) HasUpperThreshold() bool {
	if o != nil && !IsNil(o.UpperThreshold) {
		return true
	}

	return false
}

// SetUpperThreshold gets a reference to the given float64 and assigns it to the UpperThreshold field.
func (o *LatencyThresholdDto) SetUpperThreshold(v float64) {
	o.UpperThreshold = &v
}

func (o LatencyThresholdDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LatencyThresholdDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RequestType) {
		toSerialize["requestType"] = o.RequestType
	}
	if !IsNil(o.RequestContext) {
		toSerialize["requestContext"] = o.RequestContext
	}
	if !IsNil(o.UpperThreshold) {
		toSerialize["upperThreshold"] = o.UpperThreshold
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LatencyThresholdDto) UnmarshalJSON(data []byte) (err error) {
	varLatencyThresholdDto := _LatencyThresholdDto{}

	err = json.Unmarshal(data, &varLatencyThresholdDto)

	if err != nil {
		return err
	}

	*o = LatencyThresholdDto(varLatencyThresholdDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "requestType")
		delete(additionalProperties, "requestContext")
		delete(additionalProperties, "upperThreshold")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLatencyThresholdDto struct {
	value *LatencyThresholdDto
	isSet bool
}

func (v NullableLatencyThresholdDto) Get() *LatencyThresholdDto {
	return v.value
}

func (v *NullableLatencyThresholdDto) Set(val *LatencyThresholdDto) {
	v.value = val
	v.isSet = true
}

func (v NullableLatencyThresholdDto) IsSet() bool {
	return v.isSet
}

func (v *NullableLatencyThresholdDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLatencyThresholdDto(val *LatencyThresholdDto) *NullableLatencyThresholdDto {
	return &NullableLatencyThresholdDto{value: val, isSet: true}
}

func (v NullableLatencyThresholdDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLatencyThresholdDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
