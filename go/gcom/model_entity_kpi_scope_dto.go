/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-062139
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the EntityKpiScopeDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntityKpiScopeDto{}

// EntityKpiScopeDto struct for EntityKpiScopeDto
type EntityKpiScopeDto struct {
	Type                 *string  `json:"type,omitempty"`
	Kpis                 []string `json:"kpis,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EntityKpiScopeDto EntityKpiScopeDto

// NewEntityKpiScopeDto instantiates a new EntityKpiScopeDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityKpiScopeDto() *EntityKpiScopeDto {
	this := EntityKpiScopeDto{}
	return &this
}

// NewEntityKpiScopeDtoWithDefaults instantiates a new EntityKpiScopeDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityKpiScopeDtoWithDefaults() *EntityKpiScopeDto {
	this := EntityKpiScopeDto{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EntityKpiScopeDto) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityKpiScopeDto) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EntityKpiScopeDto) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EntityKpiScopeDto) SetType(v string) {
	o.Type = &v
}

// GetKpis returns the Kpis field value if set, zero value otherwise.
func (o *EntityKpiScopeDto) GetKpis() []string {
	if o == nil || IsNil(o.Kpis) {
		var ret []string
		return ret
	}
	return o.Kpis
}

// GetKpisOk returns a tuple with the Kpis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityKpiScopeDto) GetKpisOk() ([]string, bool) {
	if o == nil || IsNil(o.Kpis) {
		return nil, false
	}
	return o.Kpis, true
}

// HasKpis returns a boolean if a field has been set.
func (o *EntityKpiScopeDto) HasKpis() bool {
	if o != nil && !IsNil(o.Kpis) {
		return true
	}

	return false
}

// SetKpis gets a reference to the given []string and assigns it to the Kpis field.
func (o *EntityKpiScopeDto) SetKpis(v []string) {
	o.Kpis = v
}

func (o EntityKpiScopeDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntityKpiScopeDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Kpis) {
		toSerialize["kpis"] = o.Kpis
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EntityKpiScopeDto) UnmarshalJSON(data []byte) (err error) {
	varEntityKpiScopeDto := _EntityKpiScopeDto{}

	err = json.Unmarshal(data, &varEntityKpiScopeDto)

	if err != nil {
		return err
	}

	*o = EntityKpiScopeDto(varEntityKpiScopeDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "kpis")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEntityKpiScopeDto struct {
	value *EntityKpiScopeDto
	isSet bool
}

func (v NullableEntityKpiScopeDto) Get() *EntityKpiScopeDto {
	return v.value
}

func (v *NullableEntityKpiScopeDto) Set(val *EntityKpiScopeDto) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityKpiScopeDto) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityKpiScopeDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityKpiScopeDto(val *EntityKpiScopeDto) *NullableEntityKpiScopeDto {
	return &NullableEntityKpiScopeDto{value: val, isSet: true}
}

func (v NullableEntityKpiScopeDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityKpiScopeDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
