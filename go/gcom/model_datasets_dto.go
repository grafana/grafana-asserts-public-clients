/*
Asserts, Inc

Asserts Public API

API version: 2025.08.07-125604
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the DatasetsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatasetsDto{}

// DatasetsDto struct for DatasetsDto
type DatasetsDto struct {
	Items                []DatasetSummaryDto `json:"items,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DatasetsDto DatasetsDto

// NewDatasetsDto instantiates a new DatasetsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatasetsDto() *DatasetsDto {
	this := DatasetsDto{}
	return &this
}

// NewDatasetsDtoWithDefaults instantiates a new DatasetsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatasetsDtoWithDefaults() *DatasetsDto {
	this := DatasetsDto{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *DatasetsDto) GetItems() []DatasetSummaryDto {
	if o == nil || IsNil(o.Items) {
		var ret []DatasetSummaryDto
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetsDto) GetItemsOk() ([]DatasetSummaryDto, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *DatasetsDto) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []DatasetSummaryDto and assigns it to the Items field.
func (o *DatasetsDto) SetItems(v []DatasetSummaryDto) {
	o.Items = v
}

func (o DatasetsDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatasetsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DatasetsDto) UnmarshalJSON(data []byte) (err error) {
	varDatasetsDto := _DatasetsDto{}

	err = json.Unmarshal(data, &varDatasetsDto)

	if err != nil {
		return err
	}

	*o = DatasetsDto(varDatasetsDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "items")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDatasetsDto struct {
	value *DatasetsDto
	isSet bool
}

func (v NullableDatasetsDto) Get() *DatasetsDto {
	return v.value
}

func (v *NullableDatasetsDto) Set(val *DatasetsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDatasetsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDatasetsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatasetsDto(val *DatasetsDto) *NullableDatasetsDto {
	return &NullableDatasetsDto{value: val, isSet: true}
}

func (v NullableDatasetsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatasetsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
