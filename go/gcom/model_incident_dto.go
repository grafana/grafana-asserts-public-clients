/*
Asserts, Inc

Asserts Public API

API version: 2025.08.25-143624
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the IncidentDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IncidentDto{}

// IncidentDto struct for IncidentDto
type IncidentDto struct {
	StartTime            *int64  `json:"startTime,omitempty"`
	EndTime              *int64  `json:"endTime,omitempty"`
	Severity             *string `json:"severity,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IncidentDto IncidentDto

// NewIncidentDto instantiates a new IncidentDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncidentDto() *IncidentDto {
	this := IncidentDto{}
	return &this
}

// NewIncidentDtoWithDefaults instantiates a new IncidentDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentDtoWithDefaults() *IncidentDto {
	this := IncidentDto{}
	return &this
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *IncidentDto) GetStartTime() int64 {
	if o == nil || IsNil(o.StartTime) {
		var ret int64
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentDto) GetStartTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *IncidentDto) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given int64 and assigns it to the StartTime field.
func (o *IncidentDto) SetStartTime(v int64) {
	o.StartTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *IncidentDto) GetEndTime() int64 {
	if o == nil || IsNil(o.EndTime) {
		var ret int64
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentDto) GetEndTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *IncidentDto) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given int64 and assigns it to the EndTime field.
func (o *IncidentDto) SetEndTime(v int64) {
	o.EndTime = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *IncidentDto) GetSeverity() string {
	if o == nil || IsNil(o.Severity) {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentDto) GetSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *IncidentDto) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *IncidentDto) SetSeverity(v string) {
	o.Severity = &v
}

func (o IncidentDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IncidentDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !IsNil(o.EndTime) {
		toSerialize["endTime"] = o.EndTime
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IncidentDto) UnmarshalJSON(data []byte) (err error) {
	varIncidentDto := _IncidentDto{}

	err = json.Unmarshal(data, &varIncidentDto)

	if err != nil {
		return err
	}

	*o = IncidentDto(varIncidentDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "startTime")
		delete(additionalProperties, "endTime")
		delete(additionalProperties, "severity")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIncidentDto struct {
	value *IncidentDto
	isSet bool
}

func (v NullableIncidentDto) Get() *IncidentDto {
	return v.value
}

func (v *NullableIncidentDto) Set(val *IncidentDto) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentDto) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentDto(val *IncidentDto) *NullableIncidentDto {
	return &NullableIncidentDto{value: val, isSet: true}
}

func (v NullableIncidentDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
