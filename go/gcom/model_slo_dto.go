/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-161538
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the SloDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SloDto{}

// SloDto struct for SloDto
type SloDto struct {
	Name                 *string                `json:"name,omitempty"`
	Scope                map[string]interface{} `json:"scope,omitempty"`
	Type                 *string                `json:"type,omitempty"`
	Action               *string                `json:"action,omitempty"`
	BadEventQuery        *string                `json:"badEventQuery,omitempty"`
	TotalEventQuery      *string                `json:"totalEventQuery,omitempty"`
	MeasurementQuery     *string                `json:"measurementQuery,omitempty"`
	SloTargetDtos        []SloTargetDto         `json:"sloTargetDtos,omitempty"`
	NoData               *bool                  `json:"noData,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SloDto SloDto

// NewSloDto instantiates a new SloDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSloDto() *SloDto {
	this := SloDto{}
	return &this
}

// NewSloDtoWithDefaults instantiates a new SloDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSloDtoWithDefaults() *SloDto {
	this := SloDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SloDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SloDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SloDto) SetName(v string) {
	o.Name = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *SloDto) GetScope() map[string]interface{} {
	if o == nil || IsNil(o.Scope) {
		var ret map[string]interface{}
		return ret
	}
	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloDto) GetScopeOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Scope) {
		return map[string]interface{}{}, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *SloDto) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given map[string]interface{} and assigns it to the Scope field.
func (o *SloDto) SetScope(v map[string]interface{}) {
	o.Scope = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SloDto) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloDto) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SloDto) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SloDto) SetType(v string) {
	o.Type = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *SloDto) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloDto) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *SloDto) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *SloDto) SetAction(v string) {
	o.Action = &v
}

// GetBadEventQuery returns the BadEventQuery field value if set, zero value otherwise.
func (o *SloDto) GetBadEventQuery() string {
	if o == nil || IsNil(o.BadEventQuery) {
		var ret string
		return ret
	}
	return *o.BadEventQuery
}

// GetBadEventQueryOk returns a tuple with the BadEventQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloDto) GetBadEventQueryOk() (*string, bool) {
	if o == nil || IsNil(o.BadEventQuery) {
		return nil, false
	}
	return o.BadEventQuery, true
}

// HasBadEventQuery returns a boolean if a field has been set.
func (o *SloDto) HasBadEventQuery() bool {
	if o != nil && !IsNil(o.BadEventQuery) {
		return true
	}

	return false
}

// SetBadEventQuery gets a reference to the given string and assigns it to the BadEventQuery field.
func (o *SloDto) SetBadEventQuery(v string) {
	o.BadEventQuery = &v
}

// GetTotalEventQuery returns the TotalEventQuery field value if set, zero value otherwise.
func (o *SloDto) GetTotalEventQuery() string {
	if o == nil || IsNil(o.TotalEventQuery) {
		var ret string
		return ret
	}
	return *o.TotalEventQuery
}

// GetTotalEventQueryOk returns a tuple with the TotalEventQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloDto) GetTotalEventQueryOk() (*string, bool) {
	if o == nil || IsNil(o.TotalEventQuery) {
		return nil, false
	}
	return o.TotalEventQuery, true
}

// HasTotalEventQuery returns a boolean if a field has been set.
func (o *SloDto) HasTotalEventQuery() bool {
	if o != nil && !IsNil(o.TotalEventQuery) {
		return true
	}

	return false
}

// SetTotalEventQuery gets a reference to the given string and assigns it to the TotalEventQuery field.
func (o *SloDto) SetTotalEventQuery(v string) {
	o.TotalEventQuery = &v
}

// GetMeasurementQuery returns the MeasurementQuery field value if set, zero value otherwise.
func (o *SloDto) GetMeasurementQuery() string {
	if o == nil || IsNil(o.MeasurementQuery) {
		var ret string
		return ret
	}
	return *o.MeasurementQuery
}

// GetMeasurementQueryOk returns a tuple with the MeasurementQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloDto) GetMeasurementQueryOk() (*string, bool) {
	if o == nil || IsNil(o.MeasurementQuery) {
		return nil, false
	}
	return o.MeasurementQuery, true
}

// HasMeasurementQuery returns a boolean if a field has been set.
func (o *SloDto) HasMeasurementQuery() bool {
	if o != nil && !IsNil(o.MeasurementQuery) {
		return true
	}

	return false
}

// SetMeasurementQuery gets a reference to the given string and assigns it to the MeasurementQuery field.
func (o *SloDto) SetMeasurementQuery(v string) {
	o.MeasurementQuery = &v
}

// GetSloTargetDtos returns the SloTargetDtos field value if set, zero value otherwise.
func (o *SloDto) GetSloTargetDtos() []SloTargetDto {
	if o == nil || IsNil(o.SloTargetDtos) {
		var ret []SloTargetDto
		return ret
	}
	return o.SloTargetDtos
}

// GetSloTargetDtosOk returns a tuple with the SloTargetDtos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloDto) GetSloTargetDtosOk() ([]SloTargetDto, bool) {
	if o == nil || IsNil(o.SloTargetDtos) {
		return nil, false
	}
	return o.SloTargetDtos, true
}

// HasSloTargetDtos returns a boolean if a field has been set.
func (o *SloDto) HasSloTargetDtos() bool {
	if o != nil && !IsNil(o.SloTargetDtos) {
		return true
	}

	return false
}

// SetSloTargetDtos gets a reference to the given []SloTargetDto and assigns it to the SloTargetDtos field.
func (o *SloDto) SetSloTargetDtos(v []SloTargetDto) {
	o.SloTargetDtos = v
}

// GetNoData returns the NoData field value if set, zero value otherwise.
func (o *SloDto) GetNoData() bool {
	if o == nil || IsNil(o.NoData) {
		var ret bool
		return ret
	}
	return *o.NoData
}

// GetNoDataOk returns a tuple with the NoData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloDto) GetNoDataOk() (*bool, bool) {
	if o == nil || IsNil(o.NoData) {
		return nil, false
	}
	return o.NoData, true
}

// HasNoData returns a boolean if a field has been set.
func (o *SloDto) HasNoData() bool {
	if o != nil && !IsNil(o.NoData) {
		return true
	}

	return false
}

// SetNoData gets a reference to the given bool and assigns it to the NoData field.
func (o *SloDto) SetNoData(v bool) {
	o.NoData = &v
}

func (o SloDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SloDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.BadEventQuery) {
		toSerialize["badEventQuery"] = o.BadEventQuery
	}
	if !IsNil(o.TotalEventQuery) {
		toSerialize["totalEventQuery"] = o.TotalEventQuery
	}
	if !IsNil(o.MeasurementQuery) {
		toSerialize["measurementQuery"] = o.MeasurementQuery
	}
	if !IsNil(o.SloTargetDtos) {
		toSerialize["sloTargetDtos"] = o.SloTargetDtos
	}
	if !IsNil(o.NoData) {
		toSerialize["noData"] = o.NoData
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SloDto) UnmarshalJSON(data []byte) (err error) {
	varSloDto := _SloDto{}

	err = json.Unmarshal(data, &varSloDto)

	if err != nil {
		return err
	}

	*o = SloDto(varSloDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "scope")
		delete(additionalProperties, "type")
		delete(additionalProperties, "action")
		delete(additionalProperties, "badEventQuery")
		delete(additionalProperties, "totalEventQuery")
		delete(additionalProperties, "measurementQuery")
		delete(additionalProperties, "sloTargetDtos")
		delete(additionalProperties, "noData")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSloDto struct {
	value *SloDto
	isSet bool
}

func (v NullableSloDto) Get() *SloDto {
	return v.value
}

func (v *NullableSloDto) Set(val *SloDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSloDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSloDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloDto(val *SloDto) *NullableSloDto {
	return &NullableSloDto{value: val, isSet: true}
}

func (v NullableSloDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
