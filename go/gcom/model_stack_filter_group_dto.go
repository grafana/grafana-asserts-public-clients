/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-161538
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the StackFilterGroupDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StackFilterGroupDto{}

// StackFilterGroupDto struct for StackFilterGroupDto
type StackFilterGroupDto struct {
	EnvLabel             *string          `json:"envLabel,omitempty"`
	EnvName              *string          `json:"envName,omitempty"`
	SiteLabel            *string          `json:"siteLabel,omitempty"`
	Filters              []StackFilterDto `json:"filters,omitempty"`
	EnvLabelValues       []string         `json:"envLabelValues,omitempty"`
	SiteLabelValues      []string         `json:"siteLabelValues,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StackFilterGroupDto StackFilterGroupDto

// NewStackFilterGroupDto instantiates a new StackFilterGroupDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStackFilterGroupDto() *StackFilterGroupDto {
	this := StackFilterGroupDto{}
	return &this
}

// NewStackFilterGroupDtoWithDefaults instantiates a new StackFilterGroupDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStackFilterGroupDtoWithDefaults() *StackFilterGroupDto {
	this := StackFilterGroupDto{}
	return &this
}

// GetEnvLabel returns the EnvLabel field value if set, zero value otherwise.
func (o *StackFilterGroupDto) GetEnvLabel() string {
	if o == nil || IsNil(o.EnvLabel) {
		var ret string
		return ret
	}
	return *o.EnvLabel
}

// GetEnvLabelOk returns a tuple with the EnvLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackFilterGroupDto) GetEnvLabelOk() (*string, bool) {
	if o == nil || IsNil(o.EnvLabel) {
		return nil, false
	}
	return o.EnvLabel, true
}

// HasEnvLabel returns a boolean if a field has been set.
func (o *StackFilterGroupDto) HasEnvLabel() bool {
	if o != nil && !IsNil(o.EnvLabel) {
		return true
	}

	return false
}

// SetEnvLabel gets a reference to the given string and assigns it to the EnvLabel field.
func (o *StackFilterGroupDto) SetEnvLabel(v string) {
	o.EnvLabel = &v
}

// GetEnvName returns the EnvName field value if set, zero value otherwise.
func (o *StackFilterGroupDto) GetEnvName() string {
	if o == nil || IsNil(o.EnvName) {
		var ret string
		return ret
	}
	return *o.EnvName
}

// GetEnvNameOk returns a tuple with the EnvName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackFilterGroupDto) GetEnvNameOk() (*string, bool) {
	if o == nil || IsNil(o.EnvName) {
		return nil, false
	}
	return o.EnvName, true
}

// HasEnvName returns a boolean if a field has been set.
func (o *StackFilterGroupDto) HasEnvName() bool {
	if o != nil && !IsNil(o.EnvName) {
		return true
	}

	return false
}

// SetEnvName gets a reference to the given string and assigns it to the EnvName field.
func (o *StackFilterGroupDto) SetEnvName(v string) {
	o.EnvName = &v
}

// GetSiteLabel returns the SiteLabel field value if set, zero value otherwise.
func (o *StackFilterGroupDto) GetSiteLabel() string {
	if o == nil || IsNil(o.SiteLabel) {
		var ret string
		return ret
	}
	return *o.SiteLabel
}

// GetSiteLabelOk returns a tuple with the SiteLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackFilterGroupDto) GetSiteLabelOk() (*string, bool) {
	if o == nil || IsNil(o.SiteLabel) {
		return nil, false
	}
	return o.SiteLabel, true
}

// HasSiteLabel returns a boolean if a field has been set.
func (o *StackFilterGroupDto) HasSiteLabel() bool {
	if o != nil && !IsNil(o.SiteLabel) {
		return true
	}

	return false
}

// SetSiteLabel gets a reference to the given string and assigns it to the SiteLabel field.
func (o *StackFilterGroupDto) SetSiteLabel(v string) {
	o.SiteLabel = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *StackFilterGroupDto) GetFilters() []StackFilterDto {
	if o == nil || IsNil(o.Filters) {
		var ret []StackFilterDto
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackFilterGroupDto) GetFiltersOk() ([]StackFilterDto, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *StackFilterGroupDto) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []StackFilterDto and assigns it to the Filters field.
func (o *StackFilterGroupDto) SetFilters(v []StackFilterDto) {
	o.Filters = v
}

// GetEnvLabelValues returns the EnvLabelValues field value if set, zero value otherwise.
func (o *StackFilterGroupDto) GetEnvLabelValues() []string {
	if o == nil || IsNil(o.EnvLabelValues) {
		var ret []string
		return ret
	}
	return o.EnvLabelValues
}

// GetEnvLabelValuesOk returns a tuple with the EnvLabelValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackFilterGroupDto) GetEnvLabelValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.EnvLabelValues) {
		return nil, false
	}
	return o.EnvLabelValues, true
}

// HasEnvLabelValues returns a boolean if a field has been set.
func (o *StackFilterGroupDto) HasEnvLabelValues() bool {
	if o != nil && !IsNil(o.EnvLabelValues) {
		return true
	}

	return false
}

// SetEnvLabelValues gets a reference to the given []string and assigns it to the EnvLabelValues field.
func (o *StackFilterGroupDto) SetEnvLabelValues(v []string) {
	o.EnvLabelValues = v
}

// GetSiteLabelValues returns the SiteLabelValues field value if set, zero value otherwise.
func (o *StackFilterGroupDto) GetSiteLabelValues() []string {
	if o == nil || IsNil(o.SiteLabelValues) {
		var ret []string
		return ret
	}
	return o.SiteLabelValues
}

// GetSiteLabelValuesOk returns a tuple with the SiteLabelValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackFilterGroupDto) GetSiteLabelValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.SiteLabelValues) {
		return nil, false
	}
	return o.SiteLabelValues, true
}

// HasSiteLabelValues returns a boolean if a field has been set.
func (o *StackFilterGroupDto) HasSiteLabelValues() bool {
	if o != nil && !IsNil(o.SiteLabelValues) {
		return true
	}

	return false
}

// SetSiteLabelValues gets a reference to the given []string and assigns it to the SiteLabelValues field.
func (o *StackFilterGroupDto) SetSiteLabelValues(v []string) {
	o.SiteLabelValues = v
}

func (o StackFilterGroupDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StackFilterGroupDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnvLabel) {
		toSerialize["envLabel"] = o.EnvLabel
	}
	if !IsNil(o.EnvName) {
		toSerialize["envName"] = o.EnvName
	}
	if !IsNil(o.SiteLabel) {
		toSerialize["siteLabel"] = o.SiteLabel
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.EnvLabelValues) {
		toSerialize["envLabelValues"] = o.EnvLabelValues
	}
	if !IsNil(o.SiteLabelValues) {
		toSerialize["siteLabelValues"] = o.SiteLabelValues
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StackFilterGroupDto) UnmarshalJSON(data []byte) (err error) {
	varStackFilterGroupDto := _StackFilterGroupDto{}

	err = json.Unmarshal(data, &varStackFilterGroupDto)

	if err != nil {
		return err
	}

	*o = StackFilterGroupDto(varStackFilterGroupDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "envLabel")
		delete(additionalProperties, "envName")
		delete(additionalProperties, "siteLabel")
		delete(additionalProperties, "filters")
		delete(additionalProperties, "envLabelValues")
		delete(additionalProperties, "siteLabelValues")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStackFilterGroupDto struct {
	value *StackFilterGroupDto
	isSet bool
}

func (v NullableStackFilterGroupDto) Get() *StackFilterGroupDto {
	return v.value
}

func (v *NullableStackFilterGroupDto) Set(val *StackFilterGroupDto) {
	v.value = val
	v.isSet = true
}

func (v NullableStackFilterGroupDto) IsSet() bool {
	return v.isSet
}

func (v *NullableStackFilterGroupDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStackFilterGroupDto(val *StackFilterGroupDto) *NullableStackFilterGroupDto {
	return &NullableStackFilterGroupDto{value: val, isSet: true}
}

func (v NullableStackFilterGroupDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStackFilterGroupDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
