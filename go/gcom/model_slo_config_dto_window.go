/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-062139
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// SloConfigDtoWindow - struct for SloConfigDtoWindow
type SloConfigDtoWindow struct {
	SloCalendarWindowConfigDto *SloCalendarWindowConfigDto
	SloRollingWindowConfigDto  *SloRollingWindowConfigDto
}

// SloCalendarWindowConfigDtoAsSloConfigDtoWindow is a convenience function that returns SloCalendarWindowConfigDto wrapped in SloConfigDtoWindow
func SloCalendarWindowConfigDtoAsSloConfigDtoWindow(v *SloCalendarWindowConfigDto) SloConfigDtoWindow {
	return SloConfigDtoWindow{
		SloCalendarWindowConfigDto: v,
	}
}

// SloRollingWindowConfigDtoAsSloConfigDtoWindow is a convenience function that returns SloRollingWindowConfigDto wrapped in SloConfigDtoWindow
func SloRollingWindowConfigDtoAsSloConfigDtoWindow(v *SloRollingWindowConfigDto) SloConfigDtoWindow {
	return SloConfigDtoWindow{
		SloRollingWindowConfigDto: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *SloConfigDtoWindow) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SloCalendarWindowConfigDto
	err = newStrictDecoder(data).Decode(&dst.SloCalendarWindowConfigDto)
	if err == nil {
		jsonSloCalendarWindowConfigDto, _ := json.Marshal(dst.SloCalendarWindowConfigDto)
		if string(jsonSloCalendarWindowConfigDto) == "{}" { // empty struct
			dst.SloCalendarWindowConfigDto = nil
		} else {
			if err = validator.Validate(dst.SloCalendarWindowConfigDto); err != nil {
				dst.SloCalendarWindowConfigDto = nil
			} else {
				match++
			}
		}
	} else {
		dst.SloCalendarWindowConfigDto = nil
	}

	// try to unmarshal data into SloRollingWindowConfigDto
	err = newStrictDecoder(data).Decode(&dst.SloRollingWindowConfigDto)
	if err == nil {
		jsonSloRollingWindowConfigDto, _ := json.Marshal(dst.SloRollingWindowConfigDto)
		if string(jsonSloRollingWindowConfigDto) == "{}" { // empty struct
			dst.SloRollingWindowConfigDto = nil
		} else {
			if err = validator.Validate(dst.SloRollingWindowConfigDto); err != nil {
				dst.SloRollingWindowConfigDto = nil
			} else {
				match++
			}
		}
	} else {
		dst.SloRollingWindowConfigDto = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SloCalendarWindowConfigDto = nil
		dst.SloRollingWindowConfigDto = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SloConfigDtoWindow)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SloConfigDtoWindow)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SloConfigDtoWindow) MarshalJSON() ([]byte, error) {
	if src.SloCalendarWindowConfigDto != nil {
		return json.Marshal(&src.SloCalendarWindowConfigDto)
	}

	if src.SloRollingWindowConfigDto != nil {
		return json.Marshal(&src.SloRollingWindowConfigDto)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SloConfigDtoWindow) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.SloCalendarWindowConfigDto != nil {
		return obj.SloCalendarWindowConfigDto
	}

	if obj.SloRollingWindowConfigDto != nil {
		return obj.SloRollingWindowConfigDto
	}

	// all schemas are nil
	return nil
}

type NullableSloConfigDtoWindow struct {
	value *SloConfigDtoWindow
	isSet bool
}

func (v NullableSloConfigDtoWindow) Get() *SloConfigDtoWindow {
	return v.value
}

func (v *NullableSloConfigDtoWindow) Set(val *SloConfigDtoWindow) {
	v.value = val
	v.isSet = true
}

func (v NullableSloConfigDtoWindow) IsSet() bool {
	return v.isSet
}

func (v *NullableSloConfigDtoWindow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloConfigDtoWindow(val *SloConfigDtoWindow) *NullableSloConfigDtoWindow {
	return &NullableSloConfigDtoWindow{value: val, isSet: true}
}

func (v NullableSloConfigDtoWindow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloConfigDtoWindow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
