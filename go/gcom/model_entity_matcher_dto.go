/*
Asserts, Inc

Asserts Public API

API version: 2025.08.07-125604
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the EntityMatcherDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntityMatcherDto{}

// EntityMatcherDto struct for EntityMatcherDto
type EntityMatcherDto struct {
	EntityType           string               `json:"entityType"`
	PropertyMatchers     []PropertyMatcherDto `json:"propertyMatchers,omitempty"`
	ConnectToEntityTypes []string             `json:"connectToEntityTypes,omitempty"`
	HavingAssertion      *bool                `json:"havingAssertion,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EntityMatcherDto EntityMatcherDto

// NewEntityMatcherDto instantiates a new EntityMatcherDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityMatcherDto(entityType string) *EntityMatcherDto {
	this := EntityMatcherDto{}
	this.EntityType = entityType
	return &this
}

// NewEntityMatcherDtoWithDefaults instantiates a new EntityMatcherDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityMatcherDtoWithDefaults() *EntityMatcherDto {
	this := EntityMatcherDto{}
	return &this
}

// GetEntityType returns the EntityType field value
func (o *EntityMatcherDto) GetEntityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value
// and a boolean to check if the value has been set.
func (o *EntityMatcherDto) GetEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityType, true
}

// SetEntityType sets field value
func (o *EntityMatcherDto) SetEntityType(v string) {
	o.EntityType = v
}

// GetPropertyMatchers returns the PropertyMatchers field value if set, zero value otherwise.
func (o *EntityMatcherDto) GetPropertyMatchers() []PropertyMatcherDto {
	if o == nil || IsNil(o.PropertyMatchers) {
		var ret []PropertyMatcherDto
		return ret
	}
	return o.PropertyMatchers
}

// GetPropertyMatchersOk returns a tuple with the PropertyMatchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityMatcherDto) GetPropertyMatchersOk() ([]PropertyMatcherDto, bool) {
	if o == nil || IsNil(o.PropertyMatchers) {
		return nil, false
	}
	return o.PropertyMatchers, true
}

// HasPropertyMatchers returns a boolean if a field has been set.
func (o *EntityMatcherDto) HasPropertyMatchers() bool {
	if o != nil && !IsNil(o.PropertyMatchers) {
		return true
	}

	return false
}

// SetPropertyMatchers gets a reference to the given []PropertyMatcherDto and assigns it to the PropertyMatchers field.
func (o *EntityMatcherDto) SetPropertyMatchers(v []PropertyMatcherDto) {
	o.PropertyMatchers = v
}

// GetConnectToEntityTypes returns the ConnectToEntityTypes field value if set, zero value otherwise.
func (o *EntityMatcherDto) GetConnectToEntityTypes() []string {
	if o == nil || IsNil(o.ConnectToEntityTypes) {
		var ret []string
		return ret
	}
	return o.ConnectToEntityTypes
}

// GetConnectToEntityTypesOk returns a tuple with the ConnectToEntityTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityMatcherDto) GetConnectToEntityTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.ConnectToEntityTypes) {
		return nil, false
	}
	return o.ConnectToEntityTypes, true
}

// HasConnectToEntityTypes returns a boolean if a field has been set.
func (o *EntityMatcherDto) HasConnectToEntityTypes() bool {
	if o != nil && !IsNil(o.ConnectToEntityTypes) {
		return true
	}

	return false
}

// SetConnectToEntityTypes gets a reference to the given []string and assigns it to the ConnectToEntityTypes field.
func (o *EntityMatcherDto) SetConnectToEntityTypes(v []string) {
	o.ConnectToEntityTypes = v
}

// GetHavingAssertion returns the HavingAssertion field value if set, zero value otherwise.
func (o *EntityMatcherDto) GetHavingAssertion() bool {
	if o == nil || IsNil(o.HavingAssertion) {
		var ret bool
		return ret
	}
	return *o.HavingAssertion
}

// GetHavingAssertionOk returns a tuple with the HavingAssertion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityMatcherDto) GetHavingAssertionOk() (*bool, bool) {
	if o == nil || IsNil(o.HavingAssertion) {
		return nil, false
	}
	return o.HavingAssertion, true
}

// HasHavingAssertion returns a boolean if a field has been set.
func (o *EntityMatcherDto) HasHavingAssertion() bool {
	if o != nil && !IsNil(o.HavingAssertion) {
		return true
	}

	return false
}

// SetHavingAssertion gets a reference to the given bool and assigns it to the HavingAssertion field.
func (o *EntityMatcherDto) SetHavingAssertion(v bool) {
	o.HavingAssertion = &v
}

func (o EntityMatcherDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntityMatcherDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entityType"] = o.EntityType
	if !IsNil(o.PropertyMatchers) {
		toSerialize["propertyMatchers"] = o.PropertyMatchers
	}
	if !IsNil(o.ConnectToEntityTypes) {
		toSerialize["connectToEntityTypes"] = o.ConnectToEntityTypes
	}
	if !IsNil(o.HavingAssertion) {
		toSerialize["havingAssertion"] = o.HavingAssertion
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EntityMatcherDto) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varEntityMatcherDto := _EntityMatcherDto{}

	err = json.Unmarshal(data, &varEntityMatcherDto)

	if err != nil {
		return err
	}

	*o = EntityMatcherDto(varEntityMatcherDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "entityType")
		delete(additionalProperties, "propertyMatchers")
		delete(additionalProperties, "connectToEntityTypes")
		delete(additionalProperties, "havingAssertion")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEntityMatcherDto struct {
	value *EntityMatcherDto
	isSet bool
}

func (v NullableEntityMatcherDto) Get() *EntityMatcherDto {
	return v.value
}

func (v *NullableEntityMatcherDto) Set(val *EntityMatcherDto) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityMatcherDto) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityMatcherDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityMatcherDto(val *EntityMatcherDto) *NullableEntityMatcherDto {
	return &NullableEntityMatcherDto{value: val, isSet: true}
}

func (v NullableEntityMatcherDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityMatcherDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
