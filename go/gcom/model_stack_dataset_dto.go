/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-062139
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the StackDatasetDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StackDatasetDto{}

// StackDatasetDto struct for StackDatasetDto
type StackDatasetDto struct {
	DatasetType          string                `json:"datasetType"`
	DisabledVendors      []string              `json:"disabledVendors,omitempty"`
	FilterGroups         []StackFilterGroupDto `json:"filterGroups,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StackDatasetDto StackDatasetDto

// NewStackDatasetDto instantiates a new StackDatasetDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStackDatasetDto(datasetType string) *StackDatasetDto {
	this := StackDatasetDto{}
	this.DatasetType = datasetType
	return &this
}

// NewStackDatasetDtoWithDefaults instantiates a new StackDatasetDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStackDatasetDtoWithDefaults() *StackDatasetDto {
	this := StackDatasetDto{}
	return &this
}

// GetDatasetType returns the DatasetType field value
func (o *StackDatasetDto) GetDatasetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatasetType
}

// GetDatasetTypeOk returns a tuple with the DatasetType field value
// and a boolean to check if the value has been set.
func (o *StackDatasetDto) GetDatasetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatasetType, true
}

// SetDatasetType sets field value
func (o *StackDatasetDto) SetDatasetType(v string) {
	o.DatasetType = v
}

// GetDisabledVendors returns the DisabledVendors field value if set, zero value otherwise.
func (o *StackDatasetDto) GetDisabledVendors() []string {
	if o == nil || IsNil(o.DisabledVendors) {
		var ret []string
		return ret
	}
	return o.DisabledVendors
}

// GetDisabledVendorsOk returns a tuple with the DisabledVendors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackDatasetDto) GetDisabledVendorsOk() ([]string, bool) {
	if o == nil || IsNil(o.DisabledVendors) {
		return nil, false
	}
	return o.DisabledVendors, true
}

// HasDisabledVendors returns a boolean if a field has been set.
func (o *StackDatasetDto) HasDisabledVendors() bool {
	if o != nil && !IsNil(o.DisabledVendors) {
		return true
	}

	return false
}

// SetDisabledVendors gets a reference to the given []string and assigns it to the DisabledVendors field.
func (o *StackDatasetDto) SetDisabledVendors(v []string) {
	o.DisabledVendors = v
}

// GetFilterGroups returns the FilterGroups field value if set, zero value otherwise.
func (o *StackDatasetDto) GetFilterGroups() []StackFilterGroupDto {
	if o == nil || IsNil(o.FilterGroups) {
		var ret []StackFilterGroupDto
		return ret
	}
	return o.FilterGroups
}

// GetFilterGroupsOk returns a tuple with the FilterGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackDatasetDto) GetFilterGroupsOk() ([]StackFilterGroupDto, bool) {
	if o == nil || IsNil(o.FilterGroups) {
		return nil, false
	}
	return o.FilterGroups, true
}

// HasFilterGroups returns a boolean if a field has been set.
func (o *StackDatasetDto) HasFilterGroups() bool {
	if o != nil && !IsNil(o.FilterGroups) {
		return true
	}

	return false
}

// SetFilterGroups gets a reference to the given []StackFilterGroupDto and assigns it to the FilterGroups field.
func (o *StackDatasetDto) SetFilterGroups(v []StackFilterGroupDto) {
	o.FilterGroups = v
}

func (o StackDatasetDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StackDatasetDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["datasetType"] = o.DatasetType
	if !IsNil(o.DisabledVendors) {
		toSerialize["disabledVendors"] = o.DisabledVendors
	}
	if !IsNil(o.FilterGroups) {
		toSerialize["filterGroups"] = o.FilterGroups
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StackDatasetDto) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varStackDatasetDto := _StackDatasetDto{}

	err = json.Unmarshal(data, &varStackDatasetDto)

	if err != nil {
		return err
	}

	*o = StackDatasetDto(varStackDatasetDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "datasetType")
		delete(additionalProperties, "disabledVendors")
		delete(additionalProperties, "filterGroups")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStackDatasetDto struct {
	value *StackDatasetDto
	isSet bool
}

func (v NullableStackDatasetDto) Get() *StackDatasetDto {
	return v.value
}

func (v *NullableStackDatasetDto) Set(val *StackDatasetDto) {
	v.value = val
	v.isSet = true
}

func (v NullableStackDatasetDto) IsSet() bool {
	return v.isSet
}

func (v *NullableStackDatasetDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStackDatasetDto(val *StackDatasetDto) *NullableStackDatasetDto {
	return &NullableStackDatasetDto{value: val, isSet: true}
}

func (v NullableStackDatasetDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStackDatasetDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
