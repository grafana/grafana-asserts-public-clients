/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-110859
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
	"reflect"
	"strings"
)

// checks if the OccurrenceSliConfigDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OccurrenceSliConfigDto{}

// OccurrenceSliConfigDto struct for OccurrenceSliConfigDto
type OccurrenceSliConfigDto struct {
	SliConfigDto
	Measurement          *string `json:"measurement,omitempty"`
	ThresholdComparator  *string `json:"thresholdComparator,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OccurrenceSliConfigDto OccurrenceSliConfigDto

// NewOccurrenceSliConfigDto instantiates a new OccurrenceSliConfigDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOccurrenceSliConfigDto(kind string) *OccurrenceSliConfigDto {
	this := OccurrenceSliConfigDto{}
	this.Kind = kind
	return &this
}

// NewOccurrenceSliConfigDtoWithDefaults instantiates a new OccurrenceSliConfigDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOccurrenceSliConfigDtoWithDefaults() *OccurrenceSliConfigDto {
	this := OccurrenceSliConfigDto{}
	return &this
}

// GetMeasurement returns the Measurement field value if set, zero value otherwise.
func (o *OccurrenceSliConfigDto) GetMeasurement() string {
	if o == nil || IsNil(o.Measurement) {
		var ret string
		return ret
	}
	return *o.Measurement
}

// GetMeasurementOk returns a tuple with the Measurement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OccurrenceSliConfigDto) GetMeasurementOk() (*string, bool) {
	if o == nil || IsNil(o.Measurement) {
		return nil, false
	}
	return o.Measurement, true
}

// HasMeasurement returns a boolean if a field has been set.
func (o *OccurrenceSliConfigDto) HasMeasurement() bool {
	if o != nil && !IsNil(o.Measurement) {
		return true
	}

	return false
}

// SetMeasurement gets a reference to the given string and assigns it to the Measurement field.
func (o *OccurrenceSliConfigDto) SetMeasurement(v string) {
	o.Measurement = &v
}

// GetThresholdComparator returns the ThresholdComparator field value if set, zero value otherwise.
func (o *OccurrenceSliConfigDto) GetThresholdComparator() string {
	if o == nil || IsNil(o.ThresholdComparator) {
		var ret string
		return ret
	}
	return *o.ThresholdComparator
}

// GetThresholdComparatorOk returns a tuple with the ThresholdComparator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OccurrenceSliConfigDto) GetThresholdComparatorOk() (*string, bool) {
	if o == nil || IsNil(o.ThresholdComparator) {
		return nil, false
	}
	return o.ThresholdComparator, true
}

// HasThresholdComparator returns a boolean if a field has been set.
func (o *OccurrenceSliConfigDto) HasThresholdComparator() bool {
	if o != nil && !IsNil(o.ThresholdComparator) {
		return true
	}

	return false
}

// SetThresholdComparator gets a reference to the given string and assigns it to the ThresholdComparator field.
func (o *OccurrenceSliConfigDto) SetThresholdComparator(v string) {
	o.ThresholdComparator = &v
}

func (o OccurrenceSliConfigDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OccurrenceSliConfigDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedSliConfigDto, errSliConfigDto := json.Marshal(o.SliConfigDto)
	if errSliConfigDto != nil {
		return map[string]interface{}{}, errSliConfigDto
	}
	errSliConfigDto = json.Unmarshal([]byte(serializedSliConfigDto), &toSerialize)
	if errSliConfigDto != nil {
		return map[string]interface{}{}, errSliConfigDto
	}
	if !IsNil(o.Measurement) {
		toSerialize["measurement"] = o.Measurement
	}
	if !IsNil(o.ThresholdComparator) {
		toSerialize["thresholdComparator"] = o.ThresholdComparator
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OccurrenceSliConfigDto) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	type OccurrenceSliConfigDtoWithoutEmbeddedStruct struct {
		Measurement         *string `json:"measurement,omitempty"`
		ThresholdComparator *string `json:"thresholdComparator,omitempty"`
	}

	varOccurrenceSliConfigDtoWithoutEmbeddedStruct := OccurrenceSliConfigDtoWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varOccurrenceSliConfigDtoWithoutEmbeddedStruct)
	if err == nil {
		varOccurrenceSliConfigDto := _OccurrenceSliConfigDto{}
		varOccurrenceSliConfigDto.Measurement = varOccurrenceSliConfigDtoWithoutEmbeddedStruct.Measurement
		varOccurrenceSliConfigDto.ThresholdComparator = varOccurrenceSliConfigDtoWithoutEmbeddedStruct.ThresholdComparator
		*o = OccurrenceSliConfigDto(varOccurrenceSliConfigDto)
	} else {
		return err
	}

	varOccurrenceSliConfigDto := _OccurrenceSliConfigDto{}

	err = json.Unmarshal(data, &varOccurrenceSliConfigDto)
	if err == nil {
		o.SliConfigDto = varOccurrenceSliConfigDto.SliConfigDto
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "measurement")
		delete(additionalProperties, "thresholdComparator")

		// remove fields from embedded structs
		reflectSliConfigDto := reflect.ValueOf(o.SliConfigDto)
		for i := 0; i < reflectSliConfigDto.Type().NumField(); i++ {
			t := reflectSliConfigDto.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOccurrenceSliConfigDto struct {
	value *OccurrenceSliConfigDto
	isSet bool
}

func (v NullableOccurrenceSliConfigDto) Get() *OccurrenceSliConfigDto {
	return v.value
}

func (v *NullableOccurrenceSliConfigDto) Set(val *OccurrenceSliConfigDto) {
	v.value = val
	v.isSet = true
}

func (v NullableOccurrenceSliConfigDto) IsSet() bool {
	return v.isSet
}

func (v *NullableOccurrenceSliConfigDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOccurrenceSliConfigDto(val *OccurrenceSliConfigDto) *NullableOccurrenceSliConfigDto {
	return &NullableOccurrenceSliConfigDto{value: val, isSet: true}
}

func (v NullableOccurrenceSliConfigDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOccurrenceSliConfigDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
