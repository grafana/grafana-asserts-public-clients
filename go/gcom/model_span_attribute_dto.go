/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-084942
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the SpanAttributeDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpanAttributeDto{}

// SpanAttributeDto struct for SpanAttributeDto
type SpanAttributeDto struct {
	AttrName             *string                  `json:"attr_name,omitempty"`
	AttrConfigs          []SpanAttributeConfigDto `json:"attr_configs,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SpanAttributeDto SpanAttributeDto

// NewSpanAttributeDto instantiates a new SpanAttributeDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpanAttributeDto() *SpanAttributeDto {
	this := SpanAttributeDto{}
	return &this
}

// NewSpanAttributeDtoWithDefaults instantiates a new SpanAttributeDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpanAttributeDtoWithDefaults() *SpanAttributeDto {
	this := SpanAttributeDto{}
	return &this
}

// GetAttrName returns the AttrName field value if set, zero value otherwise.
func (o *SpanAttributeDto) GetAttrName() string {
	if o == nil || IsNil(o.AttrName) {
		var ret string
		return ret
	}
	return *o.AttrName
}

// GetAttrNameOk returns a tuple with the AttrName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpanAttributeDto) GetAttrNameOk() (*string, bool) {
	if o == nil || IsNil(o.AttrName) {
		return nil, false
	}
	return o.AttrName, true
}

// HasAttrName returns a boolean if a field has been set.
func (o *SpanAttributeDto) HasAttrName() bool {
	if o != nil && !IsNil(o.AttrName) {
		return true
	}

	return false
}

// SetAttrName gets a reference to the given string and assigns it to the AttrName field.
func (o *SpanAttributeDto) SetAttrName(v string) {
	o.AttrName = &v
}

// GetAttrConfigs returns the AttrConfigs field value if set, zero value otherwise.
func (o *SpanAttributeDto) GetAttrConfigs() []SpanAttributeConfigDto {
	if o == nil || IsNil(o.AttrConfigs) {
		var ret []SpanAttributeConfigDto
		return ret
	}
	return o.AttrConfigs
}

// GetAttrConfigsOk returns a tuple with the AttrConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpanAttributeDto) GetAttrConfigsOk() ([]SpanAttributeConfigDto, bool) {
	if o == nil || IsNil(o.AttrConfigs) {
		return nil, false
	}
	return o.AttrConfigs, true
}

// HasAttrConfigs returns a boolean if a field has been set.
func (o *SpanAttributeDto) HasAttrConfigs() bool {
	if o != nil && !IsNil(o.AttrConfigs) {
		return true
	}

	return false
}

// SetAttrConfigs gets a reference to the given []SpanAttributeConfigDto and assigns it to the AttrConfigs field.
func (o *SpanAttributeDto) SetAttrConfigs(v []SpanAttributeConfigDto) {
	o.AttrConfigs = v
}

func (o SpanAttributeDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpanAttributeDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttrName) {
		toSerialize["attr_name"] = o.AttrName
	}
	if !IsNil(o.AttrConfigs) {
		toSerialize["attr_configs"] = o.AttrConfigs
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SpanAttributeDto) UnmarshalJSON(data []byte) (err error) {
	varSpanAttributeDto := _SpanAttributeDto{}

	err = json.Unmarshal(data, &varSpanAttributeDto)

	if err != nil {
		return err
	}

	*o = SpanAttributeDto(varSpanAttributeDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "attr_name")
		delete(additionalProperties, "attr_configs")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSpanAttributeDto struct {
	value *SpanAttributeDto
	isSet bool
}

func (v NullableSpanAttributeDto) Get() *SpanAttributeDto {
	return v.value
}

func (v *NullableSpanAttributeDto) Set(val *SpanAttributeDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSpanAttributeDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSpanAttributeDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpanAttributeDto(val *SpanAttributeDto) *NullableSpanAttributeDto {
	return &NullableSpanAttributeDto{value: val, isSet: true}
}

func (v NullableSpanAttributeDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpanAttributeDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
