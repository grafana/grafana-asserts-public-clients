/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-161538
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the DisabledAlertConfigsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DisabledAlertConfigsDto{}

// DisabledAlertConfigsDto struct for DisabledAlertConfigsDto
type DisabledAlertConfigsDto struct {
	DisabledAlertConfigs []DisabledAlertConfigDto `json:"disabledAlertConfigs,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DisabledAlertConfigsDto DisabledAlertConfigsDto

// NewDisabledAlertConfigsDto instantiates a new DisabledAlertConfigsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisabledAlertConfigsDto() *DisabledAlertConfigsDto {
	this := DisabledAlertConfigsDto{}
	return &this
}

// NewDisabledAlertConfigsDtoWithDefaults instantiates a new DisabledAlertConfigsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDisabledAlertConfigsDtoWithDefaults() *DisabledAlertConfigsDto {
	this := DisabledAlertConfigsDto{}
	return &this
}

// GetDisabledAlertConfigs returns the DisabledAlertConfigs field value if set, zero value otherwise.
func (o *DisabledAlertConfigsDto) GetDisabledAlertConfigs() []DisabledAlertConfigDto {
	if o == nil || IsNil(o.DisabledAlertConfigs) {
		var ret []DisabledAlertConfigDto
		return ret
	}
	return o.DisabledAlertConfigs
}

// GetDisabledAlertConfigsOk returns a tuple with the DisabledAlertConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisabledAlertConfigsDto) GetDisabledAlertConfigsOk() ([]DisabledAlertConfigDto, bool) {
	if o == nil || IsNil(o.DisabledAlertConfigs) {
		return nil, false
	}
	return o.DisabledAlertConfigs, true
}

// HasDisabledAlertConfigs returns a boolean if a field has been set.
func (o *DisabledAlertConfigsDto) HasDisabledAlertConfigs() bool {
	if o != nil && !IsNil(o.DisabledAlertConfigs) {
		return true
	}

	return false
}

// SetDisabledAlertConfigs gets a reference to the given []DisabledAlertConfigDto and assigns it to the DisabledAlertConfigs field.
func (o *DisabledAlertConfigsDto) SetDisabledAlertConfigs(v []DisabledAlertConfigDto) {
	o.DisabledAlertConfigs = v
}

func (o DisabledAlertConfigsDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DisabledAlertConfigsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisabledAlertConfigs) {
		toSerialize["disabledAlertConfigs"] = o.DisabledAlertConfigs
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DisabledAlertConfigsDto) UnmarshalJSON(data []byte) (err error) {
	varDisabledAlertConfigsDto := _DisabledAlertConfigsDto{}

	err = json.Unmarshal(data, &varDisabledAlertConfigsDto)

	if err != nil {
		return err
	}

	*o = DisabledAlertConfigsDto(varDisabledAlertConfigsDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "disabledAlertConfigs")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDisabledAlertConfigsDto struct {
	value *DisabledAlertConfigsDto
	isSet bool
}

func (v NullableDisabledAlertConfigsDto) Get() *DisabledAlertConfigsDto {
	return v.value
}

func (v *NullableDisabledAlertConfigsDto) Set(val *DisabledAlertConfigsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDisabledAlertConfigsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDisabledAlertConfigsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisabledAlertConfigsDto(val *DisabledAlertConfigsDto) *NullableDisabledAlertConfigsDto {
	return &NullableDisabledAlertConfigsDto{value: val, isSet: true}
}

func (v NullableDisabledAlertConfigsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisabledAlertConfigsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
