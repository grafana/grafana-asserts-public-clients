/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-062139
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// ApiErrorSubErrorsInner - struct for ApiErrorSubErrorsInner
type ApiErrorSubErrorsInner struct {
	ApiSubError        *ApiSubError
	ApiValidationError *ApiValidationError
}

// ApiSubErrorAsApiErrorSubErrorsInner is a convenience function that returns ApiSubError wrapped in ApiErrorSubErrorsInner
func ApiSubErrorAsApiErrorSubErrorsInner(v *ApiSubError) ApiErrorSubErrorsInner {
	return ApiErrorSubErrorsInner{
		ApiSubError: v,
	}
}

// ApiValidationErrorAsApiErrorSubErrorsInner is a convenience function that returns ApiValidationError wrapped in ApiErrorSubErrorsInner
func ApiValidationErrorAsApiErrorSubErrorsInner(v *ApiValidationError) ApiErrorSubErrorsInner {
	return ApiErrorSubErrorsInner{
		ApiValidationError: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ApiErrorSubErrorsInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ApiSubError
	err = newStrictDecoder(data).Decode(&dst.ApiSubError)
	if err == nil {
		jsonApiSubError, _ := json.Marshal(dst.ApiSubError)
		if string(jsonApiSubError) == "{}" { // empty struct
			dst.ApiSubError = nil
		} else {
			if err = validator.Validate(dst.ApiSubError); err != nil {
				dst.ApiSubError = nil
			} else {
				match++
			}
		}
	} else {
		dst.ApiSubError = nil
	}

	// try to unmarshal data into ApiValidationError
	err = newStrictDecoder(data).Decode(&dst.ApiValidationError)
	if err == nil {
		jsonApiValidationError, _ := json.Marshal(dst.ApiValidationError)
		if string(jsonApiValidationError) == "{}" { // empty struct
			dst.ApiValidationError = nil
		} else {
			if err = validator.Validate(dst.ApiValidationError); err != nil {
				dst.ApiValidationError = nil
			} else {
				match++
			}
		}
	} else {
		dst.ApiValidationError = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ApiSubError = nil
		dst.ApiValidationError = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ApiErrorSubErrorsInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ApiErrorSubErrorsInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ApiErrorSubErrorsInner) MarshalJSON() ([]byte, error) {
	if src.ApiSubError != nil {
		return json.Marshal(&src.ApiSubError)
	}

	if src.ApiValidationError != nil {
		return json.Marshal(&src.ApiValidationError)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ApiErrorSubErrorsInner) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ApiSubError != nil {
		return obj.ApiSubError
	}

	if obj.ApiValidationError != nil {
		return obj.ApiValidationError
	}

	// all schemas are nil
	return nil
}

type NullableApiErrorSubErrorsInner struct {
	value *ApiErrorSubErrorsInner
	isSet bool
}

func (v NullableApiErrorSubErrorsInner) Get() *ApiErrorSubErrorsInner {
	return v.value
}

func (v *NullableApiErrorSubErrorsInner) Set(val *ApiErrorSubErrorsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableApiErrorSubErrorsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableApiErrorSubErrorsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiErrorSubErrorsInner(val *ApiErrorSubErrorsInner) *NullableApiErrorSubErrorsInner {
	return &NullableApiErrorSubErrorsInner{value: val, isSet: true}
}

func (v NullableApiErrorSubErrorsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiErrorSubErrorsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
