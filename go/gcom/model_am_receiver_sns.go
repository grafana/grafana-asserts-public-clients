/*
Asserts, Inc

Asserts Public API

API version: 1.0.1
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the AMReceiverSNS type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AMReceiverSNS{}

// AMReceiverSNS struct for AMReceiverSNS
type AMReceiverSNS struct {
	Sigv4                *AMReceiverSNSSigV4 `json:"sigv4,omitempty"`
	Subject              *string             `json:"subject,omitempty"`
	Message              *string             `json:"message,omitempty"`
	Attributes           map[string]string   `json:"attributes,omitempty"`
	SendResolved         *bool               `json:"send_resolved,omitempty"`
	ApiUrl               *string             `json:"api_url,omitempty"`
	TopicArn             *string             `json:"topic_arn,omitempty"`
	PhoneNumber          *string             `json:"phone_number,omitempty"`
	TargetArn            *string             `json:"target_arn,omitempty"`
	HttpConfig           *AlertManagerHttp   `json:"http_config,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AMReceiverSNS AMReceiverSNS

// NewAMReceiverSNS instantiates a new AMReceiverSNS object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAMReceiverSNS() *AMReceiverSNS {
	this := AMReceiverSNS{}
	return &this
}

// NewAMReceiverSNSWithDefaults instantiates a new AMReceiverSNS object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAMReceiverSNSWithDefaults() *AMReceiverSNS {
	this := AMReceiverSNS{}
	return &this
}

// GetSigv4 returns the Sigv4 field value if set, zero value otherwise.
func (o *AMReceiverSNS) GetSigv4() AMReceiverSNSSigV4 {
	if o == nil || IsNil(o.Sigv4) {
		var ret AMReceiverSNSSigV4
		return ret
	}
	return *o.Sigv4
}

// GetSigv4Ok returns a tuple with the Sigv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverSNS) GetSigv4Ok() (*AMReceiverSNSSigV4, bool) {
	if o == nil || IsNil(o.Sigv4) {
		return nil, false
	}
	return o.Sigv4, true
}

// HasSigv4 returns a boolean if a field has been set.
func (o *AMReceiverSNS) HasSigv4() bool {
	if o != nil && !IsNil(o.Sigv4) {
		return true
	}

	return false
}

// SetSigv4 gets a reference to the given AMReceiverSNSSigV4 and assigns it to the Sigv4 field.
func (o *AMReceiverSNS) SetSigv4(v AMReceiverSNSSigV4) {
	o.Sigv4 = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *AMReceiverSNS) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverSNS) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *AMReceiverSNS) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *AMReceiverSNS) SetSubject(v string) {
	o.Subject = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *AMReceiverSNS) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverSNS) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *AMReceiverSNS) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *AMReceiverSNS) SetMessage(v string) {
	o.Message = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *AMReceiverSNS) GetAttributes() map[string]string {
	if o == nil || IsNil(o.Attributes) {
		var ret map[string]string
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverSNS) GetAttributesOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Attributes) {
		return map[string]string{}, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *AMReceiverSNS) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]string and assigns it to the Attributes field.
func (o *AMReceiverSNS) SetAttributes(v map[string]string) {
	o.Attributes = v
}

// GetSendResolved returns the SendResolved field value if set, zero value otherwise.
func (o *AMReceiverSNS) GetSendResolved() bool {
	if o == nil || IsNil(o.SendResolved) {
		var ret bool
		return ret
	}
	return *o.SendResolved
}

// GetSendResolvedOk returns a tuple with the SendResolved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverSNS) GetSendResolvedOk() (*bool, bool) {
	if o == nil || IsNil(o.SendResolved) {
		return nil, false
	}
	return o.SendResolved, true
}

// HasSendResolved returns a boolean if a field has been set.
func (o *AMReceiverSNS) HasSendResolved() bool {
	if o != nil && !IsNil(o.SendResolved) {
		return true
	}

	return false
}

// SetSendResolved gets a reference to the given bool and assigns it to the SendResolved field.
func (o *AMReceiverSNS) SetSendResolved(v bool) {
	o.SendResolved = &v
}

// GetApiUrl returns the ApiUrl field value if set, zero value otherwise.
func (o *AMReceiverSNS) GetApiUrl() string {
	if o == nil || IsNil(o.ApiUrl) {
		var ret string
		return ret
	}
	return *o.ApiUrl
}

// GetApiUrlOk returns a tuple with the ApiUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverSNS) GetApiUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ApiUrl) {
		return nil, false
	}
	return o.ApiUrl, true
}

// HasApiUrl returns a boolean if a field has been set.
func (o *AMReceiverSNS) HasApiUrl() bool {
	if o != nil && !IsNil(o.ApiUrl) {
		return true
	}

	return false
}

// SetApiUrl gets a reference to the given string and assigns it to the ApiUrl field.
func (o *AMReceiverSNS) SetApiUrl(v string) {
	o.ApiUrl = &v
}

// GetTopicArn returns the TopicArn field value if set, zero value otherwise.
func (o *AMReceiverSNS) GetTopicArn() string {
	if o == nil || IsNil(o.TopicArn) {
		var ret string
		return ret
	}
	return *o.TopicArn
}

// GetTopicArnOk returns a tuple with the TopicArn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverSNS) GetTopicArnOk() (*string, bool) {
	if o == nil || IsNil(o.TopicArn) {
		return nil, false
	}
	return o.TopicArn, true
}

// HasTopicArn returns a boolean if a field has been set.
func (o *AMReceiverSNS) HasTopicArn() bool {
	if o != nil && !IsNil(o.TopicArn) {
		return true
	}

	return false
}

// SetTopicArn gets a reference to the given string and assigns it to the TopicArn field.
func (o *AMReceiverSNS) SetTopicArn(v string) {
	o.TopicArn = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *AMReceiverSNS) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber) {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverSNS) GetPhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumber) {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *AMReceiverSNS) HasPhoneNumber() bool {
	if o != nil && !IsNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *AMReceiverSNS) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetTargetArn returns the TargetArn field value if set, zero value otherwise.
func (o *AMReceiverSNS) GetTargetArn() string {
	if o == nil || IsNil(o.TargetArn) {
		var ret string
		return ret
	}
	return *o.TargetArn
}

// GetTargetArnOk returns a tuple with the TargetArn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverSNS) GetTargetArnOk() (*string, bool) {
	if o == nil || IsNil(o.TargetArn) {
		return nil, false
	}
	return o.TargetArn, true
}

// HasTargetArn returns a boolean if a field has been set.
func (o *AMReceiverSNS) HasTargetArn() bool {
	if o != nil && !IsNil(o.TargetArn) {
		return true
	}

	return false
}

// SetTargetArn gets a reference to the given string and assigns it to the TargetArn field.
func (o *AMReceiverSNS) SetTargetArn(v string) {
	o.TargetArn = &v
}

// GetHttpConfig returns the HttpConfig field value if set, zero value otherwise.
func (o *AMReceiverSNS) GetHttpConfig() AlertManagerHttp {
	if o == nil || IsNil(o.HttpConfig) {
		var ret AlertManagerHttp
		return ret
	}
	return *o.HttpConfig
}

// GetHttpConfigOk returns a tuple with the HttpConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverSNS) GetHttpConfigOk() (*AlertManagerHttp, bool) {
	if o == nil || IsNil(o.HttpConfig) {
		return nil, false
	}
	return o.HttpConfig, true
}

// HasHttpConfig returns a boolean if a field has been set.
func (o *AMReceiverSNS) HasHttpConfig() bool {
	if o != nil && !IsNil(o.HttpConfig) {
		return true
	}

	return false
}

// SetHttpConfig gets a reference to the given AlertManagerHttp and assigns it to the HttpConfig field.
func (o *AMReceiverSNS) SetHttpConfig(v AlertManagerHttp) {
	o.HttpConfig = &v
}

func (o AMReceiverSNS) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AMReceiverSNS) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Sigv4) {
		toSerialize["sigv4"] = o.Sigv4
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.SendResolved) {
		toSerialize["send_resolved"] = o.SendResolved
	}
	if !IsNil(o.ApiUrl) {
		toSerialize["api_url"] = o.ApiUrl
	}
	if !IsNil(o.TopicArn) {
		toSerialize["topic_arn"] = o.TopicArn
	}
	if !IsNil(o.PhoneNumber) {
		toSerialize["phone_number"] = o.PhoneNumber
	}
	if !IsNil(o.TargetArn) {
		toSerialize["target_arn"] = o.TargetArn
	}
	if !IsNil(o.HttpConfig) {
		toSerialize["http_config"] = o.HttpConfig
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AMReceiverSNS) UnmarshalJSON(data []byte) (err error) {
	varAMReceiverSNS := _AMReceiverSNS{}

	err = json.Unmarshal(data, &varAMReceiverSNS)

	if err != nil {
		return err
	}

	*o = AMReceiverSNS(varAMReceiverSNS)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "sigv4")
		delete(additionalProperties, "subject")
		delete(additionalProperties, "message")
		delete(additionalProperties, "attributes")
		delete(additionalProperties, "send_resolved")
		delete(additionalProperties, "api_url")
		delete(additionalProperties, "topic_arn")
		delete(additionalProperties, "phone_number")
		delete(additionalProperties, "target_arn")
		delete(additionalProperties, "http_config")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAMReceiverSNS struct {
	value *AMReceiverSNS
	isSet bool
}

func (v NullableAMReceiverSNS) Get() *AMReceiverSNS {
	return v.value
}

func (v *NullableAMReceiverSNS) Set(val *AMReceiverSNS) {
	v.value = val
	v.isSet = true
}

func (v NullableAMReceiverSNS) IsSet() bool {
	return v.isSet
}

func (v *NullableAMReceiverSNS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAMReceiverSNS(val *AMReceiverSNS) *NullableAMReceiverSNS {
	return &NullableAMReceiverSNS{value: val, isSet: true}
}

func (v NullableAMReceiverSNS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAMReceiverSNS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
