/*
Asserts, Inc

Asserts Public API

API version: 2025.08.25-143624
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
	"reflect"
	"strings"
)

// checks if the ModelMappingRequestErrorDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelMappingRequestErrorDto{}

// ModelMappingRequestErrorDto struct for ModelMappingRequestErrorDto
type ModelMappingRequestErrorDto struct {
	ModelMappingSignalDto
	MetricName           string                                 `json:"metricName"`
	MetricType           string                                 `json:"metricType" validate:"regexp=counter|gauge"`
	Errors               []ModelMappingRequestErrorConditionDto `json:"errors"`
	AdditionalProperties map[string]interface{}
}

type _ModelMappingRequestErrorDto ModelMappingRequestErrorDto

// NewModelMappingRequestErrorDto instantiates a new ModelMappingRequestErrorDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelMappingRequestErrorDto(metricName string, metricType string, errors []ModelMappingRequestErrorConditionDto, entityNameLabel string, metricSource string, requestType string, kind string) *ModelMappingRequestErrorDto {
	this := ModelMappingRequestErrorDto{}
	this.EntityNameLabel = entityNameLabel
	this.MetricSource = metricSource
	this.RequestType = requestType
	this.Kind = kind
	this.MetricName = metricName
	this.MetricType = metricType
	this.Errors = errors
	return &this
}

// NewModelMappingRequestErrorDtoWithDefaults instantiates a new ModelMappingRequestErrorDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelMappingRequestErrorDtoWithDefaults() *ModelMappingRequestErrorDto {
	this := ModelMappingRequestErrorDto{}
	return &this
}

// GetMetricName returns the MetricName field value
func (o *ModelMappingRequestErrorDto) GetMetricName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetricName
}

// GetMetricNameOk returns a tuple with the MetricName field value
// and a boolean to check if the value has been set.
func (o *ModelMappingRequestErrorDto) GetMetricNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetricName, true
}

// SetMetricName sets field value
func (o *ModelMappingRequestErrorDto) SetMetricName(v string) {
	o.MetricName = v
}

// GetMetricType returns the MetricType field value
func (o *ModelMappingRequestErrorDto) GetMetricType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetricType
}

// GetMetricTypeOk returns a tuple with the MetricType field value
// and a boolean to check if the value has been set.
func (o *ModelMappingRequestErrorDto) GetMetricTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetricType, true
}

// SetMetricType sets field value
func (o *ModelMappingRequestErrorDto) SetMetricType(v string) {
	o.MetricType = v
}

// GetErrors returns the Errors field value
func (o *ModelMappingRequestErrorDto) GetErrors() []ModelMappingRequestErrorConditionDto {
	if o == nil {
		var ret []ModelMappingRequestErrorConditionDto
		return ret
	}

	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value
// and a boolean to check if the value has been set.
func (o *ModelMappingRequestErrorDto) GetErrorsOk() ([]ModelMappingRequestErrorConditionDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Errors, true
}

// SetErrors sets field value
func (o *ModelMappingRequestErrorDto) SetErrors(v []ModelMappingRequestErrorConditionDto) {
	o.Errors = v
}

func (o ModelMappingRequestErrorDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelMappingRequestErrorDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedModelMappingSignalDto, errModelMappingSignalDto := json.Marshal(o.ModelMappingSignalDto)
	if errModelMappingSignalDto != nil {
		return map[string]interface{}{}, errModelMappingSignalDto
	}
	errModelMappingSignalDto = json.Unmarshal([]byte(serializedModelMappingSignalDto), &toSerialize)
	if errModelMappingSignalDto != nil {
		return map[string]interface{}{}, errModelMappingSignalDto
	}
	toSerialize["metricName"] = o.MetricName
	toSerialize["metricType"] = o.MetricType
	toSerialize["errors"] = o.Errors

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelMappingRequestErrorDto) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	type ModelMappingRequestErrorDtoWithoutEmbeddedStruct struct {
		MetricName string                                 `json:"metricName"`
		MetricType string                                 `json:"metricType" validate:"regexp=counter|gauge"`
		Errors     []ModelMappingRequestErrorConditionDto `json:"errors"`
	}

	varModelMappingRequestErrorDtoWithoutEmbeddedStruct := ModelMappingRequestErrorDtoWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varModelMappingRequestErrorDtoWithoutEmbeddedStruct)
	if err == nil {
		varModelMappingRequestErrorDto := _ModelMappingRequestErrorDto{}
		varModelMappingRequestErrorDto.MetricName = varModelMappingRequestErrorDtoWithoutEmbeddedStruct.MetricName
		varModelMappingRequestErrorDto.MetricType = varModelMappingRequestErrorDtoWithoutEmbeddedStruct.MetricType
		varModelMappingRequestErrorDto.Errors = varModelMappingRequestErrorDtoWithoutEmbeddedStruct.Errors
		*o = ModelMappingRequestErrorDto(varModelMappingRequestErrorDto)
	} else {
		return err
	}

	varModelMappingRequestErrorDto := _ModelMappingRequestErrorDto{}

	err = json.Unmarshal(data, &varModelMappingRequestErrorDto)
	if err == nil {
		o.ModelMappingSignalDto = varModelMappingRequestErrorDto.ModelMappingSignalDto
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "metricName")
		delete(additionalProperties, "metricType")
		delete(additionalProperties, "errors")

		// remove fields from embedded structs
		reflectModelMappingSignalDto := reflect.ValueOf(o.ModelMappingSignalDto)
		for i := 0; i < reflectModelMappingSignalDto.Type().NumField(); i++ {
			t := reflectModelMappingSignalDto.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelMappingRequestErrorDto struct {
	value *ModelMappingRequestErrorDto
	isSet bool
}

func (v NullableModelMappingRequestErrorDto) Get() *ModelMappingRequestErrorDto {
	return v.value
}

func (v *NullableModelMappingRequestErrorDto) Set(val *ModelMappingRequestErrorDto) {
	v.value = val
	v.isSet = true
}

func (v NullableModelMappingRequestErrorDto) IsSet() bool {
	return v.isSet
}

func (v *NullableModelMappingRequestErrorDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelMappingRequestErrorDto(val *ModelMappingRequestErrorDto) *NullableModelMappingRequestErrorDto {
	return &NullableModelMappingRequestErrorDto{value: val, isSet: true}
}

func (v NullableModelMappingRequestErrorDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelMappingRequestErrorDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
