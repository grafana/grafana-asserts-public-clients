/*
Asserts, Inc

Asserts Public API

API version: 1.0.4
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// SearchDefinitionControllerAPIService SearchDefinitionControllerAPI service
type SearchDefinitionControllerAPIService service

type ApiCreateSearchDefinitionRequest struct {
	ctx                 context.Context
	ApiService          *SearchDefinitionControllerAPIService
	searchDefinitionDto *SearchDefinitionDto
	xScopeOrgID         *string
}

func (r ApiCreateSearchDefinitionRequest) SearchDefinitionDto(searchDefinitionDto SearchDefinitionDto) ApiCreateSearchDefinitionRequest {
	r.searchDefinitionDto = &searchDefinitionDto
	return r
}

// Grafana Tenant/Stack ID
func (r ApiCreateSearchDefinitionRequest) XScopeOrgID(xScopeOrgID string) ApiCreateSearchDefinitionRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiCreateSearchDefinitionRequest) Execute() (*SearchDefinitionDto, *http.Response, error) {
	return r.ApiService.CreateSearchDefinitionExecute(r)
}

/*
CreateSearchDefinition Method for CreateSearchDefinition

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateSearchDefinitionRequest
*/
func (a *SearchDefinitionControllerAPIService) CreateSearchDefinition(ctx context.Context) ApiCreateSearchDefinitionRequest {
	return ApiCreateSearchDefinitionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SearchDefinitionDto
func (a *SearchDefinitionControllerAPIService) CreateSearchDefinitionExecute(r ApiCreateSearchDefinitionRequest) (*SearchDefinitionDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SearchDefinitionDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchDefinitionControllerAPIService.CreateSearchDefinition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/search/definition"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.searchDefinitionDto == nil {
		return localVarReturnValue, nil, reportError("searchDefinitionDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	// body params
	localVarPostBody = r.searchDefinitionDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteSearchDefinitionRequest struct {
	ctx         context.Context
	ApiService  *SearchDefinitionControllerAPIService
	id          int32
	xScopeOrgID *string
}

// Grafana Tenant/Stack ID
func (r ApiDeleteSearchDefinitionRequest) XScopeOrgID(xScopeOrgID string) ApiDeleteSearchDefinitionRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiDeleteSearchDefinitionRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSearchDefinitionExecute(r)
}

/*
DeleteSearchDefinition Method for DeleteSearchDefinition

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiDeleteSearchDefinitionRequest
*/
func (a *SearchDefinitionControllerAPIService) DeleteSearchDefinition(ctx context.Context, id int32) ApiDeleteSearchDefinitionRequest {
	return ApiDeleteSearchDefinitionRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *SearchDefinitionControllerAPIService) DeleteSearchDefinitionExecute(r ApiDeleteSearchDefinitionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchDefinitionControllerAPIService.DeleteSearchDefinition")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/search/definition/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSearchDefinitionRequest struct {
	ctx         context.Context
	ApiService  *SearchDefinitionControllerAPIService
	id          string
	xScopeOrgID *string
}

// Grafana Tenant/Stack ID
func (r ApiGetSearchDefinitionRequest) XScopeOrgID(xScopeOrgID string) ApiGetSearchDefinitionRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiGetSearchDefinitionRequest) Execute() (*SearchDefinitionDto, *http.Response, error) {
	return r.ApiService.GetSearchDefinitionExecute(r)
}

/*
GetSearchDefinition Method for GetSearchDefinition

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiGetSearchDefinitionRequest
*/
func (a *SearchDefinitionControllerAPIService) GetSearchDefinition(ctx context.Context, id string) ApiGetSearchDefinitionRequest {
	return ApiGetSearchDefinitionRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SearchDefinitionDto
func (a *SearchDefinitionControllerAPIService) GetSearchDefinitionExecute(r ApiGetSearchDefinitionRequest) (*SearchDefinitionDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SearchDefinitionDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchDefinitionControllerAPIService.GetSearchDefinition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/search/definition/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchDefinitionsRequest struct {
	ctx              context.Context
	ApiService       *SearchDefinitionControllerAPIService
	q                *string
	onlyCustomSearch *bool
	max              *int32
	offset           *int32
	xScopeOrgID      *string
}

func (r ApiSearchDefinitionsRequest) Q(q string) ApiSearchDefinitionsRequest {
	r.q = &q
	return r
}

func (r ApiSearchDefinitionsRequest) OnlyCustomSearch(onlyCustomSearch bool) ApiSearchDefinitionsRequest {
	r.onlyCustomSearch = &onlyCustomSearch
	return r
}

func (r ApiSearchDefinitionsRequest) Max(max int32) ApiSearchDefinitionsRequest {
	r.max = &max
	return r
}

func (r ApiSearchDefinitionsRequest) Offset(offset int32) ApiSearchDefinitionsRequest {
	r.offset = &offset
	return r
}

// Grafana Tenant/Stack ID
func (r ApiSearchDefinitionsRequest) XScopeOrgID(xScopeOrgID string) ApiSearchDefinitionsRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiSearchDefinitionsRequest) Execute() (*SearchDefinitionResponseDto, *http.Response, error) {
	return r.ApiService.SearchDefinitionsExecute(r)
}

/*
SearchDefinitions Method for SearchDefinitions

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSearchDefinitionsRequest
*/
func (a *SearchDefinitionControllerAPIService) SearchDefinitions(ctx context.Context) ApiSearchDefinitionsRequest {
	return ApiSearchDefinitionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SearchDefinitionResponseDto
func (a *SearchDefinitionControllerAPIService) SearchDefinitionsExecute(r ApiSearchDefinitionsRequest) (*SearchDefinitionResponseDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SearchDefinitionResponseDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchDefinitionControllerAPIService.SearchDefinitions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/search/definition"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.q == nil {
		return localVarReturnValue, nil, reportError("q is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	if r.onlyCustomSearch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "onlyCustomSearch", r.onlyCustomSearch, "")
	} else {
		var defaultValue bool = false
		r.onlyCustomSearch = &defaultValue
	}
	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateSearchDefinitionRequest struct {
	ctx                 context.Context
	ApiService          *SearchDefinitionControllerAPIService
	id                  int32
	searchDefinitionDto *SearchDefinitionDto
	xScopeOrgID         *string
}

func (r ApiUpdateSearchDefinitionRequest) SearchDefinitionDto(searchDefinitionDto SearchDefinitionDto) ApiUpdateSearchDefinitionRequest {
	r.searchDefinitionDto = &searchDefinitionDto
	return r
}

// Grafana Tenant/Stack ID
func (r ApiUpdateSearchDefinitionRequest) XScopeOrgID(xScopeOrgID string) ApiUpdateSearchDefinitionRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiUpdateSearchDefinitionRequest) Execute() (*SearchDefinitionDto, *http.Response, error) {
	return r.ApiService.UpdateSearchDefinitionExecute(r)
}

/*
UpdateSearchDefinition Method for UpdateSearchDefinition

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiUpdateSearchDefinitionRequest
*/
func (a *SearchDefinitionControllerAPIService) UpdateSearchDefinition(ctx context.Context, id int32) ApiUpdateSearchDefinitionRequest {
	return ApiUpdateSearchDefinitionRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SearchDefinitionDto
func (a *SearchDefinitionControllerAPIService) UpdateSearchDefinitionExecute(r ApiUpdateSearchDefinitionRequest) (*SearchDefinitionDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SearchDefinitionDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchDefinitionControllerAPIService.UpdateSearchDefinition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/search/definition/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.searchDefinitionDto == nil {
		return localVarReturnValue, nil, reportError("searchDefinitionDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	// body params
	localVarPostBody = r.searchDefinitionDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
