/*
Asserts, Inc

Asserts Public API

API version: 2025.08.07-125604
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// AlertManagerConfigControllerAPIService AlertManagerConfigControllerAPI service
type AlertManagerConfigControllerAPIService service

type ApiDeleteAlertManagerConfigRequest struct {
	ctx         context.Context
	ApiService  *AlertManagerConfigControllerAPIService
	xScopeOrgID *string
}

// Grafana Tenant/Stack ID
func (r ApiDeleteAlertManagerConfigRequest) XScopeOrgID(xScopeOrgID string) ApiDeleteAlertManagerConfigRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiDeleteAlertManagerConfigRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAlertManagerConfigExecute(r)
}

/*
DeleteAlertManagerConfig Method for DeleteAlertManagerConfig

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteAlertManagerConfigRequest
*/
func (a *AlertManagerConfigControllerAPIService) DeleteAlertManagerConfig(ctx context.Context) ApiDeleteAlertManagerConfigRequest {
	return ApiDeleteAlertManagerConfigRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *AlertManagerConfigControllerAPIService) DeleteAlertManagerConfigExecute(r ApiDeleteAlertManagerConfigRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertManagerConfigControllerAPIService.DeleteAlertManagerConfig")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config/alertmanager"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAlertManagerConfigRequest struct {
	ctx         context.Context
	ApiService  *AlertManagerConfigControllerAPIService
	xScopeOrgID *string
}

// Grafana Tenant/Stack ID
func (r ApiGetAlertManagerConfigRequest) XScopeOrgID(xScopeOrgID string) ApiGetAlertManagerConfigRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiGetAlertManagerConfigRequest) Execute() (*AlertManagerConfig, *http.Response, error) {
	return r.ApiService.GetAlertManagerConfigExecute(r)
}

/*
GetAlertManagerConfig Method for GetAlertManagerConfig

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetAlertManagerConfigRequest
*/
func (a *AlertManagerConfigControllerAPIService) GetAlertManagerConfig(ctx context.Context) ApiGetAlertManagerConfigRequest {
	return ApiGetAlertManagerConfigRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AlertManagerConfig
func (a *AlertManagerConfigControllerAPIService) GetAlertManagerConfigExecute(r ApiGetAlertManagerConfigRequest) (*AlertManagerConfig, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlertManagerConfig
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertManagerConfigControllerAPIService.GetAlertManagerConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config/alertmanager"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/x-yml", "application/x-yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateAlertManagerConfigRequest struct {
	ctx                context.Context
	ApiService         *AlertManagerConfigControllerAPIService
	alertManagerConfig *AlertManagerConfig
	xScopeOrgID        *string
}

func (r ApiUpdateAlertManagerConfigRequest) AlertManagerConfig(alertManagerConfig AlertManagerConfig) ApiUpdateAlertManagerConfigRequest {
	r.alertManagerConfig = &alertManagerConfig
	return r
}

// Grafana Tenant/Stack ID
func (r ApiUpdateAlertManagerConfigRequest) XScopeOrgID(xScopeOrgID string) ApiUpdateAlertManagerConfigRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiUpdateAlertManagerConfigRequest) Execute() (*AlertManagerConfig, *http.Response, error) {
	return r.ApiService.UpdateAlertManagerConfigExecute(r)
}

/*
UpdateAlertManagerConfig Method for UpdateAlertManagerConfig

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiUpdateAlertManagerConfigRequest
*/
func (a *AlertManagerConfigControllerAPIService) UpdateAlertManagerConfig(ctx context.Context) ApiUpdateAlertManagerConfigRequest {
	return ApiUpdateAlertManagerConfigRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AlertManagerConfig
func (a *AlertManagerConfigControllerAPIService) UpdateAlertManagerConfigExecute(r ApiUpdateAlertManagerConfigRequest) (*AlertManagerConfig, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlertManagerConfig
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertManagerConfigControllerAPIService.UpdateAlertManagerConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config/alertmanager"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.alertManagerConfig == nil {
		return localVarReturnValue, nil, reportError("alertManagerConfig is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-yml", "application/x-yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/x-yml", "application/x-yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	// body params
	localVarPostBody = r.alertManagerConfig
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
