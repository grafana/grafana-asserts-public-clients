/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-110859
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the VersionedMimirRelabelRulesPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionedMimirRelabelRulesPayload{}

// VersionedMimirRelabelRulesPayload struct for VersionedMimirRelabelRulesPayload
type VersionedMimirRelabelRulesPayload struct {
	Generated            *VersionedMimirRelabelRuleGroup  `json:"generated,omitempty"`
	Prologue             *VersionedMimirRelabelRuleGroup  `json:"prologue,omitempty"`
	Vendor               []VersionedMimirRelabelRuleGroup `json:"vendor,omitempty"`
	Base                 []VersionedMimirRelabelRuleGroup `json:"base,omitempty"`
	Epilogue             *VersionedMimirRelabelRuleGroup  `json:"epilogue,omitempty"`
	ModelMapped          []VersionedMimirRelabelRuleGroup `json:"modelMapped,omitempty"`
	BaseGroups           []string                         `json:"baseGroups,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VersionedMimirRelabelRulesPayload VersionedMimirRelabelRulesPayload

// NewVersionedMimirRelabelRulesPayload instantiates a new VersionedMimirRelabelRulesPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionedMimirRelabelRulesPayload() *VersionedMimirRelabelRulesPayload {
	this := VersionedMimirRelabelRulesPayload{}
	return &this
}

// NewVersionedMimirRelabelRulesPayloadWithDefaults instantiates a new VersionedMimirRelabelRulesPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionedMimirRelabelRulesPayloadWithDefaults() *VersionedMimirRelabelRulesPayload {
	this := VersionedMimirRelabelRulesPayload{}
	return &this
}

// GetGenerated returns the Generated field value if set, zero value otherwise.
func (o *VersionedMimirRelabelRulesPayload) GetGenerated() VersionedMimirRelabelRuleGroup {
	if o == nil || IsNil(o.Generated) {
		var ret VersionedMimirRelabelRuleGroup
		return ret
	}
	return *o.Generated
}

// GetGeneratedOk returns a tuple with the Generated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedMimirRelabelRulesPayload) GetGeneratedOk() (*VersionedMimirRelabelRuleGroup, bool) {
	if o == nil || IsNil(o.Generated) {
		return nil, false
	}
	return o.Generated, true
}

// HasGenerated returns a boolean if a field has been set.
func (o *VersionedMimirRelabelRulesPayload) HasGenerated() bool {
	if o != nil && !IsNil(o.Generated) {
		return true
	}

	return false
}

// SetGenerated gets a reference to the given VersionedMimirRelabelRuleGroup and assigns it to the Generated field.
func (o *VersionedMimirRelabelRulesPayload) SetGenerated(v VersionedMimirRelabelRuleGroup) {
	o.Generated = &v
}

// GetPrologue returns the Prologue field value if set, zero value otherwise.
func (o *VersionedMimirRelabelRulesPayload) GetPrologue() VersionedMimirRelabelRuleGroup {
	if o == nil || IsNil(o.Prologue) {
		var ret VersionedMimirRelabelRuleGroup
		return ret
	}
	return *o.Prologue
}

// GetPrologueOk returns a tuple with the Prologue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedMimirRelabelRulesPayload) GetPrologueOk() (*VersionedMimirRelabelRuleGroup, bool) {
	if o == nil || IsNil(o.Prologue) {
		return nil, false
	}
	return o.Prologue, true
}

// HasPrologue returns a boolean if a field has been set.
func (o *VersionedMimirRelabelRulesPayload) HasPrologue() bool {
	if o != nil && !IsNil(o.Prologue) {
		return true
	}

	return false
}

// SetPrologue gets a reference to the given VersionedMimirRelabelRuleGroup and assigns it to the Prologue field.
func (o *VersionedMimirRelabelRulesPayload) SetPrologue(v VersionedMimirRelabelRuleGroup) {
	o.Prologue = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *VersionedMimirRelabelRulesPayload) GetVendor() []VersionedMimirRelabelRuleGroup {
	if o == nil || IsNil(o.Vendor) {
		var ret []VersionedMimirRelabelRuleGroup
		return ret
	}
	return o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedMimirRelabelRulesPayload) GetVendorOk() ([]VersionedMimirRelabelRuleGroup, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *VersionedMimirRelabelRulesPayload) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given []VersionedMimirRelabelRuleGroup and assigns it to the Vendor field.
func (o *VersionedMimirRelabelRulesPayload) SetVendor(v []VersionedMimirRelabelRuleGroup) {
	o.Vendor = v
}

// GetBase returns the Base field value if set, zero value otherwise.
func (o *VersionedMimirRelabelRulesPayload) GetBase() []VersionedMimirRelabelRuleGroup {
	if o == nil || IsNil(o.Base) {
		var ret []VersionedMimirRelabelRuleGroup
		return ret
	}
	return o.Base
}

// GetBaseOk returns a tuple with the Base field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedMimirRelabelRulesPayload) GetBaseOk() ([]VersionedMimirRelabelRuleGroup, bool) {
	if o == nil || IsNil(o.Base) {
		return nil, false
	}
	return o.Base, true
}

// HasBase returns a boolean if a field has been set.
func (o *VersionedMimirRelabelRulesPayload) HasBase() bool {
	if o != nil && !IsNil(o.Base) {
		return true
	}

	return false
}

// SetBase gets a reference to the given []VersionedMimirRelabelRuleGroup and assigns it to the Base field.
func (o *VersionedMimirRelabelRulesPayload) SetBase(v []VersionedMimirRelabelRuleGroup) {
	o.Base = v
}

// GetEpilogue returns the Epilogue field value if set, zero value otherwise.
func (o *VersionedMimirRelabelRulesPayload) GetEpilogue() VersionedMimirRelabelRuleGroup {
	if o == nil || IsNil(o.Epilogue) {
		var ret VersionedMimirRelabelRuleGroup
		return ret
	}
	return *o.Epilogue
}

// GetEpilogueOk returns a tuple with the Epilogue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedMimirRelabelRulesPayload) GetEpilogueOk() (*VersionedMimirRelabelRuleGroup, bool) {
	if o == nil || IsNil(o.Epilogue) {
		return nil, false
	}
	return o.Epilogue, true
}

// HasEpilogue returns a boolean if a field has been set.
func (o *VersionedMimirRelabelRulesPayload) HasEpilogue() bool {
	if o != nil && !IsNil(o.Epilogue) {
		return true
	}

	return false
}

// SetEpilogue gets a reference to the given VersionedMimirRelabelRuleGroup and assigns it to the Epilogue field.
func (o *VersionedMimirRelabelRulesPayload) SetEpilogue(v VersionedMimirRelabelRuleGroup) {
	o.Epilogue = &v
}

// GetModelMapped returns the ModelMapped field value if set, zero value otherwise.
func (o *VersionedMimirRelabelRulesPayload) GetModelMapped() []VersionedMimirRelabelRuleGroup {
	if o == nil || IsNil(o.ModelMapped) {
		var ret []VersionedMimirRelabelRuleGroup
		return ret
	}
	return o.ModelMapped
}

// GetModelMappedOk returns a tuple with the ModelMapped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedMimirRelabelRulesPayload) GetModelMappedOk() ([]VersionedMimirRelabelRuleGroup, bool) {
	if o == nil || IsNil(o.ModelMapped) {
		return nil, false
	}
	return o.ModelMapped, true
}

// HasModelMapped returns a boolean if a field has been set.
func (o *VersionedMimirRelabelRulesPayload) HasModelMapped() bool {
	if o != nil && !IsNil(o.ModelMapped) {
		return true
	}

	return false
}

// SetModelMapped gets a reference to the given []VersionedMimirRelabelRuleGroup and assigns it to the ModelMapped field.
func (o *VersionedMimirRelabelRulesPayload) SetModelMapped(v []VersionedMimirRelabelRuleGroup) {
	o.ModelMapped = v
}

// GetBaseGroups returns the BaseGroups field value if set, zero value otherwise.
func (o *VersionedMimirRelabelRulesPayload) GetBaseGroups() []string {
	if o == nil || IsNil(o.BaseGroups) {
		var ret []string
		return ret
	}
	return o.BaseGroups
}

// GetBaseGroupsOk returns a tuple with the BaseGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedMimirRelabelRulesPayload) GetBaseGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.BaseGroups) {
		return nil, false
	}
	return o.BaseGroups, true
}

// HasBaseGroups returns a boolean if a field has been set.
func (o *VersionedMimirRelabelRulesPayload) HasBaseGroups() bool {
	if o != nil && !IsNil(o.BaseGroups) {
		return true
	}

	return false
}

// SetBaseGroups gets a reference to the given []string and assigns it to the BaseGroups field.
func (o *VersionedMimirRelabelRulesPayload) SetBaseGroups(v []string) {
	o.BaseGroups = v
}

func (o VersionedMimirRelabelRulesPayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionedMimirRelabelRulesPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Generated) {
		toSerialize["generated"] = o.Generated
	}
	if !IsNil(o.Prologue) {
		toSerialize["prologue"] = o.Prologue
	}
	if !IsNil(o.Vendor) {
		toSerialize["vendor"] = o.Vendor
	}
	if !IsNil(o.Base) {
		toSerialize["base"] = o.Base
	}
	if !IsNil(o.Epilogue) {
		toSerialize["epilogue"] = o.Epilogue
	}
	if !IsNil(o.ModelMapped) {
		toSerialize["modelMapped"] = o.ModelMapped
	}
	if !IsNil(o.BaseGroups) {
		toSerialize["baseGroups"] = o.BaseGroups
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VersionedMimirRelabelRulesPayload) UnmarshalJSON(data []byte) (err error) {
	varVersionedMimirRelabelRulesPayload := _VersionedMimirRelabelRulesPayload{}

	err = json.Unmarshal(data, &varVersionedMimirRelabelRulesPayload)

	if err != nil {
		return err
	}

	*o = VersionedMimirRelabelRulesPayload(varVersionedMimirRelabelRulesPayload)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "generated")
		delete(additionalProperties, "prologue")
		delete(additionalProperties, "vendor")
		delete(additionalProperties, "base")
		delete(additionalProperties, "epilogue")
		delete(additionalProperties, "modelMapped")
		delete(additionalProperties, "baseGroups")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVersionedMimirRelabelRulesPayload struct {
	value *VersionedMimirRelabelRulesPayload
	isSet bool
}

func (v NullableVersionedMimirRelabelRulesPayload) Get() *VersionedMimirRelabelRulesPayload {
	return v.value
}

func (v *NullableVersionedMimirRelabelRulesPayload) Set(val *VersionedMimirRelabelRulesPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionedMimirRelabelRulesPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionedMimirRelabelRulesPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionedMimirRelabelRulesPayload(val *VersionedMimirRelabelRulesPayload) *NullableVersionedMimirRelabelRulesPayload {
	return &NullableVersionedMimirRelabelRulesPayload{value: val, isSet: true}
}

func (v NullableVersionedMimirRelabelRulesPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionedMimirRelabelRulesPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
