/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-161538
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the EntityAssertionDetailsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntityAssertionDetailsDto{}

// EntityAssertionDetailsDto struct for EntityAssertionDetailsDto
type EntityAssertionDetailsDto struct {
	TimeWindow           *TimeWindowDto                             `json:"timeWindow,omitempty"`
	TimeStepIntervalMs   *int64                                     `json:"timeStepIntervalMs,omitempty"`
	Thresholds           []EntityAssertionDetailsDtoThresholdsInner `json:"thresholds,omitempty"`
	Metrics              []MetricDto                                `json:"metrics,omitempty"`
	NotificationRuleName *string                                    `json:"notificationRuleName,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EntityAssertionDetailsDto EntityAssertionDetailsDto

// NewEntityAssertionDetailsDto instantiates a new EntityAssertionDetailsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityAssertionDetailsDto() *EntityAssertionDetailsDto {
	this := EntityAssertionDetailsDto{}
	return &this
}

// NewEntityAssertionDetailsDtoWithDefaults instantiates a new EntityAssertionDetailsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityAssertionDetailsDtoWithDefaults() *EntityAssertionDetailsDto {
	this := EntityAssertionDetailsDto{}
	return &this
}

// GetTimeWindow returns the TimeWindow field value if set, zero value otherwise.
func (o *EntityAssertionDetailsDto) GetTimeWindow() TimeWindowDto {
	if o == nil || IsNil(o.TimeWindow) {
		var ret TimeWindowDto
		return ret
	}
	return *o.TimeWindow
}

// GetTimeWindowOk returns a tuple with the TimeWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityAssertionDetailsDto) GetTimeWindowOk() (*TimeWindowDto, bool) {
	if o == nil || IsNil(o.TimeWindow) {
		return nil, false
	}
	return o.TimeWindow, true
}

// HasTimeWindow returns a boolean if a field has been set.
func (o *EntityAssertionDetailsDto) HasTimeWindow() bool {
	if o != nil && !IsNil(o.TimeWindow) {
		return true
	}

	return false
}

// SetTimeWindow gets a reference to the given TimeWindowDto and assigns it to the TimeWindow field.
func (o *EntityAssertionDetailsDto) SetTimeWindow(v TimeWindowDto) {
	o.TimeWindow = &v
}

// GetTimeStepIntervalMs returns the TimeStepIntervalMs field value if set, zero value otherwise.
func (o *EntityAssertionDetailsDto) GetTimeStepIntervalMs() int64 {
	if o == nil || IsNil(o.TimeStepIntervalMs) {
		var ret int64
		return ret
	}
	return *o.TimeStepIntervalMs
}

// GetTimeStepIntervalMsOk returns a tuple with the TimeStepIntervalMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityAssertionDetailsDto) GetTimeStepIntervalMsOk() (*int64, bool) {
	if o == nil || IsNil(o.TimeStepIntervalMs) {
		return nil, false
	}
	return o.TimeStepIntervalMs, true
}

// HasTimeStepIntervalMs returns a boolean if a field has been set.
func (o *EntityAssertionDetailsDto) HasTimeStepIntervalMs() bool {
	if o != nil && !IsNil(o.TimeStepIntervalMs) {
		return true
	}

	return false
}

// SetTimeStepIntervalMs gets a reference to the given int64 and assigns it to the TimeStepIntervalMs field.
func (o *EntityAssertionDetailsDto) SetTimeStepIntervalMs(v int64) {
	o.TimeStepIntervalMs = &v
}

// GetThresholds returns the Thresholds field value if set, zero value otherwise.
func (o *EntityAssertionDetailsDto) GetThresholds() []EntityAssertionDetailsDtoThresholdsInner {
	if o == nil || IsNil(o.Thresholds) {
		var ret []EntityAssertionDetailsDtoThresholdsInner
		return ret
	}
	return o.Thresholds
}

// GetThresholdsOk returns a tuple with the Thresholds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityAssertionDetailsDto) GetThresholdsOk() ([]EntityAssertionDetailsDtoThresholdsInner, bool) {
	if o == nil || IsNil(o.Thresholds) {
		return nil, false
	}
	return o.Thresholds, true
}

// HasThresholds returns a boolean if a field has been set.
func (o *EntityAssertionDetailsDto) HasThresholds() bool {
	if o != nil && !IsNil(o.Thresholds) {
		return true
	}

	return false
}

// SetThresholds gets a reference to the given []EntityAssertionDetailsDtoThresholdsInner and assigns it to the Thresholds field.
func (o *EntityAssertionDetailsDto) SetThresholds(v []EntityAssertionDetailsDtoThresholdsInner) {
	o.Thresholds = v
}

// GetMetrics returns the Metrics field value if set, zero value otherwise.
func (o *EntityAssertionDetailsDto) GetMetrics() []MetricDto {
	if o == nil || IsNil(o.Metrics) {
		var ret []MetricDto
		return ret
	}
	return o.Metrics
}

// GetMetricsOk returns a tuple with the Metrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityAssertionDetailsDto) GetMetricsOk() ([]MetricDto, bool) {
	if o == nil || IsNil(o.Metrics) {
		return nil, false
	}
	return o.Metrics, true
}

// HasMetrics returns a boolean if a field has been set.
func (o *EntityAssertionDetailsDto) HasMetrics() bool {
	if o != nil && !IsNil(o.Metrics) {
		return true
	}

	return false
}

// SetMetrics gets a reference to the given []MetricDto and assigns it to the Metrics field.
func (o *EntityAssertionDetailsDto) SetMetrics(v []MetricDto) {
	o.Metrics = v
}

// GetNotificationRuleName returns the NotificationRuleName field value if set, zero value otherwise.
func (o *EntityAssertionDetailsDto) GetNotificationRuleName() string {
	if o == nil || IsNil(o.NotificationRuleName) {
		var ret string
		return ret
	}
	return *o.NotificationRuleName
}

// GetNotificationRuleNameOk returns a tuple with the NotificationRuleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityAssertionDetailsDto) GetNotificationRuleNameOk() (*string, bool) {
	if o == nil || IsNil(o.NotificationRuleName) {
		return nil, false
	}
	return o.NotificationRuleName, true
}

// HasNotificationRuleName returns a boolean if a field has been set.
func (o *EntityAssertionDetailsDto) HasNotificationRuleName() bool {
	if o != nil && !IsNil(o.NotificationRuleName) {
		return true
	}

	return false
}

// SetNotificationRuleName gets a reference to the given string and assigns it to the NotificationRuleName field.
func (o *EntityAssertionDetailsDto) SetNotificationRuleName(v string) {
	o.NotificationRuleName = &v
}

func (o EntityAssertionDetailsDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntityAssertionDetailsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TimeWindow) {
		toSerialize["timeWindow"] = o.TimeWindow
	}
	if !IsNil(o.TimeStepIntervalMs) {
		toSerialize["timeStepIntervalMs"] = o.TimeStepIntervalMs
	}
	if !IsNil(o.Thresholds) {
		toSerialize["thresholds"] = o.Thresholds
	}
	if !IsNil(o.Metrics) {
		toSerialize["metrics"] = o.Metrics
	}
	if !IsNil(o.NotificationRuleName) {
		toSerialize["notificationRuleName"] = o.NotificationRuleName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EntityAssertionDetailsDto) UnmarshalJSON(data []byte) (err error) {
	varEntityAssertionDetailsDto := _EntityAssertionDetailsDto{}

	err = json.Unmarshal(data, &varEntityAssertionDetailsDto)

	if err != nil {
		return err
	}

	*o = EntityAssertionDetailsDto(varEntityAssertionDetailsDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "timeWindow")
		delete(additionalProperties, "timeStepIntervalMs")
		delete(additionalProperties, "thresholds")
		delete(additionalProperties, "metrics")
		delete(additionalProperties, "notificationRuleName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEntityAssertionDetailsDto struct {
	value *EntityAssertionDetailsDto
	isSet bool
}

func (v NullableEntityAssertionDetailsDto) Get() *EntityAssertionDetailsDto {
	return v.value
}

func (v *NullableEntityAssertionDetailsDto) Set(val *EntityAssertionDetailsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityAssertionDetailsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityAssertionDetailsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityAssertionDetailsDto(val *EntityAssertionDetailsDto) *NullableEntityAssertionDetailsDto {
	return &NullableEntityAssertionDetailsDto{value: val, isSet: true}
}

func (v NullableEntityAssertionDetailsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityAssertionDetailsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
