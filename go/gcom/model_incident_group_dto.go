/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-110859
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the IncidentGroupDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IncidentGroupDto{}

// IncidentGroupDto struct for IncidentGroupDto
type IncidentGroupDto struct {
	Name                 *string                 `json:"name,omitempty"`
	Type                 *string                 `json:"type,omitempty"`
	Detail               *IncidentGroupDetailDto `json:"detail,omitempty"`
	Incidents            []IncidentDto           `json:"incidents,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IncidentGroupDto IncidentGroupDto

// NewIncidentGroupDto instantiates a new IncidentGroupDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncidentGroupDto() *IncidentGroupDto {
	this := IncidentGroupDto{}
	return &this
}

// NewIncidentGroupDtoWithDefaults instantiates a new IncidentGroupDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentGroupDtoWithDefaults() *IncidentGroupDto {
	this := IncidentGroupDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IncidentGroupDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentGroupDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IncidentGroupDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IncidentGroupDto) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IncidentGroupDto) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentGroupDto) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IncidentGroupDto) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *IncidentGroupDto) SetType(v string) {
	o.Type = &v
}

// GetDetail returns the Detail field value if set, zero value otherwise.
func (o *IncidentGroupDto) GetDetail() IncidentGroupDetailDto {
	if o == nil || IsNil(o.Detail) {
		var ret IncidentGroupDetailDto
		return ret
	}
	return *o.Detail
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentGroupDto) GetDetailOk() (*IncidentGroupDetailDto, bool) {
	if o == nil || IsNil(o.Detail) {
		return nil, false
	}
	return o.Detail, true
}

// HasDetail returns a boolean if a field has been set.
func (o *IncidentGroupDto) HasDetail() bool {
	if o != nil && !IsNil(o.Detail) {
		return true
	}

	return false
}

// SetDetail gets a reference to the given IncidentGroupDetailDto and assigns it to the Detail field.
func (o *IncidentGroupDto) SetDetail(v IncidentGroupDetailDto) {
	o.Detail = &v
}

// GetIncidents returns the Incidents field value if set, zero value otherwise.
func (o *IncidentGroupDto) GetIncidents() []IncidentDto {
	if o == nil || IsNil(o.Incidents) {
		var ret []IncidentDto
		return ret
	}
	return o.Incidents
}

// GetIncidentsOk returns a tuple with the Incidents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentGroupDto) GetIncidentsOk() ([]IncidentDto, bool) {
	if o == nil || IsNil(o.Incidents) {
		return nil, false
	}
	return o.Incidents, true
}

// HasIncidents returns a boolean if a field has been set.
func (o *IncidentGroupDto) HasIncidents() bool {
	if o != nil && !IsNil(o.Incidents) {
		return true
	}

	return false
}

// SetIncidents gets a reference to the given []IncidentDto and assigns it to the Incidents field.
func (o *IncidentGroupDto) SetIncidents(v []IncidentDto) {
	o.Incidents = v
}

func (o IncidentGroupDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IncidentGroupDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Detail) {
		toSerialize["detail"] = o.Detail
	}
	if !IsNil(o.Incidents) {
		toSerialize["incidents"] = o.Incidents
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IncidentGroupDto) UnmarshalJSON(data []byte) (err error) {
	varIncidentGroupDto := _IncidentGroupDto{}

	err = json.Unmarshal(data, &varIncidentGroupDto)

	if err != nil {
		return err
	}

	*o = IncidentGroupDto(varIncidentGroupDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "detail")
		delete(additionalProperties, "incidents")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIncidentGroupDto struct {
	value *IncidentGroupDto
	isSet bool
}

func (v NullableIncidentGroupDto) Get() *IncidentGroupDto {
	return v.value
}

func (v *NullableIncidentGroupDto) Set(val *IncidentGroupDto) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentGroupDto) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentGroupDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentGroupDto(val *IncidentGroupDto) *NullableIncidentGroupDto {
	return &NullableIncidentGroupDto{value: val, isSet: true}
}

func (v NullableIncidentGroupDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentGroupDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
