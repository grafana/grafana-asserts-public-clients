/*
Asserts, Inc

Asserts Public API

API version: 2025.08.25-143624
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the ModelMappingSignalDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelMappingSignalDto{}

// ModelMappingSignalDto struct for ModelMappingSignalDto
type ModelMappingSignalDto struct {
	Id                   *string                       `json:"id,omitempty"`
	EntityNameLabel      string                        `json:"entityNameLabel"`
	MetricSource         string                        `json:"metricSource"`
	RequestType          string                        `json:"requestType"`
	RequestContext       []string                      `json:"requestContext,omitempty"`
	RequestContextJoin   *string                       `json:"requestContextJoin,omitempty"`
	Filters              []ModelMappingSignalFilterDto `json:"filters,omitempty"`
	Kind                 string                        `json:"kind"`
	AdditionalProperties map[string]interface{}
}

type _ModelMappingSignalDto ModelMappingSignalDto

// NewModelMappingSignalDto instantiates a new ModelMappingSignalDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelMappingSignalDto(entityNameLabel string, metricSource string, requestType string, kind string) *ModelMappingSignalDto {
	this := ModelMappingSignalDto{}
	this.EntityNameLabel = entityNameLabel
	this.MetricSource = metricSource
	this.RequestType = requestType
	this.Kind = kind
	return &this
}

// NewModelMappingSignalDtoWithDefaults instantiates a new ModelMappingSignalDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelMappingSignalDtoWithDefaults() *ModelMappingSignalDto {
	this := ModelMappingSignalDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelMappingSignalDto) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMappingSignalDto) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelMappingSignalDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ModelMappingSignalDto) SetId(v string) {
	o.Id = &v
}

// GetEntityNameLabel returns the EntityNameLabel field value
func (o *ModelMappingSignalDto) GetEntityNameLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityNameLabel
}

// GetEntityNameLabelOk returns a tuple with the EntityNameLabel field value
// and a boolean to check if the value has been set.
func (o *ModelMappingSignalDto) GetEntityNameLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityNameLabel, true
}

// SetEntityNameLabel sets field value
func (o *ModelMappingSignalDto) SetEntityNameLabel(v string) {
	o.EntityNameLabel = v
}

// GetMetricSource returns the MetricSource field value
func (o *ModelMappingSignalDto) GetMetricSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetricSource
}

// GetMetricSourceOk returns a tuple with the MetricSource field value
// and a boolean to check if the value has been set.
func (o *ModelMappingSignalDto) GetMetricSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetricSource, true
}

// SetMetricSource sets field value
func (o *ModelMappingSignalDto) SetMetricSource(v string) {
	o.MetricSource = v
}

// GetRequestType returns the RequestType field value
func (o *ModelMappingSignalDto) GetRequestType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestType
}

// GetRequestTypeOk returns a tuple with the RequestType field value
// and a boolean to check if the value has been set.
func (o *ModelMappingSignalDto) GetRequestTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestType, true
}

// SetRequestType sets field value
func (o *ModelMappingSignalDto) SetRequestType(v string) {
	o.RequestType = v
}

// GetRequestContext returns the RequestContext field value if set, zero value otherwise.
func (o *ModelMappingSignalDto) GetRequestContext() []string {
	if o == nil || IsNil(o.RequestContext) {
		var ret []string
		return ret
	}
	return o.RequestContext
}

// GetRequestContextOk returns a tuple with the RequestContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMappingSignalDto) GetRequestContextOk() ([]string, bool) {
	if o == nil || IsNil(o.RequestContext) {
		return nil, false
	}
	return o.RequestContext, true
}

// HasRequestContext returns a boolean if a field has been set.
func (o *ModelMappingSignalDto) HasRequestContext() bool {
	if o != nil && !IsNil(o.RequestContext) {
		return true
	}

	return false
}

// SetRequestContext gets a reference to the given []string and assigns it to the RequestContext field.
func (o *ModelMappingSignalDto) SetRequestContext(v []string) {
	o.RequestContext = v
}

// GetRequestContextJoin returns the RequestContextJoin field value if set, zero value otherwise.
func (o *ModelMappingSignalDto) GetRequestContextJoin() string {
	if o == nil || IsNil(o.RequestContextJoin) {
		var ret string
		return ret
	}
	return *o.RequestContextJoin
}

// GetRequestContextJoinOk returns a tuple with the RequestContextJoin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMappingSignalDto) GetRequestContextJoinOk() (*string, bool) {
	if o == nil || IsNil(o.RequestContextJoin) {
		return nil, false
	}
	return o.RequestContextJoin, true
}

// HasRequestContextJoin returns a boolean if a field has been set.
func (o *ModelMappingSignalDto) HasRequestContextJoin() bool {
	if o != nil && !IsNil(o.RequestContextJoin) {
		return true
	}

	return false
}

// SetRequestContextJoin gets a reference to the given string and assigns it to the RequestContextJoin field.
func (o *ModelMappingSignalDto) SetRequestContextJoin(v string) {
	o.RequestContextJoin = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *ModelMappingSignalDto) GetFilters() []ModelMappingSignalFilterDto {
	if o == nil || IsNil(o.Filters) {
		var ret []ModelMappingSignalFilterDto
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMappingSignalDto) GetFiltersOk() ([]ModelMappingSignalFilterDto, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *ModelMappingSignalDto) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []ModelMappingSignalFilterDto and assigns it to the Filters field.
func (o *ModelMappingSignalDto) SetFilters(v []ModelMappingSignalFilterDto) {
	o.Filters = v
}

// GetKind returns the Kind field value
func (o *ModelMappingSignalDto) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *ModelMappingSignalDto) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *ModelMappingSignalDto) SetKind(v string) {
	o.Kind = v
}

func (o ModelMappingSignalDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelMappingSignalDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["entityNameLabel"] = o.EntityNameLabel
	toSerialize["metricSource"] = o.MetricSource
	toSerialize["requestType"] = o.RequestType
	if !IsNil(o.RequestContext) {
		toSerialize["requestContext"] = o.RequestContext
	}
	if !IsNil(o.RequestContextJoin) {
		toSerialize["requestContextJoin"] = o.RequestContextJoin
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	toSerialize["kind"] = o.Kind

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelMappingSignalDto) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varModelMappingSignalDto := _ModelMappingSignalDto{}

	err = json.Unmarshal(data, &varModelMappingSignalDto)

	if err != nil {
		return err
	}

	*o = ModelMappingSignalDto(varModelMappingSignalDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "entityNameLabel")
		delete(additionalProperties, "metricSource")
		delete(additionalProperties, "requestType")
		delete(additionalProperties, "requestContext")
		delete(additionalProperties, "requestContextJoin")
		delete(additionalProperties, "filters")
		delete(additionalProperties, "kind")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelMappingSignalDto struct {
	value *ModelMappingSignalDto
	isSet bool
}

func (v NullableModelMappingSignalDto) Get() *ModelMappingSignalDto {
	return v.value
}

func (v *NullableModelMappingSignalDto) Set(val *ModelMappingSignalDto) {
	v.value = val
	v.isSet = true
}

func (v NullableModelMappingSignalDto) IsSet() bool {
	return v.isSet
}

func (v *NullableModelMappingSignalDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelMappingSignalDto(val *ModelMappingSignalDto) *NullableModelMappingSignalDto {
	return &NullableModelMappingSignalDto{value: val, isSet: true}
}

func (v NullableModelMappingSignalDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelMappingSignalDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
