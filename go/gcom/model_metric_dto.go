/*
Asserts, Inc

Asserts Public API

API version: 1.0.1
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the MetricDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricDto{}

// MetricDto struct for MetricDto
type MetricDto struct {
	Query                *string           `json:"query,omitempty"`
	Name                 *string           `json:"name,omitempty"`
	FillZeros            *bool             `json:"fillZeros,omitempty"`
	Metric               map[string]string `json:"metric,omitempty"`
	Values               []MetricValueDto  `json:"values,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MetricDto MetricDto

// NewMetricDto instantiates a new MetricDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricDto() *MetricDto {
	this := MetricDto{}
	return &this
}

// NewMetricDtoWithDefaults instantiates a new MetricDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricDtoWithDefaults() *MetricDto {
	this := MetricDto{}
	return &this
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *MetricDto) GetQuery() string {
	if o == nil || IsNil(o.Query) {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricDto) GetQueryOk() (*string, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *MetricDto) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *MetricDto) SetQuery(v string) {
	o.Query = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MetricDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MetricDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MetricDto) SetName(v string) {
	o.Name = &v
}

// GetFillZeros returns the FillZeros field value if set, zero value otherwise.
func (o *MetricDto) GetFillZeros() bool {
	if o == nil || IsNil(o.FillZeros) {
		var ret bool
		return ret
	}
	return *o.FillZeros
}

// GetFillZerosOk returns a tuple with the FillZeros field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricDto) GetFillZerosOk() (*bool, bool) {
	if o == nil || IsNil(o.FillZeros) {
		return nil, false
	}
	return o.FillZeros, true
}

// HasFillZeros returns a boolean if a field has been set.
func (o *MetricDto) HasFillZeros() bool {
	if o != nil && !IsNil(o.FillZeros) {
		return true
	}

	return false
}

// SetFillZeros gets a reference to the given bool and assigns it to the FillZeros field.
func (o *MetricDto) SetFillZeros(v bool) {
	o.FillZeros = &v
}

// GetMetric returns the Metric field value if set, zero value otherwise.
func (o *MetricDto) GetMetric() map[string]string {
	if o == nil || IsNil(o.Metric) {
		var ret map[string]string
		return ret
	}
	return o.Metric
}

// GetMetricOk returns a tuple with the Metric field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricDto) GetMetricOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Metric) {
		return map[string]string{}, false
	}
	return o.Metric, true
}

// HasMetric returns a boolean if a field has been set.
func (o *MetricDto) HasMetric() bool {
	if o != nil && !IsNil(o.Metric) {
		return true
	}

	return false
}

// SetMetric gets a reference to the given map[string]string and assigns it to the Metric field.
func (o *MetricDto) SetMetric(v map[string]string) {
	o.Metric = v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *MetricDto) GetValues() []MetricValueDto {
	if o == nil || IsNil(o.Values) {
		var ret []MetricValueDto
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricDto) GetValuesOk() ([]MetricValueDto, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *MetricDto) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []MetricValueDto and assigns it to the Values field.
func (o *MetricDto) SetValues(v []MetricValueDto) {
	o.Values = v
}

func (o MetricDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.FillZeros) {
		toSerialize["fillZeros"] = o.FillZeros
	}
	if !IsNil(o.Metric) {
		toSerialize["metric"] = o.Metric
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MetricDto) UnmarshalJSON(data []byte) (err error) {
	varMetricDto := _MetricDto{}

	err = json.Unmarshal(data, &varMetricDto)

	if err != nil {
		return err
	}

	*o = MetricDto(varMetricDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "query")
		delete(additionalProperties, "name")
		delete(additionalProperties, "fillZeros")
		delete(additionalProperties, "metric")
		delete(additionalProperties, "values")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMetricDto struct {
	value *MetricDto
	isSet bool
}

func (v NullableMetricDto) Get() *MetricDto {
	return v.value
}

func (v *NullableMetricDto) Set(val *MetricDto) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricDto) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricDto(val *MetricDto) *NullableMetricDto {
	return &NullableMetricDto{value: val, isSet: true}
}

func (v NullableMetricDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
