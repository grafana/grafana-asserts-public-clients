/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-110859
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the StackEnableDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StackEnableDto{}

// StackEnableDto struct for StackEnableDto
type StackEnableDto struct {
	Vendors              []string              `json:"vendors,omitempty"`
	Groups               []StackFilterGroupDto `json:"groups,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StackEnableDto StackEnableDto

// NewStackEnableDto instantiates a new StackEnableDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStackEnableDto() *StackEnableDto {
	this := StackEnableDto{}
	return &this
}

// NewStackEnableDtoWithDefaults instantiates a new StackEnableDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStackEnableDtoWithDefaults() *StackEnableDto {
	this := StackEnableDto{}
	return &this
}

// GetVendors returns the Vendors field value if set, zero value otherwise.
func (o *StackEnableDto) GetVendors() []string {
	if o == nil || IsNil(o.Vendors) {
		var ret []string
		return ret
	}
	return o.Vendors
}

// GetVendorsOk returns a tuple with the Vendors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackEnableDto) GetVendorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Vendors) {
		return nil, false
	}
	return o.Vendors, true
}

// HasVendors returns a boolean if a field has been set.
func (o *StackEnableDto) HasVendors() bool {
	if o != nil && !IsNil(o.Vendors) {
		return true
	}

	return false
}

// SetVendors gets a reference to the given []string and assigns it to the Vendors field.
func (o *StackEnableDto) SetVendors(v []string) {
	o.Vendors = v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *StackEnableDto) GetGroups() []StackFilterGroupDto {
	if o == nil || IsNil(o.Groups) {
		var ret []StackFilterGroupDto
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackEnableDto) GetGroupsOk() ([]StackFilterGroupDto, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *StackEnableDto) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []StackFilterGroupDto and assigns it to the Groups field.
func (o *StackEnableDto) SetGroups(v []StackFilterGroupDto) {
	o.Groups = v
}

func (o StackEnableDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StackEnableDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Vendors) {
		toSerialize["vendors"] = o.Vendors
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StackEnableDto) UnmarshalJSON(data []byte) (err error) {
	varStackEnableDto := _StackEnableDto{}

	err = json.Unmarshal(data, &varStackEnableDto)

	if err != nil {
		return err
	}

	*o = StackEnableDto(varStackEnableDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "vendors")
		delete(additionalProperties, "groups")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStackEnableDto struct {
	value *StackEnableDto
	isSet bool
}

func (v NullableStackEnableDto) Get() *StackEnableDto {
	return v.value
}

func (v *NullableStackEnableDto) Set(val *StackEnableDto) {
	v.value = val
	v.isSet = true
}

func (v NullableStackEnableDto) IsSet() bool {
	return v.isSet
}

func (v *NullableStackEnableDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStackEnableDto(val *StackEnableDto) *NullableStackEnableDto {
	return &NullableStackEnableDto{value: val, isSet: true}
}

func (v NullableStackEnableDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStackEnableDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
