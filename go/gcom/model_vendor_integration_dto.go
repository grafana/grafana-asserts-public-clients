/*
Asserts, Inc

Asserts Public API

API version: 2025.09.11-132913
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the VendorIntegrationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VendorIntegrationDto{}

// VendorIntegrationDto struct for VendorIntegrationDto
type VendorIntegrationDto struct {
	Name                 *string `json:"name,omitempty"`
	Enabled              *bool   `json:"enabled,omitempty"`
	Assertified          *bool   `json:"assertified,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VendorIntegrationDto VendorIntegrationDto

// NewVendorIntegrationDto instantiates a new VendorIntegrationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVendorIntegrationDto() *VendorIntegrationDto {
	this := VendorIntegrationDto{}
	return &this
}

// NewVendorIntegrationDtoWithDefaults instantiates a new VendorIntegrationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVendorIntegrationDtoWithDefaults() *VendorIntegrationDto {
	this := VendorIntegrationDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VendorIntegrationDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorIntegrationDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VendorIntegrationDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VendorIntegrationDto) SetName(v string) {
	o.Name = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *VendorIntegrationDto) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorIntegrationDto) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *VendorIntegrationDto) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *VendorIntegrationDto) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetAssertified returns the Assertified field value if set, zero value otherwise.
func (o *VendorIntegrationDto) GetAssertified() bool {
	if o == nil || IsNil(o.Assertified) {
		var ret bool
		return ret
	}
	return *o.Assertified
}

// GetAssertifiedOk returns a tuple with the Assertified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorIntegrationDto) GetAssertifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.Assertified) {
		return nil, false
	}
	return o.Assertified, true
}

// HasAssertified returns a boolean if a field has been set.
func (o *VendorIntegrationDto) HasAssertified() bool {
	if o != nil && !IsNil(o.Assertified) {
		return true
	}

	return false
}

// SetAssertified gets a reference to the given bool and assigns it to the Assertified field.
func (o *VendorIntegrationDto) SetAssertified(v bool) {
	o.Assertified = &v
}

func (o VendorIntegrationDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VendorIntegrationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Assertified) {
		toSerialize["assertified"] = o.Assertified
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VendorIntegrationDto) UnmarshalJSON(data []byte) (err error) {
	varVendorIntegrationDto := _VendorIntegrationDto{}

	err = json.Unmarshal(data, &varVendorIntegrationDto)

	if err != nil {
		return err
	}

	*o = VendorIntegrationDto(varVendorIntegrationDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "assertified")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVendorIntegrationDto struct {
	value *VendorIntegrationDto
	isSet bool
}

func (v NullableVendorIntegrationDto) Get() *VendorIntegrationDto {
	return v.value
}

func (v *NullableVendorIntegrationDto) Set(val *VendorIntegrationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableVendorIntegrationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableVendorIntegrationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVendorIntegrationDto(val *VendorIntegrationDto) *NullableVendorIntegrationDto {
	return &NullableVendorIntegrationDto{value: val, isSet: true}
}

func (v NullableVendorIntegrationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVendorIntegrationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
