/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-062139
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
	"reflect"
	"strings"
)

// checks if the ModelMappingRequestRateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelMappingRequestRateDto{}

// ModelMappingRequestRateDto struct for ModelMappingRequestRateDto
type ModelMappingRequestRateDto struct {
	ModelMappingSignalDto
	MetricName           string `json:"metricName"`
	MetricType           string `json:"metricType" validate:"regexp=counter|gauge"`
	AdditionalProperties map[string]interface{}
}

type _ModelMappingRequestRateDto ModelMappingRequestRateDto

// NewModelMappingRequestRateDto instantiates a new ModelMappingRequestRateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelMappingRequestRateDto(metricName string, metricType string, entityNameLabel string, metricSource string, requestType string, kind string) *ModelMappingRequestRateDto {
	this := ModelMappingRequestRateDto{}
	this.EntityNameLabel = entityNameLabel
	this.MetricSource = metricSource
	this.RequestType = requestType
	this.Kind = kind
	this.MetricName = metricName
	this.MetricType = metricType
	return &this
}

// NewModelMappingRequestRateDtoWithDefaults instantiates a new ModelMappingRequestRateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelMappingRequestRateDtoWithDefaults() *ModelMappingRequestRateDto {
	this := ModelMappingRequestRateDto{}
	return &this
}

// GetMetricName returns the MetricName field value
func (o *ModelMappingRequestRateDto) GetMetricName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetricName
}

// GetMetricNameOk returns a tuple with the MetricName field value
// and a boolean to check if the value has been set.
func (o *ModelMappingRequestRateDto) GetMetricNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetricName, true
}

// SetMetricName sets field value
func (o *ModelMappingRequestRateDto) SetMetricName(v string) {
	o.MetricName = v
}

// GetMetricType returns the MetricType field value
func (o *ModelMappingRequestRateDto) GetMetricType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetricType
}

// GetMetricTypeOk returns a tuple with the MetricType field value
// and a boolean to check if the value has been set.
func (o *ModelMappingRequestRateDto) GetMetricTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetricType, true
}

// SetMetricType sets field value
func (o *ModelMappingRequestRateDto) SetMetricType(v string) {
	o.MetricType = v
}

func (o ModelMappingRequestRateDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelMappingRequestRateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedModelMappingSignalDto, errModelMappingSignalDto := json.Marshal(o.ModelMappingSignalDto)
	if errModelMappingSignalDto != nil {
		return map[string]interface{}{}, errModelMappingSignalDto
	}
	errModelMappingSignalDto = json.Unmarshal([]byte(serializedModelMappingSignalDto), &toSerialize)
	if errModelMappingSignalDto != nil {
		return map[string]interface{}{}, errModelMappingSignalDto
	}
	toSerialize["metricName"] = o.MetricName
	toSerialize["metricType"] = o.MetricType

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelMappingRequestRateDto) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	type ModelMappingRequestRateDtoWithoutEmbeddedStruct struct {
		MetricName string `json:"metricName"`
		MetricType string `json:"metricType" validate:"regexp=counter|gauge"`
	}

	varModelMappingRequestRateDtoWithoutEmbeddedStruct := ModelMappingRequestRateDtoWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varModelMappingRequestRateDtoWithoutEmbeddedStruct)
	if err == nil {
		varModelMappingRequestRateDto := _ModelMappingRequestRateDto{}
		varModelMappingRequestRateDto.MetricName = varModelMappingRequestRateDtoWithoutEmbeddedStruct.MetricName
		varModelMappingRequestRateDto.MetricType = varModelMappingRequestRateDtoWithoutEmbeddedStruct.MetricType
		*o = ModelMappingRequestRateDto(varModelMappingRequestRateDto)
	} else {
		return err
	}

	varModelMappingRequestRateDto := _ModelMappingRequestRateDto{}

	err = json.Unmarshal(data, &varModelMappingRequestRateDto)
	if err == nil {
		o.ModelMappingSignalDto = varModelMappingRequestRateDto.ModelMappingSignalDto
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "metricName")
		delete(additionalProperties, "metricType")

		// remove fields from embedded structs
		reflectModelMappingSignalDto := reflect.ValueOf(o.ModelMappingSignalDto)
		for i := 0; i < reflectModelMappingSignalDto.Type().NumField(); i++ {
			t := reflectModelMappingSignalDto.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelMappingRequestRateDto struct {
	value *ModelMappingRequestRateDto
	isSet bool
}

func (v NullableModelMappingRequestRateDto) Get() *ModelMappingRequestRateDto {
	return v.value
}

func (v *NullableModelMappingRequestRateDto) Set(val *ModelMappingRequestRateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableModelMappingRequestRateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableModelMappingRequestRateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelMappingRequestRateDto(val *ModelMappingRequestRateDto) *NullableModelMappingRequestRateDto {
	return &NullableModelMappingRequestRateDto{value: val, isSet: true}
}

func (v NullableModelMappingRequestRateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelMappingRequestRateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
