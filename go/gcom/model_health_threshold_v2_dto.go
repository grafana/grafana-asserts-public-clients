/*
Asserts, Inc

Asserts Public API

API version: 2025.09.11-132913
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the HealthThresholdV2Dto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HealthThresholdV2Dto{}

// HealthThresholdV2Dto struct for HealthThresholdV2Dto
type HealthThresholdV2Dto struct {
	AssertionName        string `json:"assertionName"`
	Expression           string `json:"expression"`
	AdditionalProperties map[string]interface{}
}

type _HealthThresholdV2Dto HealthThresholdV2Dto

// NewHealthThresholdV2Dto instantiates a new HealthThresholdV2Dto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealthThresholdV2Dto(assertionName string, expression string) *HealthThresholdV2Dto {
	this := HealthThresholdV2Dto{}
	this.AssertionName = assertionName
	this.Expression = expression
	return &this
}

// NewHealthThresholdV2DtoWithDefaults instantiates a new HealthThresholdV2Dto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthThresholdV2DtoWithDefaults() *HealthThresholdV2Dto {
	this := HealthThresholdV2Dto{}
	return &this
}

// GetAssertionName returns the AssertionName field value
func (o *HealthThresholdV2Dto) GetAssertionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssertionName
}

// GetAssertionNameOk returns a tuple with the AssertionName field value
// and a boolean to check if the value has been set.
func (o *HealthThresholdV2Dto) GetAssertionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssertionName, true
}

// SetAssertionName sets field value
func (o *HealthThresholdV2Dto) SetAssertionName(v string) {
	o.AssertionName = v
}

// GetExpression returns the Expression field value
func (o *HealthThresholdV2Dto) GetExpression() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value
// and a boolean to check if the value has been set.
func (o *HealthThresholdV2Dto) GetExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Expression, true
}

// SetExpression sets field value
func (o *HealthThresholdV2Dto) SetExpression(v string) {
	o.Expression = v
}

func (o HealthThresholdV2Dto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HealthThresholdV2Dto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assertionName"] = o.AssertionName
	toSerialize["expression"] = o.Expression

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HealthThresholdV2Dto) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varHealthThresholdV2Dto := _HealthThresholdV2Dto{}

	err = json.Unmarshal(data, &varHealthThresholdV2Dto)

	if err != nil {
		return err
	}

	*o = HealthThresholdV2Dto(varHealthThresholdV2Dto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "assertionName")
		delete(additionalProperties, "expression")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHealthThresholdV2Dto struct {
	value *HealthThresholdV2Dto
	isSet bool
}

func (v NullableHealthThresholdV2Dto) Get() *HealthThresholdV2Dto {
	return v.value
}

func (v *NullableHealthThresholdV2Dto) Set(val *HealthThresholdV2Dto) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthThresholdV2Dto) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthThresholdV2Dto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthThresholdV2Dto(val *HealthThresholdV2Dto) *NullableHealthThresholdV2Dto {
	return &NullableHealthThresholdV2Dto{value: val, isSet: true}
}

func (v NullableHealthThresholdV2Dto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthThresholdV2Dto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
