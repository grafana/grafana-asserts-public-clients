/*
Asserts, Inc

Asserts Public API

API version: 2025.08.07-125604
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the LlmRcaAssertionStateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LlmRcaAssertionStateDto{}

// LlmRcaAssertionStateDto struct for LlmRcaAssertionStateDto
type LlmRcaAssertionStateDto struct {
	Start                *int64  `json:"start,omitempty"`
	End                  *int64  `json:"end,omitempty"`
	Severity             *string `json:"severity,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LlmRcaAssertionStateDto LlmRcaAssertionStateDto

// NewLlmRcaAssertionStateDto instantiates a new LlmRcaAssertionStateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLlmRcaAssertionStateDto() *LlmRcaAssertionStateDto {
	this := LlmRcaAssertionStateDto{}
	return &this
}

// NewLlmRcaAssertionStateDtoWithDefaults instantiates a new LlmRcaAssertionStateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLlmRcaAssertionStateDtoWithDefaults() *LlmRcaAssertionStateDto {
	this := LlmRcaAssertionStateDto{}
	return &this
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *LlmRcaAssertionStateDto) GetStart() int64 {
	if o == nil || IsNil(o.Start) {
		var ret int64
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LlmRcaAssertionStateDto) GetStartOk() (*int64, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *LlmRcaAssertionStateDto) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given int64 and assigns it to the Start field.
func (o *LlmRcaAssertionStateDto) SetStart(v int64) {
	o.Start = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *LlmRcaAssertionStateDto) GetEnd() int64 {
	if o == nil || IsNil(o.End) {
		var ret int64
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LlmRcaAssertionStateDto) GetEndOk() (*int64, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *LlmRcaAssertionStateDto) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given int64 and assigns it to the End field.
func (o *LlmRcaAssertionStateDto) SetEnd(v int64) {
	o.End = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *LlmRcaAssertionStateDto) GetSeverity() string {
	if o == nil || IsNil(o.Severity) {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LlmRcaAssertionStateDto) GetSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *LlmRcaAssertionStateDto) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *LlmRcaAssertionStateDto) SetSeverity(v string) {
	o.Severity = &v
}

func (o LlmRcaAssertionStateDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LlmRcaAssertionStateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LlmRcaAssertionStateDto) UnmarshalJSON(data []byte) (err error) {
	varLlmRcaAssertionStateDto := _LlmRcaAssertionStateDto{}

	err = json.Unmarshal(data, &varLlmRcaAssertionStateDto)

	if err != nil {
		return err
	}

	*o = LlmRcaAssertionStateDto(varLlmRcaAssertionStateDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "start")
		delete(additionalProperties, "end")
		delete(additionalProperties, "severity")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLlmRcaAssertionStateDto struct {
	value *LlmRcaAssertionStateDto
	isSet bool
}

func (v NullableLlmRcaAssertionStateDto) Get() *LlmRcaAssertionStateDto {
	return v.value
}

func (v *NullableLlmRcaAssertionStateDto) Set(val *LlmRcaAssertionStateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableLlmRcaAssertionStateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableLlmRcaAssertionStateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLlmRcaAssertionStateDto(val *LlmRcaAssertionStateDto) *NullableLlmRcaAssertionStateDto {
	return &NullableLlmRcaAssertionStateDto{value: val, isSet: true}
}

func (v NullableLlmRcaAssertionStateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLlmRcaAssertionStateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
