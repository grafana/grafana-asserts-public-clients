/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-112305
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the EntityAssertionScoresDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntityAssertionScoresDto{}

// EntityAssertionScoresDto struct for EntityAssertionScoresDto
type EntityAssertionScoresDto struct {
	Type                       *string                `json:"type,omitempty"`
	Name                       *string                `json:"name,omitempty"`
	TypeLabels                 map[string]string      `json:"typeLabels,omitempty"`
	Scope                      map[string]interface{} `json:"scope,omitempty"`
	Metrics                    []MetricDto            `json:"metrics,omitempty"`
	TotalScore                 *float64               `json:"totalScore,omitempty"`
	SeverityWiseTotalScores    map[string]float64     `json:"severityWiseTotalScores,omitempty"`
	Percentage                 *string                `json:"percentage,omitempty"`
	AssertionClusters          []AssertionClusterDto  `json:"assertionClusters,omitempty"`
	InboundClientErrorBreached *bool                  `json:"inboundClientErrorBreached,omitempty"`
	AdditionalProperties       map[string]interface{}
}

type _EntityAssertionScoresDto EntityAssertionScoresDto

// NewEntityAssertionScoresDto instantiates a new EntityAssertionScoresDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityAssertionScoresDto() *EntityAssertionScoresDto {
	this := EntityAssertionScoresDto{}
	return &this
}

// NewEntityAssertionScoresDtoWithDefaults instantiates a new EntityAssertionScoresDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityAssertionScoresDtoWithDefaults() *EntityAssertionScoresDto {
	this := EntityAssertionScoresDto{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EntityAssertionScoresDto) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityAssertionScoresDto) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EntityAssertionScoresDto) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EntityAssertionScoresDto) SetType(v string) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EntityAssertionScoresDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityAssertionScoresDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EntityAssertionScoresDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EntityAssertionScoresDto) SetName(v string) {
	o.Name = &v
}

// GetTypeLabels returns the TypeLabels field value if set, zero value otherwise.
func (o *EntityAssertionScoresDto) GetTypeLabels() map[string]string {
	if o == nil || IsNil(o.TypeLabels) {
		var ret map[string]string
		return ret
	}
	return o.TypeLabels
}

// GetTypeLabelsOk returns a tuple with the TypeLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityAssertionScoresDto) GetTypeLabelsOk() (map[string]string, bool) {
	if o == nil || IsNil(o.TypeLabels) {
		return map[string]string{}, false
	}
	return o.TypeLabels, true
}

// HasTypeLabels returns a boolean if a field has been set.
func (o *EntityAssertionScoresDto) HasTypeLabels() bool {
	if o != nil && !IsNil(o.TypeLabels) {
		return true
	}

	return false
}

// SetTypeLabels gets a reference to the given map[string]string and assigns it to the TypeLabels field.
func (o *EntityAssertionScoresDto) SetTypeLabels(v map[string]string) {
	o.TypeLabels = v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *EntityAssertionScoresDto) GetScope() map[string]interface{} {
	if o == nil || IsNil(o.Scope) {
		var ret map[string]interface{}
		return ret
	}
	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityAssertionScoresDto) GetScopeOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Scope) {
		return map[string]interface{}{}, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *EntityAssertionScoresDto) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given map[string]interface{} and assigns it to the Scope field.
func (o *EntityAssertionScoresDto) SetScope(v map[string]interface{}) {
	o.Scope = v
}

// GetMetrics returns the Metrics field value if set, zero value otherwise.
func (o *EntityAssertionScoresDto) GetMetrics() []MetricDto {
	if o == nil || IsNil(o.Metrics) {
		var ret []MetricDto
		return ret
	}
	return o.Metrics
}

// GetMetricsOk returns a tuple with the Metrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityAssertionScoresDto) GetMetricsOk() ([]MetricDto, bool) {
	if o == nil || IsNil(o.Metrics) {
		return nil, false
	}
	return o.Metrics, true
}

// HasMetrics returns a boolean if a field has been set.
func (o *EntityAssertionScoresDto) HasMetrics() bool {
	if o != nil && !IsNil(o.Metrics) {
		return true
	}

	return false
}

// SetMetrics gets a reference to the given []MetricDto and assigns it to the Metrics field.
func (o *EntityAssertionScoresDto) SetMetrics(v []MetricDto) {
	o.Metrics = v
}

// GetTotalScore returns the TotalScore field value if set, zero value otherwise.
func (o *EntityAssertionScoresDto) GetTotalScore() float64 {
	if o == nil || IsNil(o.TotalScore) {
		var ret float64
		return ret
	}
	return *o.TotalScore
}

// GetTotalScoreOk returns a tuple with the TotalScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityAssertionScoresDto) GetTotalScoreOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalScore) {
		return nil, false
	}
	return o.TotalScore, true
}

// HasTotalScore returns a boolean if a field has been set.
func (o *EntityAssertionScoresDto) HasTotalScore() bool {
	if o != nil && !IsNil(o.TotalScore) {
		return true
	}

	return false
}

// SetTotalScore gets a reference to the given float64 and assigns it to the TotalScore field.
func (o *EntityAssertionScoresDto) SetTotalScore(v float64) {
	o.TotalScore = &v
}

// GetSeverityWiseTotalScores returns the SeverityWiseTotalScores field value if set, zero value otherwise.
func (o *EntityAssertionScoresDto) GetSeverityWiseTotalScores() map[string]float64 {
	if o == nil || IsNil(o.SeverityWiseTotalScores) {
		var ret map[string]float64
		return ret
	}
	return o.SeverityWiseTotalScores
}

// GetSeverityWiseTotalScoresOk returns a tuple with the SeverityWiseTotalScores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityAssertionScoresDto) GetSeverityWiseTotalScoresOk() (map[string]float64, bool) {
	if o == nil || IsNil(o.SeverityWiseTotalScores) {
		return map[string]float64{}, false
	}
	return o.SeverityWiseTotalScores, true
}

// HasSeverityWiseTotalScores returns a boolean if a field has been set.
func (o *EntityAssertionScoresDto) HasSeverityWiseTotalScores() bool {
	if o != nil && !IsNil(o.SeverityWiseTotalScores) {
		return true
	}

	return false
}

// SetSeverityWiseTotalScores gets a reference to the given map[string]float64 and assigns it to the SeverityWiseTotalScores field.
func (o *EntityAssertionScoresDto) SetSeverityWiseTotalScores(v map[string]float64) {
	o.SeverityWiseTotalScores = v
}

// GetPercentage returns the Percentage field value if set, zero value otherwise.
func (o *EntityAssertionScoresDto) GetPercentage() string {
	if o == nil || IsNil(o.Percentage) {
		var ret string
		return ret
	}
	return *o.Percentage
}

// GetPercentageOk returns a tuple with the Percentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityAssertionScoresDto) GetPercentageOk() (*string, bool) {
	if o == nil || IsNil(o.Percentage) {
		return nil, false
	}
	return o.Percentage, true
}

// HasPercentage returns a boolean if a field has been set.
func (o *EntityAssertionScoresDto) HasPercentage() bool {
	if o != nil && !IsNil(o.Percentage) {
		return true
	}

	return false
}

// SetPercentage gets a reference to the given string and assigns it to the Percentage field.
func (o *EntityAssertionScoresDto) SetPercentage(v string) {
	o.Percentage = &v
}

// GetAssertionClusters returns the AssertionClusters field value if set, zero value otherwise.
func (o *EntityAssertionScoresDto) GetAssertionClusters() []AssertionClusterDto {
	if o == nil || IsNil(o.AssertionClusters) {
		var ret []AssertionClusterDto
		return ret
	}
	return o.AssertionClusters
}

// GetAssertionClustersOk returns a tuple with the AssertionClusters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityAssertionScoresDto) GetAssertionClustersOk() ([]AssertionClusterDto, bool) {
	if o == nil || IsNil(o.AssertionClusters) {
		return nil, false
	}
	return o.AssertionClusters, true
}

// HasAssertionClusters returns a boolean if a field has been set.
func (o *EntityAssertionScoresDto) HasAssertionClusters() bool {
	if o != nil && !IsNil(o.AssertionClusters) {
		return true
	}

	return false
}

// SetAssertionClusters gets a reference to the given []AssertionClusterDto and assigns it to the AssertionClusters field.
func (o *EntityAssertionScoresDto) SetAssertionClusters(v []AssertionClusterDto) {
	o.AssertionClusters = v
}

// GetInboundClientErrorBreached returns the InboundClientErrorBreached field value if set, zero value otherwise.
func (o *EntityAssertionScoresDto) GetInboundClientErrorBreached() bool {
	if o == nil || IsNil(o.InboundClientErrorBreached) {
		var ret bool
		return ret
	}
	return *o.InboundClientErrorBreached
}

// GetInboundClientErrorBreachedOk returns a tuple with the InboundClientErrorBreached field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityAssertionScoresDto) GetInboundClientErrorBreachedOk() (*bool, bool) {
	if o == nil || IsNil(o.InboundClientErrorBreached) {
		return nil, false
	}
	return o.InboundClientErrorBreached, true
}

// HasInboundClientErrorBreached returns a boolean if a field has been set.
func (o *EntityAssertionScoresDto) HasInboundClientErrorBreached() bool {
	if o != nil && !IsNil(o.InboundClientErrorBreached) {
		return true
	}

	return false
}

// SetInboundClientErrorBreached gets a reference to the given bool and assigns it to the InboundClientErrorBreached field.
func (o *EntityAssertionScoresDto) SetInboundClientErrorBreached(v bool) {
	o.InboundClientErrorBreached = &v
}

func (o EntityAssertionScoresDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntityAssertionScoresDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.TypeLabels) {
		toSerialize["typeLabels"] = o.TypeLabels
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.Metrics) {
		toSerialize["metrics"] = o.Metrics
	}
	if !IsNil(o.TotalScore) {
		toSerialize["totalScore"] = o.TotalScore
	}
	if !IsNil(o.SeverityWiseTotalScores) {
		toSerialize["severityWiseTotalScores"] = o.SeverityWiseTotalScores
	}
	if !IsNil(o.Percentage) {
		toSerialize["percentage"] = o.Percentage
	}
	if !IsNil(o.AssertionClusters) {
		toSerialize["assertionClusters"] = o.AssertionClusters
	}
	if !IsNil(o.InboundClientErrorBreached) {
		toSerialize["inboundClientErrorBreached"] = o.InboundClientErrorBreached
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EntityAssertionScoresDto) UnmarshalJSON(data []byte) (err error) {
	varEntityAssertionScoresDto := _EntityAssertionScoresDto{}

	err = json.Unmarshal(data, &varEntityAssertionScoresDto)

	if err != nil {
		return err
	}

	*o = EntityAssertionScoresDto(varEntityAssertionScoresDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "typeLabels")
		delete(additionalProperties, "scope")
		delete(additionalProperties, "metrics")
		delete(additionalProperties, "totalScore")
		delete(additionalProperties, "severityWiseTotalScores")
		delete(additionalProperties, "percentage")
		delete(additionalProperties, "assertionClusters")
		delete(additionalProperties, "inboundClientErrorBreached")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEntityAssertionScoresDto struct {
	value *EntityAssertionScoresDto
	isSet bool
}

func (v NullableEntityAssertionScoresDto) Get() *EntityAssertionScoresDto {
	return v.value
}

func (v *NullableEntityAssertionScoresDto) Set(val *EntityAssertionScoresDto) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityAssertionScoresDto) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityAssertionScoresDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityAssertionScoresDto(val *EntityAssertionScoresDto) *NullableEntityAssertionScoresDto {
	return &NullableEntityAssertionScoresDto{value: val, isSet: true}
}

func (v NullableEntityAssertionScoresDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityAssertionScoresDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
