/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-062139
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// CustomDashConfigControllerAPIService CustomDashConfigControllerAPI service
type CustomDashConfigControllerAPIService service

type ApiDeleteCustomDashConfigRequest struct {
	ctx                 context.Context
	ApiService          *CustomDashConfigControllerAPIService
	entityType          string
	customDashConfigDto *CustomDashConfigDto
	xScopeOrgID         *string
}

func (r ApiDeleteCustomDashConfigRequest) CustomDashConfigDto(customDashConfigDto CustomDashConfigDto) ApiDeleteCustomDashConfigRequest {
	r.customDashConfigDto = &customDashConfigDto
	return r
}

// Grafana Tenant/Stack ID
func (r ApiDeleteCustomDashConfigRequest) XScopeOrgID(xScopeOrgID string) ApiDeleteCustomDashConfigRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiDeleteCustomDashConfigRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCustomDashConfigExecute(r)
}

/*
DeleteCustomDashConfig Method for DeleteCustomDashConfig

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param entityType
	@return ApiDeleteCustomDashConfigRequest
*/
func (a *CustomDashConfigControllerAPIService) DeleteCustomDashConfig(ctx context.Context, entityType string) ApiDeleteCustomDashConfigRequest {
	return ApiDeleteCustomDashConfigRequest{
		ApiService: a,
		ctx:        ctx,
		entityType: entityType,
	}
}

// Execute executes the request
func (a *CustomDashConfigControllerAPIService) DeleteCustomDashConfigExecute(r ApiDeleteCustomDashConfigRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomDashConfigControllerAPIService.DeleteCustomDashConfig")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config/dashboard/delete/{entity_type}"
	localVarPath = strings.Replace(localVarPath, "{"+"entity_type"+"}", url.PathEscape(parameterValueToString(r.entityType, "entityType")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.customDashConfigDto == nil {
		return nil, reportError("customDashConfigDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	// body params
	localVarPostBody = r.customDashConfigDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAllCustomDashConfigRequest struct {
	ctx         context.Context
	ApiService  *CustomDashConfigControllerAPIService
	xScopeOrgID *string
}

// Grafana Tenant/Stack ID
func (r ApiGetAllCustomDashConfigRequest) XScopeOrgID(xScopeOrgID string) ApiGetAllCustomDashConfigRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiGetAllCustomDashConfigRequest) Execute() (*CustomKpiDashConfigDto, *http.Response, error) {
	return r.ApiService.GetAllCustomDashConfigExecute(r)
}

/*
GetAllCustomDashConfig Method for GetAllCustomDashConfig

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetAllCustomDashConfigRequest
*/
func (a *CustomDashConfigControllerAPIService) GetAllCustomDashConfig(ctx context.Context) ApiGetAllCustomDashConfigRequest {
	return ApiGetAllCustomDashConfigRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CustomKpiDashConfigDto
func (a *CustomDashConfigControllerAPIService) GetAllCustomDashConfigExecute(r ApiGetAllCustomDashConfigRequest) (*CustomKpiDashConfigDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CustomKpiDashConfigDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomDashConfigControllerAPIService.GetAllCustomDashConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config/dashboard"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCustomDashConfigRequest struct {
	ctx         context.Context
	ApiService  *CustomDashConfigControllerAPIService
	entityType  string
	xScopeOrgID *string
}

// Grafana Tenant/Stack ID
func (r ApiGetCustomDashConfigRequest) XScopeOrgID(xScopeOrgID string) ApiGetCustomDashConfigRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiGetCustomDashConfigRequest) Execute() (*CustomDashConfigsDto, *http.Response, error) {
	return r.ApiService.GetCustomDashConfigExecute(r)
}

/*
GetCustomDashConfig Method for GetCustomDashConfig

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param entityType
	@return ApiGetCustomDashConfigRequest
*/
func (a *CustomDashConfigControllerAPIService) GetCustomDashConfig(ctx context.Context, entityType string) ApiGetCustomDashConfigRequest {
	return ApiGetCustomDashConfigRequest{
		ApiService: a,
		ctx:        ctx,
		entityType: entityType,
	}
}

// Execute executes the request
//
//	@return CustomDashConfigsDto
func (a *CustomDashConfigControllerAPIService) GetCustomDashConfigExecute(r ApiGetCustomDashConfigRequest) (*CustomDashConfigsDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CustomDashConfigsDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomDashConfigControllerAPIService.GetCustomDashConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config/dashboard/{entity_type}"
	localVarPath = strings.Replace(localVarPath, "{"+"entity_type"+"}", url.PathEscape(parameterValueToString(r.entityType, "entityType")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateCustomDashConfigRequest struct {
	ctx                 context.Context
	ApiService          *CustomDashConfigControllerAPIService
	entityType          string
	customDashConfigDto *CustomDashConfigDto
	xScopeOrgID         *string
}

func (r ApiUpdateCustomDashConfigRequest) CustomDashConfigDto(customDashConfigDto CustomDashConfigDto) ApiUpdateCustomDashConfigRequest {
	r.customDashConfigDto = &customDashConfigDto
	return r
}

// Grafana Tenant/Stack ID
func (r ApiUpdateCustomDashConfigRequest) XScopeOrgID(xScopeOrgID string) ApiUpdateCustomDashConfigRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiUpdateCustomDashConfigRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateCustomDashConfigExecute(r)
}

/*
UpdateCustomDashConfig Method for UpdateCustomDashConfig

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param entityType
	@return ApiUpdateCustomDashConfigRequest
*/
func (a *CustomDashConfigControllerAPIService) UpdateCustomDashConfig(ctx context.Context, entityType string) ApiUpdateCustomDashConfigRequest {
	return ApiUpdateCustomDashConfigRequest{
		ApiService: a,
		ctx:        ctx,
		entityType: entityType,
	}
}

// Execute executes the request
func (a *CustomDashConfigControllerAPIService) UpdateCustomDashConfigExecute(r ApiUpdateCustomDashConfigRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomDashConfigControllerAPIService.UpdateCustomDashConfig")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config/dashboard/{entity_type}"
	localVarPath = strings.Replace(localVarPath, "{"+"entity_type"+"}", url.PathEscape(parameterValueToString(r.entityType, "entityType")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.customDashConfigDto == nil {
		return nil, reportError("customDashConfigDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	// body params
	localVarPostBody = r.customDashConfigDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
