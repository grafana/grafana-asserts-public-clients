/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-084942
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the AMReceiverPushOver type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AMReceiverPushOver{}

// AMReceiverPushOver struct for AMReceiverPushOver
type AMReceiverPushOver struct {
	Token                *string           `json:"token,omitempty"`
	Title                *string           `json:"title,omitempty"`
	Message              *string           `json:"message,omitempty"`
	Url                  *string           `json:"url,omitempty"`
	Priority             *string           `json:"priority,omitempty"`
	Retry                *string           `json:"retry,omitempty"`
	Expire               *string           `json:"expire,omitempty"`
	SendResolved         *bool             `json:"send_resolved,omitempty"`
	UserKey              *string           `json:"user_key,omitempty"`
	HttpConfig           *AlertManagerHttp `json:"http_config,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AMReceiverPushOver AMReceiverPushOver

// NewAMReceiverPushOver instantiates a new AMReceiverPushOver object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAMReceiverPushOver() *AMReceiverPushOver {
	this := AMReceiverPushOver{}
	return &this
}

// NewAMReceiverPushOverWithDefaults instantiates a new AMReceiverPushOver object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAMReceiverPushOverWithDefaults() *AMReceiverPushOver {
	this := AMReceiverPushOver{}
	return &this
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *AMReceiverPushOver) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverPushOver) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *AMReceiverPushOver) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *AMReceiverPushOver) SetToken(v string) {
	o.Token = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *AMReceiverPushOver) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverPushOver) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *AMReceiverPushOver) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *AMReceiverPushOver) SetTitle(v string) {
	o.Title = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *AMReceiverPushOver) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverPushOver) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *AMReceiverPushOver) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *AMReceiverPushOver) SetMessage(v string) {
	o.Message = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *AMReceiverPushOver) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverPushOver) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *AMReceiverPushOver) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *AMReceiverPushOver) SetUrl(v string) {
	o.Url = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *AMReceiverPushOver) GetPriority() string {
	if o == nil || IsNil(o.Priority) {
		var ret string
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverPushOver) GetPriorityOk() (*string, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *AMReceiverPushOver) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given string and assigns it to the Priority field.
func (o *AMReceiverPushOver) SetPriority(v string) {
	o.Priority = &v
}

// GetRetry returns the Retry field value if set, zero value otherwise.
func (o *AMReceiverPushOver) GetRetry() string {
	if o == nil || IsNil(o.Retry) {
		var ret string
		return ret
	}
	return *o.Retry
}

// GetRetryOk returns a tuple with the Retry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverPushOver) GetRetryOk() (*string, bool) {
	if o == nil || IsNil(o.Retry) {
		return nil, false
	}
	return o.Retry, true
}

// HasRetry returns a boolean if a field has been set.
func (o *AMReceiverPushOver) HasRetry() bool {
	if o != nil && !IsNil(o.Retry) {
		return true
	}

	return false
}

// SetRetry gets a reference to the given string and assigns it to the Retry field.
func (o *AMReceiverPushOver) SetRetry(v string) {
	o.Retry = &v
}

// GetExpire returns the Expire field value if set, zero value otherwise.
func (o *AMReceiverPushOver) GetExpire() string {
	if o == nil || IsNil(o.Expire) {
		var ret string
		return ret
	}
	return *o.Expire
}

// GetExpireOk returns a tuple with the Expire field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverPushOver) GetExpireOk() (*string, bool) {
	if o == nil || IsNil(o.Expire) {
		return nil, false
	}
	return o.Expire, true
}

// HasExpire returns a boolean if a field has been set.
func (o *AMReceiverPushOver) HasExpire() bool {
	if o != nil && !IsNil(o.Expire) {
		return true
	}

	return false
}

// SetExpire gets a reference to the given string and assigns it to the Expire field.
func (o *AMReceiverPushOver) SetExpire(v string) {
	o.Expire = &v
}

// GetSendResolved returns the SendResolved field value if set, zero value otherwise.
func (o *AMReceiverPushOver) GetSendResolved() bool {
	if o == nil || IsNil(o.SendResolved) {
		var ret bool
		return ret
	}
	return *o.SendResolved
}

// GetSendResolvedOk returns a tuple with the SendResolved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverPushOver) GetSendResolvedOk() (*bool, bool) {
	if o == nil || IsNil(o.SendResolved) {
		return nil, false
	}
	return o.SendResolved, true
}

// HasSendResolved returns a boolean if a field has been set.
func (o *AMReceiverPushOver) HasSendResolved() bool {
	if o != nil && !IsNil(o.SendResolved) {
		return true
	}

	return false
}

// SetSendResolved gets a reference to the given bool and assigns it to the SendResolved field.
func (o *AMReceiverPushOver) SetSendResolved(v bool) {
	o.SendResolved = &v
}

// GetUserKey returns the UserKey field value if set, zero value otherwise.
func (o *AMReceiverPushOver) GetUserKey() string {
	if o == nil || IsNil(o.UserKey) {
		var ret string
		return ret
	}
	return *o.UserKey
}

// GetUserKeyOk returns a tuple with the UserKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverPushOver) GetUserKeyOk() (*string, bool) {
	if o == nil || IsNil(o.UserKey) {
		return nil, false
	}
	return o.UserKey, true
}

// HasUserKey returns a boolean if a field has been set.
func (o *AMReceiverPushOver) HasUserKey() bool {
	if o != nil && !IsNil(o.UserKey) {
		return true
	}

	return false
}

// SetUserKey gets a reference to the given string and assigns it to the UserKey field.
func (o *AMReceiverPushOver) SetUserKey(v string) {
	o.UserKey = &v
}

// GetHttpConfig returns the HttpConfig field value if set, zero value otherwise.
func (o *AMReceiverPushOver) GetHttpConfig() AlertManagerHttp {
	if o == nil || IsNil(o.HttpConfig) {
		var ret AlertManagerHttp
		return ret
	}
	return *o.HttpConfig
}

// GetHttpConfigOk returns a tuple with the HttpConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AMReceiverPushOver) GetHttpConfigOk() (*AlertManagerHttp, bool) {
	if o == nil || IsNil(o.HttpConfig) {
		return nil, false
	}
	return o.HttpConfig, true
}

// HasHttpConfig returns a boolean if a field has been set.
func (o *AMReceiverPushOver) HasHttpConfig() bool {
	if o != nil && !IsNil(o.HttpConfig) {
		return true
	}

	return false
}

// SetHttpConfig gets a reference to the given AlertManagerHttp and assigns it to the HttpConfig field.
func (o *AMReceiverPushOver) SetHttpConfig(v AlertManagerHttp) {
	o.HttpConfig = &v
}

func (o AMReceiverPushOver) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AMReceiverPushOver) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.Retry) {
		toSerialize["retry"] = o.Retry
	}
	if !IsNil(o.Expire) {
		toSerialize["expire"] = o.Expire
	}
	if !IsNil(o.SendResolved) {
		toSerialize["send_resolved"] = o.SendResolved
	}
	if !IsNil(o.UserKey) {
		toSerialize["user_key"] = o.UserKey
	}
	if !IsNil(o.HttpConfig) {
		toSerialize["http_config"] = o.HttpConfig
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AMReceiverPushOver) UnmarshalJSON(data []byte) (err error) {
	varAMReceiverPushOver := _AMReceiverPushOver{}

	err = json.Unmarshal(data, &varAMReceiverPushOver)

	if err != nil {
		return err
	}

	*o = AMReceiverPushOver(varAMReceiverPushOver)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "token")
		delete(additionalProperties, "title")
		delete(additionalProperties, "message")
		delete(additionalProperties, "url")
		delete(additionalProperties, "priority")
		delete(additionalProperties, "retry")
		delete(additionalProperties, "expire")
		delete(additionalProperties, "send_resolved")
		delete(additionalProperties, "user_key")
		delete(additionalProperties, "http_config")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAMReceiverPushOver struct {
	value *AMReceiverPushOver
	isSet bool
}

func (v NullableAMReceiverPushOver) Get() *AMReceiverPushOver {
	return v.value
}

func (v *NullableAMReceiverPushOver) Set(val *AMReceiverPushOver) {
	v.value = val
	v.isSet = true
}

func (v NullableAMReceiverPushOver) IsSet() bool {
	return v.isSet
}

func (v *NullableAMReceiverPushOver) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAMReceiverPushOver(val *AMReceiverPushOver) *NullableAMReceiverPushOver {
	return &NullableAMReceiverPushOver{value: val, isSet: true}
}

func (v NullableAMReceiverPushOver) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAMReceiverPushOver) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
