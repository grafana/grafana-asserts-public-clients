/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-062139
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the KGEntityKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KGEntityKey{}

// KGEntityKey struct for KGEntityKey
type KGEntityKey struct {
	Type                 *string  `json:"type,omitempty"`
	Name                 *string  `json:"name,omitempty"`
	KgScope              *KGScope `json:"kgScope,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _KGEntityKey KGEntityKey

// NewKGEntityKey instantiates a new KGEntityKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKGEntityKey() *KGEntityKey {
	this := KGEntityKey{}
	return &this
}

// NewKGEntityKeyWithDefaults instantiates a new KGEntityKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKGEntityKeyWithDefaults() *KGEntityKey {
	this := KGEntityKey{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *KGEntityKey) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KGEntityKey) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *KGEntityKey) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *KGEntityKey) SetType(v string) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *KGEntityKey) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KGEntityKey) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *KGEntityKey) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *KGEntityKey) SetName(v string) {
	o.Name = &v
}

// GetKgScope returns the KgScope field value if set, zero value otherwise.
func (o *KGEntityKey) GetKgScope() KGScope {
	if o == nil || IsNil(o.KgScope) {
		var ret KGScope
		return ret
	}
	return *o.KgScope
}

// GetKgScopeOk returns a tuple with the KgScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KGEntityKey) GetKgScopeOk() (*KGScope, bool) {
	if o == nil || IsNil(o.KgScope) {
		return nil, false
	}
	return o.KgScope, true
}

// HasKgScope returns a boolean if a field has been set.
func (o *KGEntityKey) HasKgScope() bool {
	if o != nil && !IsNil(o.KgScope) {
		return true
	}

	return false
}

// SetKgScope gets a reference to the given KGScope and assigns it to the KgScope field.
func (o *KGEntityKey) SetKgScope(v KGScope) {
	o.KgScope = &v
}

func (o KGEntityKey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KGEntityKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.KgScope) {
		toSerialize["kgScope"] = o.KgScope
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KGEntityKey) UnmarshalJSON(data []byte) (err error) {
	varKGEntityKey := _KGEntityKey{}

	err = json.Unmarshal(data, &varKGEntityKey)

	if err != nil {
		return err
	}

	*o = KGEntityKey(varKGEntityKey)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "kgScope")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKGEntityKey struct {
	value *KGEntityKey
	isSet bool
}

func (v NullableKGEntityKey) Get() *KGEntityKey {
	return v.value
}

func (v *NullableKGEntityKey) Set(val *KGEntityKey) {
	v.value = val
	v.isSet = true
}

func (v NullableKGEntityKey) IsSet() bool {
	return v.isSet
}

func (v *NullableKGEntityKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKGEntityKey(val *KGEntityKey) *NullableKGEntityKey {
	return &NullableKGEntityKey{value: val, isSet: true}
}

func (v NullableKGEntityKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKGEntityKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
