/*
Asserts, Inc

Asserts Public API

API version: 2025.08.25-143624
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the ThresholdDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThresholdDto{}

// ThresholdDto struct for ThresholdDto
type ThresholdDto struct {
	Name                 *string           `json:"name,omitempty"`
	Labels               map[string]string `json:"labels,omitempty"`
	Type                 string            `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _ThresholdDto ThresholdDto

// NewThresholdDto instantiates a new ThresholdDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThresholdDto(type_ string) *ThresholdDto {
	this := ThresholdDto{}
	this.Type = type_
	return &this
}

// NewThresholdDtoWithDefaults instantiates a new ThresholdDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThresholdDtoWithDefaults() *ThresholdDto {
	this := ThresholdDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ThresholdDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThresholdDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ThresholdDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ThresholdDto) SetName(v string) {
	o.Name = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *ThresholdDto) GetLabels() map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThresholdDto) GetLabelsOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return map[string]string{}, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *ThresholdDto) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *ThresholdDto) SetLabels(v map[string]string) {
	o.Labels = v
}

// GetType returns the Type field value
func (o *ThresholdDto) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ThresholdDto) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ThresholdDto) SetType(v string) {
	o.Type = v
}

func (o ThresholdDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThresholdDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ThresholdDto) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varThresholdDto := _ThresholdDto{}

	err = json.Unmarshal(data, &varThresholdDto)

	if err != nil {
		return err
	}

	*o = ThresholdDto(varThresholdDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "labels")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableThresholdDto struct {
	value *ThresholdDto
	isSet bool
}

func (v NullableThresholdDto) Get() *ThresholdDto {
	return v.value
}

func (v *NullableThresholdDto) Set(val *ThresholdDto) {
	v.value = val
	v.isSet = true
}

func (v NullableThresholdDto) IsSet() bool {
	return v.isSet
}

func (v *NullableThresholdDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThresholdDto(val *ThresholdDto) *NullableThresholdDto {
	return &NullableThresholdDto{value: val, isSet: true}
}

func (v NullableThresholdDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThresholdDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
