/*
Asserts, Inc

Asserts Public API

API version: 2025.09.11-132913
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the KpiGroupDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KpiGroupDto{}

// KpiGroupDto struct for KpiGroupDto
type KpiGroupDto struct {
	Name                 *string      `json:"name,omitempty"`
	Kpis                 []KpiNameDto `json:"kpis,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _KpiGroupDto KpiGroupDto

// NewKpiGroupDto instantiates a new KpiGroupDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKpiGroupDto() *KpiGroupDto {
	this := KpiGroupDto{}
	return &this
}

// NewKpiGroupDtoWithDefaults instantiates a new KpiGroupDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKpiGroupDtoWithDefaults() *KpiGroupDto {
	this := KpiGroupDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *KpiGroupDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KpiGroupDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *KpiGroupDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *KpiGroupDto) SetName(v string) {
	o.Name = &v
}

// GetKpis returns the Kpis field value if set, zero value otherwise.
func (o *KpiGroupDto) GetKpis() []KpiNameDto {
	if o == nil || IsNil(o.Kpis) {
		var ret []KpiNameDto
		return ret
	}
	return o.Kpis
}

// GetKpisOk returns a tuple with the Kpis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KpiGroupDto) GetKpisOk() ([]KpiNameDto, bool) {
	if o == nil || IsNil(o.Kpis) {
		return nil, false
	}
	return o.Kpis, true
}

// HasKpis returns a boolean if a field has been set.
func (o *KpiGroupDto) HasKpis() bool {
	if o != nil && !IsNil(o.Kpis) {
		return true
	}

	return false
}

// SetKpis gets a reference to the given []KpiNameDto and assigns it to the Kpis field.
func (o *KpiGroupDto) SetKpis(v []KpiNameDto) {
	o.Kpis = v
}

func (o KpiGroupDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KpiGroupDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Kpis) {
		toSerialize["kpis"] = o.Kpis
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KpiGroupDto) UnmarshalJSON(data []byte) (err error) {
	varKpiGroupDto := _KpiGroupDto{}

	err = json.Unmarshal(data, &varKpiGroupDto)

	if err != nil {
		return err
	}

	*o = KpiGroupDto(varKpiGroupDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "kpis")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKpiGroupDto struct {
	value *KpiGroupDto
	isSet bool
}

func (v NullableKpiGroupDto) Get() *KpiGroupDto {
	return v.value
}

func (v *NullableKpiGroupDto) Set(val *KpiGroupDto) {
	v.value = val
	v.isSet = true
}

func (v NullableKpiGroupDto) IsSet() bool {
	return v.isSet
}

func (v *NullableKpiGroupDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKpiGroupDto(val *KpiGroupDto) *NullableKpiGroupDto {
	return &NullableKpiGroupDto{value: val, isSet: true}
}

func (v NullableKpiGroupDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKpiGroupDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
