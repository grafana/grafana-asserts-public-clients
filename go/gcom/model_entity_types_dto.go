/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-161538
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the EntityTypesDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntityTypesDto{}

// EntityTypesDto struct for EntityTypesDto
type EntityTypesDto struct {
	Entities             []EntityTypeDto `json:"entities,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EntityTypesDto EntityTypesDto

// NewEntityTypesDto instantiates a new EntityTypesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityTypesDto() *EntityTypesDto {
	this := EntityTypesDto{}
	return &this
}

// NewEntityTypesDtoWithDefaults instantiates a new EntityTypesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityTypesDtoWithDefaults() *EntityTypesDto {
	this := EntityTypesDto{}
	return &this
}

// GetEntities returns the Entities field value if set, zero value otherwise.
func (o *EntityTypesDto) GetEntities() []EntityTypeDto {
	if o == nil || IsNil(o.Entities) {
		var ret []EntityTypeDto
		return ret
	}
	return o.Entities
}

// GetEntitiesOk returns a tuple with the Entities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityTypesDto) GetEntitiesOk() ([]EntityTypeDto, bool) {
	if o == nil || IsNil(o.Entities) {
		return nil, false
	}
	return o.Entities, true
}

// HasEntities returns a boolean if a field has been set.
func (o *EntityTypesDto) HasEntities() bool {
	if o != nil && !IsNil(o.Entities) {
		return true
	}

	return false
}

// SetEntities gets a reference to the given []EntityTypeDto and assigns it to the Entities field.
func (o *EntityTypesDto) SetEntities(v []EntityTypeDto) {
	o.Entities = v
}

func (o EntityTypesDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntityTypesDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Entities) {
		toSerialize["entities"] = o.Entities
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EntityTypesDto) UnmarshalJSON(data []byte) (err error) {
	varEntityTypesDto := _EntityTypesDto{}

	err = json.Unmarshal(data, &varEntityTypesDto)

	if err != nil {
		return err
	}

	*o = EntityTypesDto(varEntityTypesDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "entities")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEntityTypesDto struct {
	value *EntityTypesDto
	isSet bool
}

func (v NullableEntityTypesDto) Get() *EntityTypesDto {
	return v.value
}

func (v *NullableEntityTypesDto) Set(val *EntityTypesDto) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityTypesDto) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityTypesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityTypesDto(val *EntityTypesDto) *NullableEntityTypesDto {
	return &NullableEntityTypesDto{value: val, isSet: true}
}

func (v NullableEntityTypesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityTypesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
