/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-062139
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// DisabledAlertConfigControllerAPIService DisabledAlertConfigControllerAPI service
type DisabledAlertConfigControllerAPIService service

type ApiDeleteDisabledAlertConfigRequest struct {
	ctx         context.Context
	ApiService  *DisabledAlertConfigControllerAPIService
	name        string
	xScopeOrgID *string
}

// Grafana Tenant/Stack ID
func (r ApiDeleteDisabledAlertConfigRequest) XScopeOrgID(xScopeOrgID string) ApiDeleteDisabledAlertConfigRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiDeleteDisabledAlertConfigRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteDisabledAlertConfigExecute(r)
}

/*
DeleteDisabledAlertConfig Method for DeleteDisabledAlertConfig

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name
	@return ApiDeleteDisabledAlertConfigRequest
*/
func (a *DisabledAlertConfigControllerAPIService) DeleteDisabledAlertConfig(ctx context.Context, name string) ApiDeleteDisabledAlertConfigRequest {
	return ApiDeleteDisabledAlertConfigRequest{
		ApiService: a,
		ctx:        ctx,
		name:       name,
	}
}

// Execute executes the request
func (a *DisabledAlertConfigControllerAPIService) DeleteDisabledAlertConfigExecute(r ApiDeleteDisabledAlertConfigRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DisabledAlertConfigControllerAPIService.DeleteDisabledAlertConfig")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config/disabled-alert/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAllDisabledAlertConfigsRequest struct {
	ctx         context.Context
	ApiService  *DisabledAlertConfigControllerAPIService
	xScopeOrgID *string
}

// Grafana Tenant/Stack ID
func (r ApiGetAllDisabledAlertConfigsRequest) XScopeOrgID(xScopeOrgID string) ApiGetAllDisabledAlertConfigsRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiGetAllDisabledAlertConfigsRequest) Execute() (*DisabledAlertConfigsDto, *http.Response, error) {
	return r.ApiService.GetAllDisabledAlertConfigsExecute(r)
}

/*
GetAllDisabledAlertConfigs Method for GetAllDisabledAlertConfigs

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetAllDisabledAlertConfigsRequest
*/
func (a *DisabledAlertConfigControllerAPIService) GetAllDisabledAlertConfigs(ctx context.Context) ApiGetAllDisabledAlertConfigsRequest {
	return ApiGetAllDisabledAlertConfigsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DisabledAlertConfigsDto
func (a *DisabledAlertConfigControllerAPIService) GetAllDisabledAlertConfigsExecute(r ApiGetAllDisabledAlertConfigsRequest) (*DisabledAlertConfigsDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DisabledAlertConfigsDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DisabledAlertConfigControllerAPIService.GetAllDisabledAlertConfigs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config/disabled-alerts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/x-yml", "application/x-yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDisabledHealthAlertConfigsRequest struct {
	ctx         context.Context
	ApiService  *DisabledAlertConfigControllerAPIService
	xScopeOrgID *string
}

// Grafana Tenant/Stack ID
func (r ApiGetDisabledHealthAlertConfigsRequest) XScopeOrgID(xScopeOrgID string) ApiGetDisabledHealthAlertConfigsRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiGetDisabledHealthAlertConfigsRequest) Execute() (*DisabledAlertConfigsDto, *http.Response, error) {
	return r.ApiService.GetDisabledHealthAlertConfigsExecute(r)
}

/*
GetDisabledHealthAlertConfigs Method for GetDisabledHealthAlertConfigs

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetDisabledHealthAlertConfigsRequest
*/
func (a *DisabledAlertConfigControllerAPIService) GetDisabledHealthAlertConfigs(ctx context.Context) ApiGetDisabledHealthAlertConfigsRequest {
	return ApiGetDisabledHealthAlertConfigsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DisabledAlertConfigsDto
func (a *DisabledAlertConfigControllerAPIService) GetDisabledHealthAlertConfigsExecute(r ApiGetDisabledHealthAlertConfigsRequest) (*DisabledAlertConfigsDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DisabledAlertConfigsDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DisabledAlertConfigControllerAPIService.GetDisabledHealthAlertConfigs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config/disabled-alerts/health"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDisabledRequestAlertConfigsRequest struct {
	ctx         context.Context
	ApiService  *DisabledAlertConfigControllerAPIService
	xScopeOrgID *string
}

// Grafana Tenant/Stack ID
func (r ApiGetDisabledRequestAlertConfigsRequest) XScopeOrgID(xScopeOrgID string) ApiGetDisabledRequestAlertConfigsRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiGetDisabledRequestAlertConfigsRequest) Execute() (*DisabledAlertConfigsDto, *http.Response, error) {
	return r.ApiService.GetDisabledRequestAlertConfigsExecute(r)
}

/*
GetDisabledRequestAlertConfigs Method for GetDisabledRequestAlertConfigs

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetDisabledRequestAlertConfigsRequest
*/
func (a *DisabledAlertConfigControllerAPIService) GetDisabledRequestAlertConfigs(ctx context.Context) ApiGetDisabledRequestAlertConfigsRequest {
	return ApiGetDisabledRequestAlertConfigsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DisabledAlertConfigsDto
func (a *DisabledAlertConfigControllerAPIService) GetDisabledRequestAlertConfigsExecute(r ApiGetDisabledRequestAlertConfigsRequest) (*DisabledAlertConfigsDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DisabledAlertConfigsDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DisabledAlertConfigControllerAPIService.GetDisabledRequestAlertConfigs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config/disabled-alerts/request"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDisabledResourceAlertConfigsRequest struct {
	ctx         context.Context
	ApiService  *DisabledAlertConfigControllerAPIService
	xScopeOrgID *string
}

// Grafana Tenant/Stack ID
func (r ApiGetDisabledResourceAlertConfigsRequest) XScopeOrgID(xScopeOrgID string) ApiGetDisabledResourceAlertConfigsRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiGetDisabledResourceAlertConfigsRequest) Execute() (*DisabledAlertConfigsDto, *http.Response, error) {
	return r.ApiService.GetDisabledResourceAlertConfigsExecute(r)
}

/*
GetDisabledResourceAlertConfigs Method for GetDisabledResourceAlertConfigs

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetDisabledResourceAlertConfigsRequest
*/
func (a *DisabledAlertConfigControllerAPIService) GetDisabledResourceAlertConfigs(ctx context.Context) ApiGetDisabledResourceAlertConfigsRequest {
	return ApiGetDisabledResourceAlertConfigsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DisabledAlertConfigsDto
func (a *DisabledAlertConfigControllerAPIService) GetDisabledResourceAlertConfigsExecute(r ApiGetDisabledResourceAlertConfigsRequest) (*DisabledAlertConfigsDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DisabledAlertConfigsDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DisabledAlertConfigControllerAPIService.GetDisabledResourceAlertConfigs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config/disabled-alerts/resource"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutDisabledAlertConfigRequest struct {
	ctx                    context.Context
	ApiService             *DisabledAlertConfigControllerAPIService
	disabledAlertConfigDto *DisabledAlertConfigDto
	xScopeOrgID            *string
}

func (r ApiPutDisabledAlertConfigRequest) DisabledAlertConfigDto(disabledAlertConfigDto DisabledAlertConfigDto) ApiPutDisabledAlertConfigRequest {
	r.disabledAlertConfigDto = &disabledAlertConfigDto
	return r
}

// Grafana Tenant/Stack ID
func (r ApiPutDisabledAlertConfigRequest) XScopeOrgID(xScopeOrgID string) ApiPutDisabledAlertConfigRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiPutDisabledAlertConfigRequest) Execute() (*http.Response, error) {
	return r.ApiService.PutDisabledAlertConfigExecute(r)
}

/*
PutDisabledAlertConfig Method for PutDisabledAlertConfig

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPutDisabledAlertConfigRequest
*/
func (a *DisabledAlertConfigControllerAPIService) PutDisabledAlertConfig(ctx context.Context) ApiPutDisabledAlertConfigRequest {
	return ApiPutDisabledAlertConfigRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DisabledAlertConfigControllerAPIService) PutDisabledAlertConfigExecute(r ApiPutDisabledAlertConfigRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DisabledAlertConfigControllerAPIService.PutDisabledAlertConfig")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config/disabled-alert"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.disabledAlertConfigDto == nil {
		return nil, reportError("disabledAlertConfigDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-yml", "application/x-yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	// body params
	localVarPostBody = r.disabledAlertConfigDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPutDisabledAlertConfigsRequest struct {
	ctx                     context.Context
	ApiService              *DisabledAlertConfigControllerAPIService
	disabledAlertConfigsDto *DisabledAlertConfigsDto
	xScopeOrgID             *string
}

func (r ApiPutDisabledAlertConfigsRequest) DisabledAlertConfigsDto(disabledAlertConfigsDto DisabledAlertConfigsDto) ApiPutDisabledAlertConfigsRequest {
	r.disabledAlertConfigsDto = &disabledAlertConfigsDto
	return r
}

// Grafana Tenant/Stack ID
func (r ApiPutDisabledAlertConfigsRequest) XScopeOrgID(xScopeOrgID string) ApiPutDisabledAlertConfigsRequest {
	r.xScopeOrgID = &xScopeOrgID
	return r
}

func (r ApiPutDisabledAlertConfigsRequest) Execute() (*http.Response, error) {
	return r.ApiService.PutDisabledAlertConfigsExecute(r)
}

/*
PutDisabledAlertConfigs Method for PutDisabledAlertConfigs

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPutDisabledAlertConfigsRequest
*/
func (a *DisabledAlertConfigControllerAPIService) PutDisabledAlertConfigs(ctx context.Context) ApiPutDisabledAlertConfigsRequest {
	return ApiPutDisabledAlertConfigsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DisabledAlertConfigControllerAPIService) PutDisabledAlertConfigsExecute(r ApiPutDisabledAlertConfigsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DisabledAlertConfigControllerAPIService.PutDisabledAlertConfigs")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config/disabled-alerts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.disabledAlertConfigsDto == nil {
		return nil, reportError("disabledAlertConfigsDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-yml", "application/x-yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xScopeOrgID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Scope-OrgID", r.xScopeOrgID, "")
	}
	// body params
	localVarPostBody = r.disabledAlertConfigsDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
