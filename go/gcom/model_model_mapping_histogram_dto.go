/*
Asserts, Inc

Asserts Public API

API version: 1.0.0
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
	"reflect"
	"strings"
)

// checks if the ModelMappingHistogramDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelMappingHistogramDto{}

// ModelMappingHistogramDto struct for ModelMappingHistogramDto
type ModelMappingHistogramDto struct {
	ModelMappingSignalDto
	MetricName           string                                 `json:"metricName"`
	MetricUnit           *string                                `json:"metricUnit,omitempty" validate:"regexp=((milli|micro|)seconds)|((m|μ|)s)"`
	Quantiles            []float64                              `json:"quantiles,omitempty"`
	Errors               []ModelMappingRequestErrorConditionDto `json:"errors,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ModelMappingHistogramDto ModelMappingHistogramDto

// NewModelMappingHistogramDto instantiates a new ModelMappingHistogramDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelMappingHistogramDto(metricName string, entityNameLabel string, metricSource string, requestType string, kind string) *ModelMappingHistogramDto {
	this := ModelMappingHistogramDto{}
	this.EntityNameLabel = entityNameLabel
	this.MetricSource = metricSource
	this.RequestType = requestType
	this.Kind = kind
	this.MetricName = metricName
	return &this
}

// NewModelMappingHistogramDtoWithDefaults instantiates a new ModelMappingHistogramDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelMappingHistogramDtoWithDefaults() *ModelMappingHistogramDto {
	this := ModelMappingHistogramDto{}
	return &this
}

// GetMetricName returns the MetricName field value
func (o *ModelMappingHistogramDto) GetMetricName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetricName
}

// GetMetricNameOk returns a tuple with the MetricName field value
// and a boolean to check if the value has been set.
func (o *ModelMappingHistogramDto) GetMetricNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetricName, true
}

// SetMetricName sets field value
func (o *ModelMappingHistogramDto) SetMetricName(v string) {
	o.MetricName = v
}

// GetMetricUnit returns the MetricUnit field value if set, zero value otherwise.
func (o *ModelMappingHistogramDto) GetMetricUnit() string {
	if o == nil || IsNil(o.MetricUnit) {
		var ret string
		return ret
	}
	return *o.MetricUnit
}

// GetMetricUnitOk returns a tuple with the MetricUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMappingHistogramDto) GetMetricUnitOk() (*string, bool) {
	if o == nil || IsNil(o.MetricUnit) {
		return nil, false
	}
	return o.MetricUnit, true
}

// HasMetricUnit returns a boolean if a field has been set.
func (o *ModelMappingHistogramDto) HasMetricUnit() bool {
	if o != nil && !IsNil(o.MetricUnit) {
		return true
	}

	return false
}

// SetMetricUnit gets a reference to the given string and assigns it to the MetricUnit field.
func (o *ModelMappingHistogramDto) SetMetricUnit(v string) {
	o.MetricUnit = &v
}

// GetQuantiles returns the Quantiles field value if set, zero value otherwise.
func (o *ModelMappingHistogramDto) GetQuantiles() []float64 {
	if o == nil || IsNil(o.Quantiles) {
		var ret []float64
		return ret
	}
	return o.Quantiles
}

// GetQuantilesOk returns a tuple with the Quantiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMappingHistogramDto) GetQuantilesOk() ([]float64, bool) {
	if o == nil || IsNil(o.Quantiles) {
		return nil, false
	}
	return o.Quantiles, true
}

// HasQuantiles returns a boolean if a field has been set.
func (o *ModelMappingHistogramDto) HasQuantiles() bool {
	if o != nil && !IsNil(o.Quantiles) {
		return true
	}

	return false
}

// SetQuantiles gets a reference to the given []float64 and assigns it to the Quantiles field.
func (o *ModelMappingHistogramDto) SetQuantiles(v []float64) {
	o.Quantiles = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *ModelMappingHistogramDto) GetErrors() []ModelMappingRequestErrorConditionDto {
	if o == nil || IsNil(o.Errors) {
		var ret []ModelMappingRequestErrorConditionDto
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMappingHistogramDto) GetErrorsOk() ([]ModelMappingRequestErrorConditionDto, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *ModelMappingHistogramDto) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []ModelMappingRequestErrorConditionDto and assigns it to the Errors field.
func (o *ModelMappingHistogramDto) SetErrors(v []ModelMappingRequestErrorConditionDto) {
	o.Errors = v
}

func (o ModelMappingHistogramDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelMappingHistogramDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedModelMappingSignalDto, errModelMappingSignalDto := json.Marshal(o.ModelMappingSignalDto)
	if errModelMappingSignalDto != nil {
		return map[string]interface{}{}, errModelMappingSignalDto
	}
	errModelMappingSignalDto = json.Unmarshal([]byte(serializedModelMappingSignalDto), &toSerialize)
	if errModelMappingSignalDto != nil {
		return map[string]interface{}{}, errModelMappingSignalDto
	}
	toSerialize["metricName"] = o.MetricName
	if !IsNil(o.MetricUnit) {
		toSerialize["metricUnit"] = o.MetricUnit
	}
	if !IsNil(o.Quantiles) {
		toSerialize["quantiles"] = o.Quantiles
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelMappingHistogramDto) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	type ModelMappingHistogramDtoWithoutEmbeddedStruct struct {
		MetricName string                                 `json:"metricName"`
		MetricUnit *string                                `json:"metricUnit,omitempty" validate:"regexp=((milli|micro|)seconds)|((m|μ|)s)"`
		Quantiles  []float64                              `json:"quantiles,omitempty"`
		Errors     []ModelMappingRequestErrorConditionDto `json:"errors,omitempty"`
	}

	varModelMappingHistogramDtoWithoutEmbeddedStruct := ModelMappingHistogramDtoWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varModelMappingHistogramDtoWithoutEmbeddedStruct)
	if err == nil {
		varModelMappingHistogramDto := _ModelMappingHistogramDto{}
		varModelMappingHistogramDto.MetricName = varModelMappingHistogramDtoWithoutEmbeddedStruct.MetricName
		varModelMappingHistogramDto.MetricUnit = varModelMappingHistogramDtoWithoutEmbeddedStruct.MetricUnit
		varModelMappingHistogramDto.Quantiles = varModelMappingHistogramDtoWithoutEmbeddedStruct.Quantiles
		varModelMappingHistogramDto.Errors = varModelMappingHistogramDtoWithoutEmbeddedStruct.Errors
		*o = ModelMappingHistogramDto(varModelMappingHistogramDto)
	} else {
		return err
	}

	varModelMappingHistogramDto := _ModelMappingHistogramDto{}

	err = json.Unmarshal(data, &varModelMappingHistogramDto)
	if err == nil {
		o.ModelMappingSignalDto = varModelMappingHistogramDto.ModelMappingSignalDto
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "metricName")
		delete(additionalProperties, "metricUnit")
		delete(additionalProperties, "quantiles")
		delete(additionalProperties, "errors")

		// remove fields from embedded structs
		reflectModelMappingSignalDto := reflect.ValueOf(o.ModelMappingSignalDto)
		for i := 0; i < reflectModelMappingSignalDto.Type().NumField(); i++ {
			t := reflectModelMappingSignalDto.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelMappingHistogramDto struct {
	value *ModelMappingHistogramDto
	isSet bool
}

func (v NullableModelMappingHistogramDto) Get() *ModelMappingHistogramDto {
	return v.value
}

func (v *NullableModelMappingHistogramDto) Set(val *ModelMappingHistogramDto) {
	v.value = val
	v.isSet = true
}

func (v NullableModelMappingHistogramDto) IsSet() bool {
	return v.isSet
}

func (v *NullableModelMappingHistogramDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelMappingHistogramDto(val *ModelMappingHistogramDto) *NullableModelMappingHistogramDto {
	return &NullableModelMappingHistogramDto{value: val, isSet: true}
}

func (v NullableModelMappingHistogramDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelMappingHistogramDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
