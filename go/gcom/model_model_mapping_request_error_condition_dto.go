/*
Asserts, Inc

Asserts Public API

API version: 1.0.4
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the ModelMappingRequestErrorConditionDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelMappingRequestErrorConditionDto{}

// ModelMappingRequestErrorConditionDto struct for ModelMappingRequestErrorConditionDto
type ModelMappingRequestErrorConditionDto struct {
	ErrorType            string  `json:"errorType"`
	Label                *string `json:"label,omitempty"`
	Comparator           *string `json:"comparator,omitempty" validate:"regexp==|!=|=~|!~"`
	Value                *string `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ModelMappingRequestErrorConditionDto ModelMappingRequestErrorConditionDto

// NewModelMappingRequestErrorConditionDto instantiates a new ModelMappingRequestErrorConditionDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelMappingRequestErrorConditionDto(errorType string) *ModelMappingRequestErrorConditionDto {
	this := ModelMappingRequestErrorConditionDto{}
	this.ErrorType = errorType
	return &this
}

// NewModelMappingRequestErrorConditionDtoWithDefaults instantiates a new ModelMappingRequestErrorConditionDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelMappingRequestErrorConditionDtoWithDefaults() *ModelMappingRequestErrorConditionDto {
	this := ModelMappingRequestErrorConditionDto{}
	return &this
}

// GetErrorType returns the ErrorType field value
func (o *ModelMappingRequestErrorConditionDto) GetErrorType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorType
}

// GetErrorTypeOk returns a tuple with the ErrorType field value
// and a boolean to check if the value has been set.
func (o *ModelMappingRequestErrorConditionDto) GetErrorTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorType, true
}

// SetErrorType sets field value
func (o *ModelMappingRequestErrorConditionDto) SetErrorType(v string) {
	o.ErrorType = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ModelMappingRequestErrorConditionDto) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMappingRequestErrorConditionDto) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ModelMappingRequestErrorConditionDto) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *ModelMappingRequestErrorConditionDto) SetLabel(v string) {
	o.Label = &v
}

// GetComparator returns the Comparator field value if set, zero value otherwise.
func (o *ModelMappingRequestErrorConditionDto) GetComparator() string {
	if o == nil || IsNil(o.Comparator) {
		var ret string
		return ret
	}
	return *o.Comparator
}

// GetComparatorOk returns a tuple with the Comparator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMappingRequestErrorConditionDto) GetComparatorOk() (*string, bool) {
	if o == nil || IsNil(o.Comparator) {
		return nil, false
	}
	return o.Comparator, true
}

// HasComparator returns a boolean if a field has been set.
func (o *ModelMappingRequestErrorConditionDto) HasComparator() bool {
	if o != nil && !IsNil(o.Comparator) {
		return true
	}

	return false
}

// SetComparator gets a reference to the given string and assigns it to the Comparator field.
func (o *ModelMappingRequestErrorConditionDto) SetComparator(v string) {
	o.Comparator = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ModelMappingRequestErrorConditionDto) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMappingRequestErrorConditionDto) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ModelMappingRequestErrorConditionDto) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ModelMappingRequestErrorConditionDto) SetValue(v string) {
	o.Value = &v
}

func (o ModelMappingRequestErrorConditionDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelMappingRequestErrorConditionDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["errorType"] = o.ErrorType
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Comparator) {
		toSerialize["comparator"] = o.Comparator
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelMappingRequestErrorConditionDto) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varModelMappingRequestErrorConditionDto := _ModelMappingRequestErrorConditionDto{}

	err = json.Unmarshal(data, &varModelMappingRequestErrorConditionDto)

	if err != nil {
		return err
	}

	*o = ModelMappingRequestErrorConditionDto(varModelMappingRequestErrorConditionDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "errorType")
		delete(additionalProperties, "label")
		delete(additionalProperties, "comparator")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelMappingRequestErrorConditionDto struct {
	value *ModelMappingRequestErrorConditionDto
	isSet bool
}

func (v NullableModelMappingRequestErrorConditionDto) Get() *ModelMappingRequestErrorConditionDto {
	return v.value
}

func (v *NullableModelMappingRequestErrorConditionDto) Set(val *ModelMappingRequestErrorConditionDto) {
	v.value = val
	v.isSet = true
}

func (v NullableModelMappingRequestErrorConditionDto) IsSet() bool {
	return v.isSet
}

func (v *NullableModelMappingRequestErrorConditionDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelMappingRequestErrorConditionDto(val *ModelMappingRequestErrorConditionDto) *NullableModelMappingRequestErrorConditionDto {
	return &NullableModelMappingRequestErrorConditionDto{value: val, isSet: true}
}

func (v NullableModelMappingRequestErrorConditionDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelMappingRequestErrorConditionDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
