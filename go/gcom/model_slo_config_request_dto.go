/*
Asserts, Inc

Asserts Public API

API version: 1.0.4
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the SloConfigRequestDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SloConfigRequestDto{}

// SloConfigRequestDto struct for SloConfigRequestDto
type SloConfigRequestDto struct {
	ApiVersion           *string                       `json:"apiVersion,omitempty"`
	Name                 *string                       `json:"name,omitempty"`
	EntitySearch         *string                       `json:"entitySearch,omitempty"`
	Indicator            *SloConfigRequestDtoIndicator `json:"indicator,omitempty"`
	Objectives           []SloConfigDto                `json:"objectives,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SloConfigRequestDto SloConfigRequestDto

// NewSloConfigRequestDto instantiates a new SloConfigRequestDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSloConfigRequestDto() *SloConfigRequestDto {
	this := SloConfigRequestDto{}
	return &this
}

// NewSloConfigRequestDtoWithDefaults instantiates a new SloConfigRequestDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSloConfigRequestDtoWithDefaults() *SloConfigRequestDto {
	this := SloConfigRequestDto{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *SloConfigRequestDto) GetApiVersion() string {
	if o == nil || IsNil(o.ApiVersion) {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloConfigRequestDto) GetApiVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ApiVersion) {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *SloConfigRequestDto) HasApiVersion() bool {
	if o != nil && !IsNil(o.ApiVersion) {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *SloConfigRequestDto) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SloConfigRequestDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloConfigRequestDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SloConfigRequestDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SloConfigRequestDto) SetName(v string) {
	o.Name = &v
}

// GetEntitySearch returns the EntitySearch field value if set, zero value otherwise.
func (o *SloConfigRequestDto) GetEntitySearch() string {
	if o == nil || IsNil(o.EntitySearch) {
		var ret string
		return ret
	}
	return *o.EntitySearch
}

// GetEntitySearchOk returns a tuple with the EntitySearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloConfigRequestDto) GetEntitySearchOk() (*string, bool) {
	if o == nil || IsNil(o.EntitySearch) {
		return nil, false
	}
	return o.EntitySearch, true
}

// HasEntitySearch returns a boolean if a field has been set.
func (o *SloConfigRequestDto) HasEntitySearch() bool {
	if o != nil && !IsNil(o.EntitySearch) {
		return true
	}

	return false
}

// SetEntitySearch gets a reference to the given string and assigns it to the EntitySearch field.
func (o *SloConfigRequestDto) SetEntitySearch(v string) {
	o.EntitySearch = &v
}

// GetIndicator returns the Indicator field value if set, zero value otherwise.
func (o *SloConfigRequestDto) GetIndicator() SloConfigRequestDtoIndicator {
	if o == nil || IsNil(o.Indicator) {
		var ret SloConfigRequestDtoIndicator
		return ret
	}
	return *o.Indicator
}

// GetIndicatorOk returns a tuple with the Indicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloConfigRequestDto) GetIndicatorOk() (*SloConfigRequestDtoIndicator, bool) {
	if o == nil || IsNil(o.Indicator) {
		return nil, false
	}
	return o.Indicator, true
}

// HasIndicator returns a boolean if a field has been set.
func (o *SloConfigRequestDto) HasIndicator() bool {
	if o != nil && !IsNil(o.Indicator) {
		return true
	}

	return false
}

// SetIndicator gets a reference to the given SloConfigRequestDtoIndicator and assigns it to the Indicator field.
func (o *SloConfigRequestDto) SetIndicator(v SloConfigRequestDtoIndicator) {
	o.Indicator = &v
}

// GetObjectives returns the Objectives field value if set, zero value otherwise.
func (o *SloConfigRequestDto) GetObjectives() []SloConfigDto {
	if o == nil || IsNil(o.Objectives) {
		var ret []SloConfigDto
		return ret
	}
	return o.Objectives
}

// GetObjectivesOk returns a tuple with the Objectives field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloConfigRequestDto) GetObjectivesOk() ([]SloConfigDto, bool) {
	if o == nil || IsNil(o.Objectives) {
		return nil, false
	}
	return o.Objectives, true
}

// HasObjectives returns a boolean if a field has been set.
func (o *SloConfigRequestDto) HasObjectives() bool {
	if o != nil && !IsNil(o.Objectives) {
		return true
	}

	return false
}

// SetObjectives gets a reference to the given []SloConfigDto and assigns it to the Objectives field.
func (o *SloConfigRequestDto) SetObjectives(v []SloConfigDto) {
	o.Objectives = v
}

func (o SloConfigRequestDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SloConfigRequestDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiVersion) {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.EntitySearch) {
		toSerialize["entitySearch"] = o.EntitySearch
	}
	if !IsNil(o.Indicator) {
		toSerialize["indicator"] = o.Indicator
	}
	if !IsNil(o.Objectives) {
		toSerialize["objectives"] = o.Objectives
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SloConfigRequestDto) UnmarshalJSON(data []byte) (err error) {
	varSloConfigRequestDto := _SloConfigRequestDto{}

	err = json.Unmarshal(data, &varSloConfigRequestDto)

	if err != nil {
		return err
	}

	*o = SloConfigRequestDto(varSloConfigRequestDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "apiVersion")
		delete(additionalProperties, "name")
		delete(additionalProperties, "entitySearch")
		delete(additionalProperties, "indicator")
		delete(additionalProperties, "objectives")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSloConfigRequestDto struct {
	value *SloConfigRequestDto
	isSet bool
}

func (v NullableSloConfigRequestDto) Get() *SloConfigRequestDto {
	return v.value
}

func (v *NullableSloConfigRequestDto) Set(val *SloConfigRequestDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSloConfigRequestDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSloConfigRequestDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloConfigRequestDto(val *SloConfigRequestDto) *NullableSloConfigRequestDto {
	return &NullableSloConfigRequestDto{value: val, isSet: true}
}

func (v NullableSloConfigRequestDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloConfigRequestDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
