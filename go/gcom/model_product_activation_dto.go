/*
Asserts, Inc

Asserts Public API

API version: 2025.09.11-132913
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the ProductActivationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductActivationDto{}

// ProductActivationDto struct for ProductActivationDto
type ProductActivationDto struct {
	Product              string `json:"product"`
	Enabled              bool   `json:"enabled"`
	AdditionalProperties map[string]interface{}
}

type _ProductActivationDto ProductActivationDto

// NewProductActivationDto instantiates a new ProductActivationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductActivationDto(product string, enabled bool) *ProductActivationDto {
	this := ProductActivationDto{}
	this.Product = product
	this.Enabled = enabled
	return &this
}

// NewProductActivationDtoWithDefaults instantiates a new ProductActivationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductActivationDtoWithDefaults() *ProductActivationDto {
	this := ProductActivationDto{}
	return &this
}

// GetProduct returns the Product field value
func (o *ProductActivationDto) GetProduct() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Product
}

// GetProductOk returns a tuple with the Product field value
// and a boolean to check if the value has been set.
func (o *ProductActivationDto) GetProductOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Product, true
}

// SetProduct sets field value
func (o *ProductActivationDto) SetProduct(v string) {
	o.Product = v
}

// GetEnabled returns the Enabled field value
func (o *ProductActivationDto) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ProductActivationDto) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *ProductActivationDto) SetEnabled(v bool) {
	o.Enabled = v
}

func (o ProductActivationDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductActivationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["product"] = o.Product
	toSerialize["enabled"] = o.Enabled

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProductActivationDto) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varProductActivationDto := _ProductActivationDto{}

	err = json.Unmarshal(data, &varProductActivationDto)

	if err != nil {
		return err
	}

	*o = ProductActivationDto(varProductActivationDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "product")
		delete(additionalProperties, "enabled")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProductActivationDto struct {
	value *ProductActivationDto
	isSet bool
}

func (v NullableProductActivationDto) Get() *ProductActivationDto {
	return v.value
}

func (v *NullableProductActivationDto) Set(val *ProductActivationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableProductActivationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableProductActivationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductActivationDto(val *ProductActivationDto) *NullableProductActivationDto {
	return &NullableProductActivationDto{value: val, isSet: true}
}

func (v NullableProductActivationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductActivationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
