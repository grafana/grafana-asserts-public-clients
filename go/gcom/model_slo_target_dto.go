/*
Asserts, Inc

Asserts Public API

API version: 1.0.1
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the SloTargetDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SloTargetDto{}

// SloTargetDto struct for SloTargetDto
type SloTargetDto struct {
	Name                       *string              `json:"name,omitempty"`
	Description                *string              `json:"description,omitempty"`
	TargetSli                  *float64             `json:"targetSli,omitempty"`
	ActualSli                  *float64             `json:"actualSli,omitempty"`
	Threshold                  *float64             `json:"threshold,omitempty"`
	ComplianceWindowDto        *ComplianceWindowDto `json:"complianceWindowDto,omitempty"`
	Status                     *string              `json:"status,omitempty"`
	FastBurnViolatingSince     *int64               `json:"fastBurnViolatingSince,omitempty"`
	SlowBurnViolatingSince     *int64               `json:"slowBurnViolatingSince,omitempty"`
	FastBurnThreshold          *float64             `json:"fastBurnThreshold,omitempty"`
	SlowBurnThreshold          *float64             `json:"slowBurnThreshold,omitempty"`
	IncidentCount              *int32               `json:"incidentCount,omitempty"`
	ErrorBudget                *float64             `json:"errorBudget,omitempty"`
	OneHourErrorBudget         *float64             `json:"oneHourErrorBudget,omitempty"`
	BadCount                   *float64             `json:"badCount,omitempty"`
	ErrorBudgetBalance         *float64             `json:"errorBudgetBalance,omitempty"`
	TotalCount                 *float64             `json:"totalCount,omitempty"`
	RecentBurnRate             *float64             `json:"recentBurnRate,omitempty"`
	OneHourBurnRate            *float64             `json:"oneHourBurnRate,omitempty"`
	SixHourBurnRate            *float64             `json:"sixHourBurnRate,omitempty"`
	IncidentTriggerDescription *string              `json:"incidentTriggerDescription,omitempty"`
	AdditionalProperties       map[string]interface{}
}

type _SloTargetDto SloTargetDto

// NewSloTargetDto instantiates a new SloTargetDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSloTargetDto() *SloTargetDto {
	this := SloTargetDto{}
	return &this
}

// NewSloTargetDtoWithDefaults instantiates a new SloTargetDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSloTargetDtoWithDefaults() *SloTargetDto {
	this := SloTargetDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SloTargetDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloTargetDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SloTargetDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SloTargetDto) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SloTargetDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloTargetDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SloTargetDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SloTargetDto) SetDescription(v string) {
	o.Description = &v
}

// GetTargetSli returns the TargetSli field value if set, zero value otherwise.
func (o *SloTargetDto) GetTargetSli() float64 {
	if o == nil || IsNil(o.TargetSli) {
		var ret float64
		return ret
	}
	return *o.TargetSli
}

// GetTargetSliOk returns a tuple with the TargetSli field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloTargetDto) GetTargetSliOk() (*float64, bool) {
	if o == nil || IsNil(o.TargetSli) {
		return nil, false
	}
	return o.TargetSli, true
}

// HasTargetSli returns a boolean if a field has been set.
func (o *SloTargetDto) HasTargetSli() bool {
	if o != nil && !IsNil(o.TargetSli) {
		return true
	}

	return false
}

// SetTargetSli gets a reference to the given float64 and assigns it to the TargetSli field.
func (o *SloTargetDto) SetTargetSli(v float64) {
	o.TargetSli = &v
}

// GetActualSli returns the ActualSli field value if set, zero value otherwise.
func (o *SloTargetDto) GetActualSli() float64 {
	if o == nil || IsNil(o.ActualSli) {
		var ret float64
		return ret
	}
	return *o.ActualSli
}

// GetActualSliOk returns a tuple with the ActualSli field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloTargetDto) GetActualSliOk() (*float64, bool) {
	if o == nil || IsNil(o.ActualSli) {
		return nil, false
	}
	return o.ActualSli, true
}

// HasActualSli returns a boolean if a field has been set.
func (o *SloTargetDto) HasActualSli() bool {
	if o != nil && !IsNil(o.ActualSli) {
		return true
	}

	return false
}

// SetActualSli gets a reference to the given float64 and assigns it to the ActualSli field.
func (o *SloTargetDto) SetActualSli(v float64) {
	o.ActualSli = &v
}

// GetThreshold returns the Threshold field value if set, zero value otherwise.
func (o *SloTargetDto) GetThreshold() float64 {
	if o == nil || IsNil(o.Threshold) {
		var ret float64
		return ret
	}
	return *o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloTargetDto) GetThresholdOk() (*float64, bool) {
	if o == nil || IsNil(o.Threshold) {
		return nil, false
	}
	return o.Threshold, true
}

// HasThreshold returns a boolean if a field has been set.
func (o *SloTargetDto) HasThreshold() bool {
	if o != nil && !IsNil(o.Threshold) {
		return true
	}

	return false
}

// SetThreshold gets a reference to the given float64 and assigns it to the Threshold field.
func (o *SloTargetDto) SetThreshold(v float64) {
	o.Threshold = &v
}

// GetComplianceWindowDto returns the ComplianceWindowDto field value if set, zero value otherwise.
func (o *SloTargetDto) GetComplianceWindowDto() ComplianceWindowDto {
	if o == nil || IsNil(o.ComplianceWindowDto) {
		var ret ComplianceWindowDto
		return ret
	}
	return *o.ComplianceWindowDto
}

// GetComplianceWindowDtoOk returns a tuple with the ComplianceWindowDto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloTargetDto) GetComplianceWindowDtoOk() (*ComplianceWindowDto, bool) {
	if o == nil || IsNil(o.ComplianceWindowDto) {
		return nil, false
	}
	return o.ComplianceWindowDto, true
}

// HasComplianceWindowDto returns a boolean if a field has been set.
func (o *SloTargetDto) HasComplianceWindowDto() bool {
	if o != nil && !IsNil(o.ComplianceWindowDto) {
		return true
	}

	return false
}

// SetComplianceWindowDto gets a reference to the given ComplianceWindowDto and assigns it to the ComplianceWindowDto field.
func (o *SloTargetDto) SetComplianceWindowDto(v ComplianceWindowDto) {
	o.ComplianceWindowDto = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SloTargetDto) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloTargetDto) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SloTargetDto) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SloTargetDto) SetStatus(v string) {
	o.Status = &v
}

// GetFastBurnViolatingSince returns the FastBurnViolatingSince field value if set, zero value otherwise.
func (o *SloTargetDto) GetFastBurnViolatingSince() int64 {
	if o == nil || IsNil(o.FastBurnViolatingSince) {
		var ret int64
		return ret
	}
	return *o.FastBurnViolatingSince
}

// GetFastBurnViolatingSinceOk returns a tuple with the FastBurnViolatingSince field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloTargetDto) GetFastBurnViolatingSinceOk() (*int64, bool) {
	if o == nil || IsNil(o.FastBurnViolatingSince) {
		return nil, false
	}
	return o.FastBurnViolatingSince, true
}

// HasFastBurnViolatingSince returns a boolean if a field has been set.
func (o *SloTargetDto) HasFastBurnViolatingSince() bool {
	if o != nil && !IsNil(o.FastBurnViolatingSince) {
		return true
	}

	return false
}

// SetFastBurnViolatingSince gets a reference to the given int64 and assigns it to the FastBurnViolatingSince field.
func (o *SloTargetDto) SetFastBurnViolatingSince(v int64) {
	o.FastBurnViolatingSince = &v
}

// GetSlowBurnViolatingSince returns the SlowBurnViolatingSince field value if set, zero value otherwise.
func (o *SloTargetDto) GetSlowBurnViolatingSince() int64 {
	if o == nil || IsNil(o.SlowBurnViolatingSince) {
		var ret int64
		return ret
	}
	return *o.SlowBurnViolatingSince
}

// GetSlowBurnViolatingSinceOk returns a tuple with the SlowBurnViolatingSince field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloTargetDto) GetSlowBurnViolatingSinceOk() (*int64, bool) {
	if o == nil || IsNil(o.SlowBurnViolatingSince) {
		return nil, false
	}
	return o.SlowBurnViolatingSince, true
}

// HasSlowBurnViolatingSince returns a boolean if a field has been set.
func (o *SloTargetDto) HasSlowBurnViolatingSince() bool {
	if o != nil && !IsNil(o.SlowBurnViolatingSince) {
		return true
	}

	return false
}

// SetSlowBurnViolatingSince gets a reference to the given int64 and assigns it to the SlowBurnViolatingSince field.
func (o *SloTargetDto) SetSlowBurnViolatingSince(v int64) {
	o.SlowBurnViolatingSince = &v
}

// GetFastBurnThreshold returns the FastBurnThreshold field value if set, zero value otherwise.
func (o *SloTargetDto) GetFastBurnThreshold() float64 {
	if o == nil || IsNil(o.FastBurnThreshold) {
		var ret float64
		return ret
	}
	return *o.FastBurnThreshold
}

// GetFastBurnThresholdOk returns a tuple with the FastBurnThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloTargetDto) GetFastBurnThresholdOk() (*float64, bool) {
	if o == nil || IsNil(o.FastBurnThreshold) {
		return nil, false
	}
	return o.FastBurnThreshold, true
}

// HasFastBurnThreshold returns a boolean if a field has been set.
func (o *SloTargetDto) HasFastBurnThreshold() bool {
	if o != nil && !IsNil(o.FastBurnThreshold) {
		return true
	}

	return false
}

// SetFastBurnThreshold gets a reference to the given float64 and assigns it to the FastBurnThreshold field.
func (o *SloTargetDto) SetFastBurnThreshold(v float64) {
	o.FastBurnThreshold = &v
}

// GetSlowBurnThreshold returns the SlowBurnThreshold field value if set, zero value otherwise.
func (o *SloTargetDto) GetSlowBurnThreshold() float64 {
	if o == nil || IsNil(o.SlowBurnThreshold) {
		var ret float64
		return ret
	}
	return *o.SlowBurnThreshold
}

// GetSlowBurnThresholdOk returns a tuple with the SlowBurnThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloTargetDto) GetSlowBurnThresholdOk() (*float64, bool) {
	if o == nil || IsNil(o.SlowBurnThreshold) {
		return nil, false
	}
	return o.SlowBurnThreshold, true
}

// HasSlowBurnThreshold returns a boolean if a field has been set.
func (o *SloTargetDto) HasSlowBurnThreshold() bool {
	if o != nil && !IsNil(o.SlowBurnThreshold) {
		return true
	}

	return false
}

// SetSlowBurnThreshold gets a reference to the given float64 and assigns it to the SlowBurnThreshold field.
func (o *SloTargetDto) SetSlowBurnThreshold(v float64) {
	o.SlowBurnThreshold = &v
}

// GetIncidentCount returns the IncidentCount field value if set, zero value otherwise.
func (o *SloTargetDto) GetIncidentCount() int32 {
	if o == nil || IsNil(o.IncidentCount) {
		var ret int32
		return ret
	}
	return *o.IncidentCount
}

// GetIncidentCountOk returns a tuple with the IncidentCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloTargetDto) GetIncidentCountOk() (*int32, bool) {
	if o == nil || IsNil(o.IncidentCount) {
		return nil, false
	}
	return o.IncidentCount, true
}

// HasIncidentCount returns a boolean if a field has been set.
func (o *SloTargetDto) HasIncidentCount() bool {
	if o != nil && !IsNil(o.IncidentCount) {
		return true
	}

	return false
}

// SetIncidentCount gets a reference to the given int32 and assigns it to the IncidentCount field.
func (o *SloTargetDto) SetIncidentCount(v int32) {
	o.IncidentCount = &v
}

// GetErrorBudget returns the ErrorBudget field value if set, zero value otherwise.
func (o *SloTargetDto) GetErrorBudget() float64 {
	if o == nil || IsNil(o.ErrorBudget) {
		var ret float64
		return ret
	}
	return *o.ErrorBudget
}

// GetErrorBudgetOk returns a tuple with the ErrorBudget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloTargetDto) GetErrorBudgetOk() (*float64, bool) {
	if o == nil || IsNil(o.ErrorBudget) {
		return nil, false
	}
	return o.ErrorBudget, true
}

// HasErrorBudget returns a boolean if a field has been set.
func (o *SloTargetDto) HasErrorBudget() bool {
	if o != nil && !IsNil(o.ErrorBudget) {
		return true
	}

	return false
}

// SetErrorBudget gets a reference to the given float64 and assigns it to the ErrorBudget field.
func (o *SloTargetDto) SetErrorBudget(v float64) {
	o.ErrorBudget = &v
}

// GetOneHourErrorBudget returns the OneHourErrorBudget field value if set, zero value otherwise.
func (o *SloTargetDto) GetOneHourErrorBudget() float64 {
	if o == nil || IsNil(o.OneHourErrorBudget) {
		var ret float64
		return ret
	}
	return *o.OneHourErrorBudget
}

// GetOneHourErrorBudgetOk returns a tuple with the OneHourErrorBudget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloTargetDto) GetOneHourErrorBudgetOk() (*float64, bool) {
	if o == nil || IsNil(o.OneHourErrorBudget) {
		return nil, false
	}
	return o.OneHourErrorBudget, true
}

// HasOneHourErrorBudget returns a boolean if a field has been set.
func (o *SloTargetDto) HasOneHourErrorBudget() bool {
	if o != nil && !IsNil(o.OneHourErrorBudget) {
		return true
	}

	return false
}

// SetOneHourErrorBudget gets a reference to the given float64 and assigns it to the OneHourErrorBudget field.
func (o *SloTargetDto) SetOneHourErrorBudget(v float64) {
	o.OneHourErrorBudget = &v
}

// GetBadCount returns the BadCount field value if set, zero value otherwise.
func (o *SloTargetDto) GetBadCount() float64 {
	if o == nil || IsNil(o.BadCount) {
		var ret float64
		return ret
	}
	return *o.BadCount
}

// GetBadCountOk returns a tuple with the BadCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloTargetDto) GetBadCountOk() (*float64, bool) {
	if o == nil || IsNil(o.BadCount) {
		return nil, false
	}
	return o.BadCount, true
}

// HasBadCount returns a boolean if a field has been set.
func (o *SloTargetDto) HasBadCount() bool {
	if o != nil && !IsNil(o.BadCount) {
		return true
	}

	return false
}

// SetBadCount gets a reference to the given float64 and assigns it to the BadCount field.
func (o *SloTargetDto) SetBadCount(v float64) {
	o.BadCount = &v
}

// GetErrorBudgetBalance returns the ErrorBudgetBalance field value if set, zero value otherwise.
func (o *SloTargetDto) GetErrorBudgetBalance() float64 {
	if o == nil || IsNil(o.ErrorBudgetBalance) {
		var ret float64
		return ret
	}
	return *o.ErrorBudgetBalance
}

// GetErrorBudgetBalanceOk returns a tuple with the ErrorBudgetBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloTargetDto) GetErrorBudgetBalanceOk() (*float64, bool) {
	if o == nil || IsNil(o.ErrorBudgetBalance) {
		return nil, false
	}
	return o.ErrorBudgetBalance, true
}

// HasErrorBudgetBalance returns a boolean if a field has been set.
func (o *SloTargetDto) HasErrorBudgetBalance() bool {
	if o != nil && !IsNil(o.ErrorBudgetBalance) {
		return true
	}

	return false
}

// SetErrorBudgetBalance gets a reference to the given float64 and assigns it to the ErrorBudgetBalance field.
func (o *SloTargetDto) SetErrorBudgetBalance(v float64) {
	o.ErrorBudgetBalance = &v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *SloTargetDto) GetTotalCount() float64 {
	if o == nil || IsNil(o.TotalCount) {
		var ret float64
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloTargetDto) GetTotalCountOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalCount) {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *SloTargetDto) HasTotalCount() bool {
	if o != nil && !IsNil(o.TotalCount) {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given float64 and assigns it to the TotalCount field.
func (o *SloTargetDto) SetTotalCount(v float64) {
	o.TotalCount = &v
}

// GetRecentBurnRate returns the RecentBurnRate field value if set, zero value otherwise.
func (o *SloTargetDto) GetRecentBurnRate() float64 {
	if o == nil || IsNil(o.RecentBurnRate) {
		var ret float64
		return ret
	}
	return *o.RecentBurnRate
}

// GetRecentBurnRateOk returns a tuple with the RecentBurnRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloTargetDto) GetRecentBurnRateOk() (*float64, bool) {
	if o == nil || IsNil(o.RecentBurnRate) {
		return nil, false
	}
	return o.RecentBurnRate, true
}

// HasRecentBurnRate returns a boolean if a field has been set.
func (o *SloTargetDto) HasRecentBurnRate() bool {
	if o != nil && !IsNil(o.RecentBurnRate) {
		return true
	}

	return false
}

// SetRecentBurnRate gets a reference to the given float64 and assigns it to the RecentBurnRate field.
func (o *SloTargetDto) SetRecentBurnRate(v float64) {
	o.RecentBurnRate = &v
}

// GetOneHourBurnRate returns the OneHourBurnRate field value if set, zero value otherwise.
func (o *SloTargetDto) GetOneHourBurnRate() float64 {
	if o == nil || IsNil(o.OneHourBurnRate) {
		var ret float64
		return ret
	}
	return *o.OneHourBurnRate
}

// GetOneHourBurnRateOk returns a tuple with the OneHourBurnRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloTargetDto) GetOneHourBurnRateOk() (*float64, bool) {
	if o == nil || IsNil(o.OneHourBurnRate) {
		return nil, false
	}
	return o.OneHourBurnRate, true
}

// HasOneHourBurnRate returns a boolean if a field has been set.
func (o *SloTargetDto) HasOneHourBurnRate() bool {
	if o != nil && !IsNil(o.OneHourBurnRate) {
		return true
	}

	return false
}

// SetOneHourBurnRate gets a reference to the given float64 and assigns it to the OneHourBurnRate field.
func (o *SloTargetDto) SetOneHourBurnRate(v float64) {
	o.OneHourBurnRate = &v
}

// GetSixHourBurnRate returns the SixHourBurnRate field value if set, zero value otherwise.
func (o *SloTargetDto) GetSixHourBurnRate() float64 {
	if o == nil || IsNil(o.SixHourBurnRate) {
		var ret float64
		return ret
	}
	return *o.SixHourBurnRate
}

// GetSixHourBurnRateOk returns a tuple with the SixHourBurnRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloTargetDto) GetSixHourBurnRateOk() (*float64, bool) {
	if o == nil || IsNil(o.SixHourBurnRate) {
		return nil, false
	}
	return o.SixHourBurnRate, true
}

// HasSixHourBurnRate returns a boolean if a field has been set.
func (o *SloTargetDto) HasSixHourBurnRate() bool {
	if o != nil && !IsNil(o.SixHourBurnRate) {
		return true
	}

	return false
}

// SetSixHourBurnRate gets a reference to the given float64 and assigns it to the SixHourBurnRate field.
func (o *SloTargetDto) SetSixHourBurnRate(v float64) {
	o.SixHourBurnRate = &v
}

// GetIncidentTriggerDescription returns the IncidentTriggerDescription field value if set, zero value otherwise.
func (o *SloTargetDto) GetIncidentTriggerDescription() string {
	if o == nil || IsNil(o.IncidentTriggerDescription) {
		var ret string
		return ret
	}
	return *o.IncidentTriggerDescription
}

// GetIncidentTriggerDescriptionOk returns a tuple with the IncidentTriggerDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloTargetDto) GetIncidentTriggerDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.IncidentTriggerDescription) {
		return nil, false
	}
	return o.IncidentTriggerDescription, true
}

// HasIncidentTriggerDescription returns a boolean if a field has been set.
func (o *SloTargetDto) HasIncidentTriggerDescription() bool {
	if o != nil && !IsNil(o.IncidentTriggerDescription) {
		return true
	}

	return false
}

// SetIncidentTriggerDescription gets a reference to the given string and assigns it to the IncidentTriggerDescription field.
func (o *SloTargetDto) SetIncidentTriggerDescription(v string) {
	o.IncidentTriggerDescription = &v
}

func (o SloTargetDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SloTargetDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.TargetSli) {
		toSerialize["targetSli"] = o.TargetSli
	}
	if !IsNil(o.ActualSli) {
		toSerialize["actualSli"] = o.ActualSli
	}
	if !IsNil(o.Threshold) {
		toSerialize["threshold"] = o.Threshold
	}
	if !IsNil(o.ComplianceWindowDto) {
		toSerialize["complianceWindowDto"] = o.ComplianceWindowDto
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.FastBurnViolatingSince) {
		toSerialize["fastBurnViolatingSince"] = o.FastBurnViolatingSince
	}
	if !IsNil(o.SlowBurnViolatingSince) {
		toSerialize["slowBurnViolatingSince"] = o.SlowBurnViolatingSince
	}
	if !IsNil(o.FastBurnThreshold) {
		toSerialize["fastBurnThreshold"] = o.FastBurnThreshold
	}
	if !IsNil(o.SlowBurnThreshold) {
		toSerialize["slowBurnThreshold"] = o.SlowBurnThreshold
	}
	if !IsNil(o.IncidentCount) {
		toSerialize["incidentCount"] = o.IncidentCount
	}
	if !IsNil(o.ErrorBudget) {
		toSerialize["errorBudget"] = o.ErrorBudget
	}
	if !IsNil(o.OneHourErrorBudget) {
		toSerialize["oneHourErrorBudget"] = o.OneHourErrorBudget
	}
	if !IsNil(o.BadCount) {
		toSerialize["badCount"] = o.BadCount
	}
	if !IsNil(o.ErrorBudgetBalance) {
		toSerialize["errorBudgetBalance"] = o.ErrorBudgetBalance
	}
	if !IsNil(o.TotalCount) {
		toSerialize["totalCount"] = o.TotalCount
	}
	if !IsNil(o.RecentBurnRate) {
		toSerialize["recentBurnRate"] = o.RecentBurnRate
	}
	if !IsNil(o.OneHourBurnRate) {
		toSerialize["oneHourBurnRate"] = o.OneHourBurnRate
	}
	if !IsNil(o.SixHourBurnRate) {
		toSerialize["sixHourBurnRate"] = o.SixHourBurnRate
	}
	if !IsNil(o.IncidentTriggerDescription) {
		toSerialize["incidentTriggerDescription"] = o.IncidentTriggerDescription
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SloTargetDto) UnmarshalJSON(data []byte) (err error) {
	varSloTargetDto := _SloTargetDto{}

	err = json.Unmarshal(data, &varSloTargetDto)

	if err != nil {
		return err
	}

	*o = SloTargetDto(varSloTargetDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "targetSli")
		delete(additionalProperties, "actualSli")
		delete(additionalProperties, "threshold")
		delete(additionalProperties, "complianceWindowDto")
		delete(additionalProperties, "status")
		delete(additionalProperties, "fastBurnViolatingSince")
		delete(additionalProperties, "slowBurnViolatingSince")
		delete(additionalProperties, "fastBurnThreshold")
		delete(additionalProperties, "slowBurnThreshold")
		delete(additionalProperties, "incidentCount")
		delete(additionalProperties, "errorBudget")
		delete(additionalProperties, "oneHourErrorBudget")
		delete(additionalProperties, "badCount")
		delete(additionalProperties, "errorBudgetBalance")
		delete(additionalProperties, "totalCount")
		delete(additionalProperties, "recentBurnRate")
		delete(additionalProperties, "oneHourBurnRate")
		delete(additionalProperties, "sixHourBurnRate")
		delete(additionalProperties, "incidentTriggerDescription")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSloTargetDto struct {
	value *SloTargetDto
	isSet bool
}

func (v NullableSloTargetDto) Get() *SloTargetDto {
	return v.value
}

func (v *NullableSloTargetDto) Set(val *SloTargetDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSloTargetDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSloTargetDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloTargetDto(val *SloTargetDto) *NullableSloTargetDto {
	return &NullableSloTargetDto{value: val, isSet: true}
}

func (v NullableSloTargetDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloTargetDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
