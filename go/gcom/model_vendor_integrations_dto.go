/*
Asserts, Inc

Asserts Public API

API version: 2025.09.11-132913
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the VendorIntegrationsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VendorIntegrationsDto{}

// VendorIntegrationsDto struct for VendorIntegrationsDto
type VendorIntegrationsDto struct {
	Items                []VendorIntegrationDto `json:"items,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VendorIntegrationsDto VendorIntegrationsDto

// NewVendorIntegrationsDto instantiates a new VendorIntegrationsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVendorIntegrationsDto() *VendorIntegrationsDto {
	this := VendorIntegrationsDto{}
	return &this
}

// NewVendorIntegrationsDtoWithDefaults instantiates a new VendorIntegrationsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVendorIntegrationsDtoWithDefaults() *VendorIntegrationsDto {
	this := VendorIntegrationsDto{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *VendorIntegrationsDto) GetItems() []VendorIntegrationDto {
	if o == nil || IsNil(o.Items) {
		var ret []VendorIntegrationDto
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorIntegrationsDto) GetItemsOk() ([]VendorIntegrationDto, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *VendorIntegrationsDto) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []VendorIntegrationDto and assigns it to the Items field.
func (o *VendorIntegrationsDto) SetItems(v []VendorIntegrationDto) {
	o.Items = v
}

func (o VendorIntegrationsDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VendorIntegrationsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VendorIntegrationsDto) UnmarshalJSON(data []byte) (err error) {
	varVendorIntegrationsDto := _VendorIntegrationsDto{}

	err = json.Unmarshal(data, &varVendorIntegrationsDto)

	if err != nil {
		return err
	}

	*o = VendorIntegrationsDto(varVendorIntegrationsDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "items")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVendorIntegrationsDto struct {
	value *VendorIntegrationsDto
	isSet bool
}

func (v NullableVendorIntegrationsDto) Get() *VendorIntegrationsDto {
	return v.value
}

func (v *NullableVendorIntegrationsDto) Set(val *VendorIntegrationsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableVendorIntegrationsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableVendorIntegrationsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVendorIntegrationsDto(val *VendorIntegrationsDto) *NullableVendorIntegrationsDto {
	return &NullableVendorIntegrationsDto{value: val, isSet: true}
}

func (v NullableVendorIntegrationsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVendorIntegrationsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
