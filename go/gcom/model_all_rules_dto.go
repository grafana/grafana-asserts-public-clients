/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-112305
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the AllRulesDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AllRulesDto{}

// AllRulesDto struct for AllRulesDto
type AllRulesDto struct {
	All                  *VersionedRulesPayload             `json:"all,omitempty"`
	Relabel              *VersionedMimirRelabelRulesPayload `json:"relabel,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AllRulesDto AllRulesDto

// NewAllRulesDto instantiates a new AllRulesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllRulesDto() *AllRulesDto {
	this := AllRulesDto{}
	return &this
}

// NewAllRulesDtoWithDefaults instantiates a new AllRulesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllRulesDtoWithDefaults() *AllRulesDto {
	this := AllRulesDto{}
	return &this
}

// GetAll returns the All field value if set, zero value otherwise.
func (o *AllRulesDto) GetAll() VersionedRulesPayload {
	if o == nil || IsNil(o.All) {
		var ret VersionedRulesPayload
		return ret
	}
	return *o.All
}

// GetAllOk returns a tuple with the All field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllRulesDto) GetAllOk() (*VersionedRulesPayload, bool) {
	if o == nil || IsNil(o.All) {
		return nil, false
	}
	return o.All, true
}

// HasAll returns a boolean if a field has been set.
func (o *AllRulesDto) HasAll() bool {
	if o != nil && !IsNil(o.All) {
		return true
	}

	return false
}

// SetAll gets a reference to the given VersionedRulesPayload and assigns it to the All field.
func (o *AllRulesDto) SetAll(v VersionedRulesPayload) {
	o.All = &v
}

// GetRelabel returns the Relabel field value if set, zero value otherwise.
func (o *AllRulesDto) GetRelabel() VersionedMimirRelabelRulesPayload {
	if o == nil || IsNil(o.Relabel) {
		var ret VersionedMimirRelabelRulesPayload
		return ret
	}
	return *o.Relabel
}

// GetRelabelOk returns a tuple with the Relabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllRulesDto) GetRelabelOk() (*VersionedMimirRelabelRulesPayload, bool) {
	if o == nil || IsNil(o.Relabel) {
		return nil, false
	}
	return o.Relabel, true
}

// HasRelabel returns a boolean if a field has been set.
func (o *AllRulesDto) HasRelabel() bool {
	if o != nil && !IsNil(o.Relabel) {
		return true
	}

	return false
}

// SetRelabel gets a reference to the given VersionedMimirRelabelRulesPayload and assigns it to the Relabel field.
func (o *AllRulesDto) SetRelabel(v VersionedMimirRelabelRulesPayload) {
	o.Relabel = &v
}

func (o AllRulesDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AllRulesDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.All) {
		toSerialize["all"] = o.All
	}
	if !IsNil(o.Relabel) {
		toSerialize["relabel"] = o.Relabel
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AllRulesDto) UnmarshalJSON(data []byte) (err error) {
	varAllRulesDto := _AllRulesDto{}

	err = json.Unmarshal(data, &varAllRulesDto)

	if err != nil {
		return err
	}

	*o = AllRulesDto(varAllRulesDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "all")
		delete(additionalProperties, "relabel")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAllRulesDto struct {
	value *AllRulesDto
	isSet bool
}

func (v NullableAllRulesDto) Get() *AllRulesDto {
	return v.value
}

func (v *NullableAllRulesDto) Set(val *AllRulesDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAllRulesDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAllRulesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllRulesDto(val *AllRulesDto) *NullableAllRulesDto {
	return &NullableAllRulesDto{value: val, isSet: true}
}

func (v NullableAllRulesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllRulesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
