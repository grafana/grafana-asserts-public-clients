/*
Asserts, Inc

Asserts Public API

API version: 1.0.4
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the TraceConfigDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TraceConfigDto{}

// TraceConfigDto struct for TraceConfigDto
type TraceConfigDto struct {
	Tool              *string           `json:"tool,omitempty"`
	Url               *string           `json:"url,omitempty"`
	LabelToTagMapping map[string]string `json:"labelToTagMapping,omitempty"`
	ServiceLabel      *string           `json:"serviceLabel,omitempty"`
	OperationLabel    *string           `json:"operationLabel,omitempty"`
	AssertsCollector  *bool             `json:"assertsCollector,omitempty"`
	// Deprecated
	AddOutboundContext         *bool   `json:"addOutboundContext,omitempty"`
	SuffixServiceWithNamespace *bool   `json:"suffixServiceWithNamespace,omitempty"`
	IsElasticBackend           *bool   `json:"isElasticBackend,omitempty"`
	ProjectName                *string `json:"projectName,omitempty"`
	IngestedByAgent            *bool   `json:"ingestedByAgent,omitempty"`
	AwsRegion                  *string `json:"awsRegion,omitempty"`
	DataSource                 *string `json:"dataSource,omitempty"`
	OrgId                      *string `json:"orgId,omitempty"`
	AdditionalProperties       map[string]interface{}
}

type _TraceConfigDto TraceConfigDto

// NewTraceConfigDto instantiates a new TraceConfigDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTraceConfigDto() *TraceConfigDto {
	this := TraceConfigDto{}
	return &this
}

// NewTraceConfigDtoWithDefaults instantiates a new TraceConfigDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraceConfigDtoWithDefaults() *TraceConfigDto {
	this := TraceConfigDto{}
	return &this
}

// GetTool returns the Tool field value if set, zero value otherwise.
func (o *TraceConfigDto) GetTool() string {
	if o == nil || IsNil(o.Tool) {
		var ret string
		return ret
	}
	return *o.Tool
}

// GetToolOk returns a tuple with the Tool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceConfigDto) GetToolOk() (*string, bool) {
	if o == nil || IsNil(o.Tool) {
		return nil, false
	}
	return o.Tool, true
}

// HasTool returns a boolean if a field has been set.
func (o *TraceConfigDto) HasTool() bool {
	if o != nil && !IsNil(o.Tool) {
		return true
	}

	return false
}

// SetTool gets a reference to the given string and assigns it to the Tool field.
func (o *TraceConfigDto) SetTool(v string) {
	o.Tool = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *TraceConfigDto) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceConfigDto) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *TraceConfigDto) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *TraceConfigDto) SetUrl(v string) {
	o.Url = &v
}

// GetLabelToTagMapping returns the LabelToTagMapping field value if set, zero value otherwise.
func (o *TraceConfigDto) GetLabelToTagMapping() map[string]string {
	if o == nil || IsNil(o.LabelToTagMapping) {
		var ret map[string]string
		return ret
	}
	return o.LabelToTagMapping
}

// GetLabelToTagMappingOk returns a tuple with the LabelToTagMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceConfigDto) GetLabelToTagMappingOk() (map[string]string, bool) {
	if o == nil || IsNil(o.LabelToTagMapping) {
		return map[string]string{}, false
	}
	return o.LabelToTagMapping, true
}

// HasLabelToTagMapping returns a boolean if a field has been set.
func (o *TraceConfigDto) HasLabelToTagMapping() bool {
	if o != nil && !IsNil(o.LabelToTagMapping) {
		return true
	}

	return false
}

// SetLabelToTagMapping gets a reference to the given map[string]string and assigns it to the LabelToTagMapping field.
func (o *TraceConfigDto) SetLabelToTagMapping(v map[string]string) {
	o.LabelToTagMapping = v
}

// GetServiceLabel returns the ServiceLabel field value if set, zero value otherwise.
func (o *TraceConfigDto) GetServiceLabel() string {
	if o == nil || IsNil(o.ServiceLabel) {
		var ret string
		return ret
	}
	return *o.ServiceLabel
}

// GetServiceLabelOk returns a tuple with the ServiceLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceConfigDto) GetServiceLabelOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceLabel) {
		return nil, false
	}
	return o.ServiceLabel, true
}

// HasServiceLabel returns a boolean if a field has been set.
func (o *TraceConfigDto) HasServiceLabel() bool {
	if o != nil && !IsNil(o.ServiceLabel) {
		return true
	}

	return false
}

// SetServiceLabel gets a reference to the given string and assigns it to the ServiceLabel field.
func (o *TraceConfigDto) SetServiceLabel(v string) {
	o.ServiceLabel = &v
}

// GetOperationLabel returns the OperationLabel field value if set, zero value otherwise.
func (o *TraceConfigDto) GetOperationLabel() string {
	if o == nil || IsNil(o.OperationLabel) {
		var ret string
		return ret
	}
	return *o.OperationLabel
}

// GetOperationLabelOk returns a tuple with the OperationLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceConfigDto) GetOperationLabelOk() (*string, bool) {
	if o == nil || IsNil(o.OperationLabel) {
		return nil, false
	}
	return o.OperationLabel, true
}

// HasOperationLabel returns a boolean if a field has been set.
func (o *TraceConfigDto) HasOperationLabel() bool {
	if o != nil && !IsNil(o.OperationLabel) {
		return true
	}

	return false
}

// SetOperationLabel gets a reference to the given string and assigns it to the OperationLabel field.
func (o *TraceConfigDto) SetOperationLabel(v string) {
	o.OperationLabel = &v
}

// GetAssertsCollector returns the AssertsCollector field value if set, zero value otherwise.
func (o *TraceConfigDto) GetAssertsCollector() bool {
	if o == nil || IsNil(o.AssertsCollector) {
		var ret bool
		return ret
	}
	return *o.AssertsCollector
}

// GetAssertsCollectorOk returns a tuple with the AssertsCollector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceConfigDto) GetAssertsCollectorOk() (*bool, bool) {
	if o == nil || IsNil(o.AssertsCollector) {
		return nil, false
	}
	return o.AssertsCollector, true
}

// HasAssertsCollector returns a boolean if a field has been set.
func (o *TraceConfigDto) HasAssertsCollector() bool {
	if o != nil && !IsNil(o.AssertsCollector) {
		return true
	}

	return false
}

// SetAssertsCollector gets a reference to the given bool and assigns it to the AssertsCollector field.
func (o *TraceConfigDto) SetAssertsCollector(v bool) {
	o.AssertsCollector = &v
}

// GetAddOutboundContext returns the AddOutboundContext field value if set, zero value otherwise.
// Deprecated
func (o *TraceConfigDto) GetAddOutboundContext() bool {
	if o == nil || IsNil(o.AddOutboundContext) {
		var ret bool
		return ret
	}
	return *o.AddOutboundContext
}

// GetAddOutboundContextOk returns a tuple with the AddOutboundContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *TraceConfigDto) GetAddOutboundContextOk() (*bool, bool) {
	if o == nil || IsNil(o.AddOutboundContext) {
		return nil, false
	}
	return o.AddOutboundContext, true
}

// HasAddOutboundContext returns a boolean if a field has been set.
func (o *TraceConfigDto) HasAddOutboundContext() bool {
	if o != nil && !IsNil(o.AddOutboundContext) {
		return true
	}

	return false
}

// SetAddOutboundContext gets a reference to the given bool and assigns it to the AddOutboundContext field.
// Deprecated
func (o *TraceConfigDto) SetAddOutboundContext(v bool) {
	o.AddOutboundContext = &v
}

// GetSuffixServiceWithNamespace returns the SuffixServiceWithNamespace field value if set, zero value otherwise.
func (o *TraceConfigDto) GetSuffixServiceWithNamespace() bool {
	if o == nil || IsNil(o.SuffixServiceWithNamespace) {
		var ret bool
		return ret
	}
	return *o.SuffixServiceWithNamespace
}

// GetSuffixServiceWithNamespaceOk returns a tuple with the SuffixServiceWithNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceConfigDto) GetSuffixServiceWithNamespaceOk() (*bool, bool) {
	if o == nil || IsNil(o.SuffixServiceWithNamespace) {
		return nil, false
	}
	return o.SuffixServiceWithNamespace, true
}

// HasSuffixServiceWithNamespace returns a boolean if a field has been set.
func (o *TraceConfigDto) HasSuffixServiceWithNamespace() bool {
	if o != nil && !IsNil(o.SuffixServiceWithNamespace) {
		return true
	}

	return false
}

// SetSuffixServiceWithNamespace gets a reference to the given bool and assigns it to the SuffixServiceWithNamespace field.
func (o *TraceConfigDto) SetSuffixServiceWithNamespace(v bool) {
	o.SuffixServiceWithNamespace = &v
}

// GetIsElasticBackend returns the IsElasticBackend field value if set, zero value otherwise.
func (o *TraceConfigDto) GetIsElasticBackend() bool {
	if o == nil || IsNil(o.IsElasticBackend) {
		var ret bool
		return ret
	}
	return *o.IsElasticBackend
}

// GetIsElasticBackendOk returns a tuple with the IsElasticBackend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceConfigDto) GetIsElasticBackendOk() (*bool, bool) {
	if o == nil || IsNil(o.IsElasticBackend) {
		return nil, false
	}
	return o.IsElasticBackend, true
}

// HasIsElasticBackend returns a boolean if a field has been set.
func (o *TraceConfigDto) HasIsElasticBackend() bool {
	if o != nil && !IsNil(o.IsElasticBackend) {
		return true
	}

	return false
}

// SetIsElasticBackend gets a reference to the given bool and assigns it to the IsElasticBackend field.
func (o *TraceConfigDto) SetIsElasticBackend(v bool) {
	o.IsElasticBackend = &v
}

// GetProjectName returns the ProjectName field value if set, zero value otherwise.
func (o *TraceConfigDto) GetProjectName() string {
	if o == nil || IsNil(o.ProjectName) {
		var ret string
		return ret
	}
	return *o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceConfigDto) GetProjectNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectName) {
		return nil, false
	}
	return o.ProjectName, true
}

// HasProjectName returns a boolean if a field has been set.
func (o *TraceConfigDto) HasProjectName() bool {
	if o != nil && !IsNil(o.ProjectName) {
		return true
	}

	return false
}

// SetProjectName gets a reference to the given string and assigns it to the ProjectName field.
func (o *TraceConfigDto) SetProjectName(v string) {
	o.ProjectName = &v
}

// GetIngestedByAgent returns the IngestedByAgent field value if set, zero value otherwise.
func (o *TraceConfigDto) GetIngestedByAgent() bool {
	if o == nil || IsNil(o.IngestedByAgent) {
		var ret bool
		return ret
	}
	return *o.IngestedByAgent
}

// GetIngestedByAgentOk returns a tuple with the IngestedByAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceConfigDto) GetIngestedByAgentOk() (*bool, bool) {
	if o == nil || IsNil(o.IngestedByAgent) {
		return nil, false
	}
	return o.IngestedByAgent, true
}

// HasIngestedByAgent returns a boolean if a field has been set.
func (o *TraceConfigDto) HasIngestedByAgent() bool {
	if o != nil && !IsNil(o.IngestedByAgent) {
		return true
	}

	return false
}

// SetIngestedByAgent gets a reference to the given bool and assigns it to the IngestedByAgent field.
func (o *TraceConfigDto) SetIngestedByAgent(v bool) {
	o.IngestedByAgent = &v
}

// GetAwsRegion returns the AwsRegion field value if set, zero value otherwise.
func (o *TraceConfigDto) GetAwsRegion() string {
	if o == nil || IsNil(o.AwsRegion) {
		var ret string
		return ret
	}
	return *o.AwsRegion
}

// GetAwsRegionOk returns a tuple with the AwsRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceConfigDto) GetAwsRegionOk() (*string, bool) {
	if o == nil || IsNil(o.AwsRegion) {
		return nil, false
	}
	return o.AwsRegion, true
}

// HasAwsRegion returns a boolean if a field has been set.
func (o *TraceConfigDto) HasAwsRegion() bool {
	if o != nil && !IsNil(o.AwsRegion) {
		return true
	}

	return false
}

// SetAwsRegion gets a reference to the given string and assigns it to the AwsRegion field.
func (o *TraceConfigDto) SetAwsRegion(v string) {
	o.AwsRegion = &v
}

// GetDataSource returns the DataSource field value if set, zero value otherwise.
func (o *TraceConfigDto) GetDataSource() string {
	if o == nil || IsNil(o.DataSource) {
		var ret string
		return ret
	}
	return *o.DataSource
}

// GetDataSourceOk returns a tuple with the DataSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceConfigDto) GetDataSourceOk() (*string, bool) {
	if o == nil || IsNil(o.DataSource) {
		return nil, false
	}
	return o.DataSource, true
}

// HasDataSource returns a boolean if a field has been set.
func (o *TraceConfigDto) HasDataSource() bool {
	if o != nil && !IsNil(o.DataSource) {
		return true
	}

	return false
}

// SetDataSource gets a reference to the given string and assigns it to the DataSource field.
func (o *TraceConfigDto) SetDataSource(v string) {
	o.DataSource = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *TraceConfigDto) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceConfigDto) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *TraceConfigDto) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *TraceConfigDto) SetOrgId(v string) {
	o.OrgId = &v
}

func (o TraceConfigDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TraceConfigDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tool) {
		toSerialize["tool"] = o.Tool
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.LabelToTagMapping) {
		toSerialize["labelToTagMapping"] = o.LabelToTagMapping
	}
	if !IsNil(o.ServiceLabel) {
		toSerialize["serviceLabel"] = o.ServiceLabel
	}
	if !IsNil(o.OperationLabel) {
		toSerialize["operationLabel"] = o.OperationLabel
	}
	if !IsNil(o.AssertsCollector) {
		toSerialize["assertsCollector"] = o.AssertsCollector
	}
	if !IsNil(o.AddOutboundContext) {
		toSerialize["addOutboundContext"] = o.AddOutboundContext
	}
	if !IsNil(o.SuffixServiceWithNamespace) {
		toSerialize["suffixServiceWithNamespace"] = o.SuffixServiceWithNamespace
	}
	if !IsNil(o.IsElasticBackend) {
		toSerialize["isElasticBackend"] = o.IsElasticBackend
	}
	if !IsNil(o.ProjectName) {
		toSerialize["projectName"] = o.ProjectName
	}
	if !IsNil(o.IngestedByAgent) {
		toSerialize["ingestedByAgent"] = o.IngestedByAgent
	}
	if !IsNil(o.AwsRegion) {
		toSerialize["awsRegion"] = o.AwsRegion
	}
	if !IsNil(o.DataSource) {
		toSerialize["dataSource"] = o.DataSource
	}
	if !IsNil(o.OrgId) {
		toSerialize["orgId"] = o.OrgId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TraceConfigDto) UnmarshalJSON(data []byte) (err error) {
	varTraceConfigDto := _TraceConfigDto{}

	err = json.Unmarshal(data, &varTraceConfigDto)

	if err != nil {
		return err
	}

	*o = TraceConfigDto(varTraceConfigDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tool")
		delete(additionalProperties, "url")
		delete(additionalProperties, "labelToTagMapping")
		delete(additionalProperties, "serviceLabel")
		delete(additionalProperties, "operationLabel")
		delete(additionalProperties, "assertsCollector")
		delete(additionalProperties, "addOutboundContext")
		delete(additionalProperties, "suffixServiceWithNamespace")
		delete(additionalProperties, "isElasticBackend")
		delete(additionalProperties, "projectName")
		delete(additionalProperties, "ingestedByAgent")
		delete(additionalProperties, "awsRegion")
		delete(additionalProperties, "dataSource")
		delete(additionalProperties, "orgId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTraceConfigDto struct {
	value *TraceConfigDto
	isSet bool
}

func (v NullableTraceConfigDto) Get() *TraceConfigDto {
	return v.value
}

func (v *NullableTraceConfigDto) Set(val *TraceConfigDto) {
	v.value = val
	v.isSet = true
}

func (v NullableTraceConfigDto) IsSet() bool {
	return v.isSet
}

func (v *NullableTraceConfigDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTraceConfigDto(val *TraceConfigDto) *NullableTraceConfigDto {
	return &NullableTraceConfigDto{value: val, isSet: true}
}

func (v NullableTraceConfigDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTraceConfigDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
