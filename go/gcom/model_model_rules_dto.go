/*
Asserts, Inc

Asserts Public API

API version: 2025.09.11-132913
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the ModelRulesDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelRulesDto{}

// ModelRulesDto The model rules configuration to create or update
type ModelRulesDto struct {
	Name                 *string           `json:"name,omitempty"`
	Entities             []EntityRuleDto   `json:"entities,omitempty"`
	Relations            []RelationRuleDto `json:"relations,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ModelRulesDto ModelRulesDto

// NewModelRulesDto instantiates a new ModelRulesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelRulesDto() *ModelRulesDto {
	this := ModelRulesDto{}
	return &this
}

// NewModelRulesDtoWithDefaults instantiates a new ModelRulesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelRulesDtoWithDefaults() *ModelRulesDto {
	this := ModelRulesDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ModelRulesDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelRulesDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ModelRulesDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ModelRulesDto) SetName(v string) {
	o.Name = &v
}

// GetEntities returns the Entities field value if set, zero value otherwise.
func (o *ModelRulesDto) GetEntities() []EntityRuleDto {
	if o == nil || IsNil(o.Entities) {
		var ret []EntityRuleDto
		return ret
	}
	return o.Entities
}

// GetEntitiesOk returns a tuple with the Entities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelRulesDto) GetEntitiesOk() ([]EntityRuleDto, bool) {
	if o == nil || IsNil(o.Entities) {
		return nil, false
	}
	return o.Entities, true
}

// HasEntities returns a boolean if a field has been set.
func (o *ModelRulesDto) HasEntities() bool {
	if o != nil && !IsNil(o.Entities) {
		return true
	}

	return false
}

// SetEntities gets a reference to the given []EntityRuleDto and assigns it to the Entities field.
func (o *ModelRulesDto) SetEntities(v []EntityRuleDto) {
	o.Entities = v
}

// GetRelations returns the Relations field value if set, zero value otherwise.
func (o *ModelRulesDto) GetRelations() []RelationRuleDto {
	if o == nil || IsNil(o.Relations) {
		var ret []RelationRuleDto
		return ret
	}
	return o.Relations
}

// GetRelationsOk returns a tuple with the Relations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelRulesDto) GetRelationsOk() ([]RelationRuleDto, bool) {
	if o == nil || IsNil(o.Relations) {
		return nil, false
	}
	return o.Relations, true
}

// HasRelations returns a boolean if a field has been set.
func (o *ModelRulesDto) HasRelations() bool {
	if o != nil && !IsNil(o.Relations) {
		return true
	}

	return false
}

// SetRelations gets a reference to the given []RelationRuleDto and assigns it to the Relations field.
func (o *ModelRulesDto) SetRelations(v []RelationRuleDto) {
	o.Relations = v
}

func (o ModelRulesDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelRulesDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Entities) {
		toSerialize["entities"] = o.Entities
	}
	if !IsNil(o.Relations) {
		toSerialize["relations"] = o.Relations
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelRulesDto) UnmarshalJSON(data []byte) (err error) {
	varModelRulesDto := _ModelRulesDto{}

	err = json.Unmarshal(data, &varModelRulesDto)

	if err != nil {
		return err
	}

	*o = ModelRulesDto(varModelRulesDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "entities")
		delete(additionalProperties, "relations")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelRulesDto struct {
	value *ModelRulesDto
	isSet bool
}

func (v NullableModelRulesDto) Get() *ModelRulesDto {
	return v.value
}

func (v *NullableModelRulesDto) Set(val *ModelRulesDto) {
	v.value = val
	v.isSet = true
}

func (v NullableModelRulesDto) IsSet() bool {
	return v.isSet
}

func (v *NullableModelRulesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelRulesDto(val *ModelRulesDto) *NullableModelRulesDto {
	return &NullableModelRulesDto{value: val, isSet: true}
}

func (v NullableModelRulesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelRulesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
