/*
Asserts, Inc

Asserts Public API

API version: 2025.09.11-132913
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the RcaPatternSearchRequestDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RcaPatternSearchRequestDto{}

// RcaPatternSearchRequestDto struct for RcaPatternSearchRequestDto
type RcaPatternSearchRequestDto struct {
	EntityType           *string  `json:"entityType,omitempty"`
	EntityName           *string  `json:"entityName,omitempty"`
	Env                  *string  `json:"env,omitempty"`
	Site                 *string  `json:"site,omitempty"`
	Namespace            *string  `json:"namespace,omitempty"`
	Start                *int64   `json:"start,omitempty"`
	End                  *int64   `json:"end,omitempty"`
	Patterns             []string `json:"patterns,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RcaPatternSearchRequestDto RcaPatternSearchRequestDto

// NewRcaPatternSearchRequestDto instantiates a new RcaPatternSearchRequestDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRcaPatternSearchRequestDto() *RcaPatternSearchRequestDto {
	this := RcaPatternSearchRequestDto{}
	return &this
}

// NewRcaPatternSearchRequestDtoWithDefaults instantiates a new RcaPatternSearchRequestDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRcaPatternSearchRequestDtoWithDefaults() *RcaPatternSearchRequestDto {
	this := RcaPatternSearchRequestDto{}
	return &this
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *RcaPatternSearchRequestDto) GetEntityType() string {
	if o == nil || IsNil(o.EntityType) {
		var ret string
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcaPatternSearchRequestDto) GetEntityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EntityType) {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *RcaPatternSearchRequestDto) HasEntityType() bool {
	if o != nil && !IsNil(o.EntityType) {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given string and assigns it to the EntityType field.
func (o *RcaPatternSearchRequestDto) SetEntityType(v string) {
	o.EntityType = &v
}

// GetEntityName returns the EntityName field value if set, zero value otherwise.
func (o *RcaPatternSearchRequestDto) GetEntityName() string {
	if o == nil || IsNil(o.EntityName) {
		var ret string
		return ret
	}
	return *o.EntityName
}

// GetEntityNameOk returns a tuple with the EntityName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcaPatternSearchRequestDto) GetEntityNameOk() (*string, bool) {
	if o == nil || IsNil(o.EntityName) {
		return nil, false
	}
	return o.EntityName, true
}

// HasEntityName returns a boolean if a field has been set.
func (o *RcaPatternSearchRequestDto) HasEntityName() bool {
	if o != nil && !IsNil(o.EntityName) {
		return true
	}

	return false
}

// SetEntityName gets a reference to the given string and assigns it to the EntityName field.
func (o *RcaPatternSearchRequestDto) SetEntityName(v string) {
	o.EntityName = &v
}

// GetEnv returns the Env field value if set, zero value otherwise.
func (o *RcaPatternSearchRequestDto) GetEnv() string {
	if o == nil || IsNil(o.Env) {
		var ret string
		return ret
	}
	return *o.Env
}

// GetEnvOk returns a tuple with the Env field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcaPatternSearchRequestDto) GetEnvOk() (*string, bool) {
	if o == nil || IsNil(o.Env) {
		return nil, false
	}
	return o.Env, true
}

// HasEnv returns a boolean if a field has been set.
func (o *RcaPatternSearchRequestDto) HasEnv() bool {
	if o != nil && !IsNil(o.Env) {
		return true
	}

	return false
}

// SetEnv gets a reference to the given string and assigns it to the Env field.
func (o *RcaPatternSearchRequestDto) SetEnv(v string) {
	o.Env = &v
}

// GetSite returns the Site field value if set, zero value otherwise.
func (o *RcaPatternSearchRequestDto) GetSite() string {
	if o == nil || IsNil(o.Site) {
		var ret string
		return ret
	}
	return *o.Site
}

// GetSiteOk returns a tuple with the Site field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcaPatternSearchRequestDto) GetSiteOk() (*string, bool) {
	if o == nil || IsNil(o.Site) {
		return nil, false
	}
	return o.Site, true
}

// HasSite returns a boolean if a field has been set.
func (o *RcaPatternSearchRequestDto) HasSite() bool {
	if o != nil && !IsNil(o.Site) {
		return true
	}

	return false
}

// SetSite gets a reference to the given string and assigns it to the Site field.
func (o *RcaPatternSearchRequestDto) SetSite(v string) {
	o.Site = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *RcaPatternSearchRequestDto) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcaPatternSearchRequestDto) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *RcaPatternSearchRequestDto) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *RcaPatternSearchRequestDto) SetNamespace(v string) {
	o.Namespace = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *RcaPatternSearchRequestDto) GetStart() int64 {
	if o == nil || IsNil(o.Start) {
		var ret int64
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcaPatternSearchRequestDto) GetStartOk() (*int64, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *RcaPatternSearchRequestDto) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given int64 and assigns it to the Start field.
func (o *RcaPatternSearchRequestDto) SetStart(v int64) {
	o.Start = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *RcaPatternSearchRequestDto) GetEnd() int64 {
	if o == nil || IsNil(o.End) {
		var ret int64
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcaPatternSearchRequestDto) GetEndOk() (*int64, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *RcaPatternSearchRequestDto) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given int64 and assigns it to the End field.
func (o *RcaPatternSearchRequestDto) SetEnd(v int64) {
	o.End = &v
}

// GetPatterns returns the Patterns field value if set, zero value otherwise.
func (o *RcaPatternSearchRequestDto) GetPatterns() []string {
	if o == nil || IsNil(o.Patterns) {
		var ret []string
		return ret
	}
	return o.Patterns
}

// GetPatternsOk returns a tuple with the Patterns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RcaPatternSearchRequestDto) GetPatternsOk() ([]string, bool) {
	if o == nil || IsNil(o.Patterns) {
		return nil, false
	}
	return o.Patterns, true
}

// HasPatterns returns a boolean if a field has been set.
func (o *RcaPatternSearchRequestDto) HasPatterns() bool {
	if o != nil && !IsNil(o.Patterns) {
		return true
	}

	return false
}

// SetPatterns gets a reference to the given []string and assigns it to the Patterns field.
func (o *RcaPatternSearchRequestDto) SetPatterns(v []string) {
	o.Patterns = v
}

func (o RcaPatternSearchRequestDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RcaPatternSearchRequestDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntityType) {
		toSerialize["entityType"] = o.EntityType
	}
	if !IsNil(o.EntityName) {
		toSerialize["entityName"] = o.EntityName
	}
	if !IsNil(o.Env) {
		toSerialize["env"] = o.Env
	}
	if !IsNil(o.Site) {
		toSerialize["site"] = o.Site
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !IsNil(o.Patterns) {
		toSerialize["patterns"] = o.Patterns
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RcaPatternSearchRequestDto) UnmarshalJSON(data []byte) (err error) {
	varRcaPatternSearchRequestDto := _RcaPatternSearchRequestDto{}

	err = json.Unmarshal(data, &varRcaPatternSearchRequestDto)

	if err != nil {
		return err
	}

	*o = RcaPatternSearchRequestDto(varRcaPatternSearchRequestDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "entityType")
		delete(additionalProperties, "entityName")
		delete(additionalProperties, "env")
		delete(additionalProperties, "site")
		delete(additionalProperties, "namespace")
		delete(additionalProperties, "start")
		delete(additionalProperties, "end")
		delete(additionalProperties, "patterns")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRcaPatternSearchRequestDto struct {
	value *RcaPatternSearchRequestDto
	isSet bool
}

func (v NullableRcaPatternSearchRequestDto) Get() *RcaPatternSearchRequestDto {
	return v.value
}

func (v *NullableRcaPatternSearchRequestDto) Set(val *RcaPatternSearchRequestDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRcaPatternSearchRequestDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRcaPatternSearchRequestDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRcaPatternSearchRequestDto(val *RcaPatternSearchRequestDto) *NullableRcaPatternSearchRequestDto {
	return &NullableRcaPatternSearchRequestDto{value: val, isSet: true}
}

func (v NullableRcaPatternSearchRequestDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRcaPatternSearchRequestDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
