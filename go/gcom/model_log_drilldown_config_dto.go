/*
Asserts, Inc

Asserts Public API

API version: 2025.08.25-143624
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the LogDrilldownConfigDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogDrilldownConfigDto{}

// LogDrilldownConfigDto struct for LogDrilldownConfigDto
type LogDrilldownConfigDto struct {
	Name                            *string                 `json:"name,omitempty"`
	Match                           []PropertyMatchEntryDto `json:"match,omitempty"`
	DefaultConfig                   *bool                   `json:"defaultConfig,omitempty"`
	DataSourceUid                   *string                 `json:"dataSourceUid,omitempty"`
	ErrorLabel                      *string                 `json:"errorLabel,omitempty"`
	EntityPropertyToLogLabelMapping map[string]string       `json:"entityPropertyToLogLabelMapping,omitempty"`
	FilterBySpanId                  *bool                   `json:"filterBySpanId,omitempty"`
	FilterByTraceId                 *bool                   `json:"filterByTraceId,omitempty"`
	AdditionalProperties            map[string]interface{}
}

type _LogDrilldownConfigDto LogDrilldownConfigDto

// NewLogDrilldownConfigDto instantiates a new LogDrilldownConfigDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogDrilldownConfigDto() *LogDrilldownConfigDto {
	this := LogDrilldownConfigDto{}
	return &this
}

// NewLogDrilldownConfigDtoWithDefaults instantiates a new LogDrilldownConfigDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogDrilldownConfigDtoWithDefaults() *LogDrilldownConfigDto {
	this := LogDrilldownConfigDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LogDrilldownConfigDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogDrilldownConfigDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LogDrilldownConfigDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LogDrilldownConfigDto) SetName(v string) {
	o.Name = &v
}

// GetMatch returns the Match field value if set, zero value otherwise.
func (o *LogDrilldownConfigDto) GetMatch() []PropertyMatchEntryDto {
	if o == nil || IsNil(o.Match) {
		var ret []PropertyMatchEntryDto
		return ret
	}
	return o.Match
}

// GetMatchOk returns a tuple with the Match field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogDrilldownConfigDto) GetMatchOk() ([]PropertyMatchEntryDto, bool) {
	if o == nil || IsNil(o.Match) {
		return nil, false
	}
	return o.Match, true
}

// HasMatch returns a boolean if a field has been set.
func (o *LogDrilldownConfigDto) HasMatch() bool {
	if o != nil && !IsNil(o.Match) {
		return true
	}

	return false
}

// SetMatch gets a reference to the given []PropertyMatchEntryDto and assigns it to the Match field.
func (o *LogDrilldownConfigDto) SetMatch(v []PropertyMatchEntryDto) {
	o.Match = v
}

// GetDefaultConfig returns the DefaultConfig field value if set, zero value otherwise.
func (o *LogDrilldownConfigDto) GetDefaultConfig() bool {
	if o == nil || IsNil(o.DefaultConfig) {
		var ret bool
		return ret
	}
	return *o.DefaultConfig
}

// GetDefaultConfigOk returns a tuple with the DefaultConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogDrilldownConfigDto) GetDefaultConfigOk() (*bool, bool) {
	if o == nil || IsNil(o.DefaultConfig) {
		return nil, false
	}
	return o.DefaultConfig, true
}

// HasDefaultConfig returns a boolean if a field has been set.
func (o *LogDrilldownConfigDto) HasDefaultConfig() bool {
	if o != nil && !IsNil(o.DefaultConfig) {
		return true
	}

	return false
}

// SetDefaultConfig gets a reference to the given bool and assigns it to the DefaultConfig field.
func (o *LogDrilldownConfigDto) SetDefaultConfig(v bool) {
	o.DefaultConfig = &v
}

// GetDataSourceUid returns the DataSourceUid field value if set, zero value otherwise.
func (o *LogDrilldownConfigDto) GetDataSourceUid() string {
	if o == nil || IsNil(o.DataSourceUid) {
		var ret string
		return ret
	}
	return *o.DataSourceUid
}

// GetDataSourceUidOk returns a tuple with the DataSourceUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogDrilldownConfigDto) GetDataSourceUidOk() (*string, bool) {
	if o == nil || IsNil(o.DataSourceUid) {
		return nil, false
	}
	return o.DataSourceUid, true
}

// HasDataSourceUid returns a boolean if a field has been set.
func (o *LogDrilldownConfigDto) HasDataSourceUid() bool {
	if o != nil && !IsNil(o.DataSourceUid) {
		return true
	}

	return false
}

// SetDataSourceUid gets a reference to the given string and assigns it to the DataSourceUid field.
func (o *LogDrilldownConfigDto) SetDataSourceUid(v string) {
	o.DataSourceUid = &v
}

// GetErrorLabel returns the ErrorLabel field value if set, zero value otherwise.
func (o *LogDrilldownConfigDto) GetErrorLabel() string {
	if o == nil || IsNil(o.ErrorLabel) {
		var ret string
		return ret
	}
	return *o.ErrorLabel
}

// GetErrorLabelOk returns a tuple with the ErrorLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogDrilldownConfigDto) GetErrorLabelOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorLabel) {
		return nil, false
	}
	return o.ErrorLabel, true
}

// HasErrorLabel returns a boolean if a field has been set.
func (o *LogDrilldownConfigDto) HasErrorLabel() bool {
	if o != nil && !IsNil(o.ErrorLabel) {
		return true
	}

	return false
}

// SetErrorLabel gets a reference to the given string and assigns it to the ErrorLabel field.
func (o *LogDrilldownConfigDto) SetErrorLabel(v string) {
	o.ErrorLabel = &v
}

// GetEntityPropertyToLogLabelMapping returns the EntityPropertyToLogLabelMapping field value if set, zero value otherwise.
func (o *LogDrilldownConfigDto) GetEntityPropertyToLogLabelMapping() map[string]string {
	if o == nil || IsNil(o.EntityPropertyToLogLabelMapping) {
		var ret map[string]string
		return ret
	}
	return o.EntityPropertyToLogLabelMapping
}

// GetEntityPropertyToLogLabelMappingOk returns a tuple with the EntityPropertyToLogLabelMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogDrilldownConfigDto) GetEntityPropertyToLogLabelMappingOk() (map[string]string, bool) {
	if o == nil || IsNil(o.EntityPropertyToLogLabelMapping) {
		return map[string]string{}, false
	}
	return o.EntityPropertyToLogLabelMapping, true
}

// HasEntityPropertyToLogLabelMapping returns a boolean if a field has been set.
func (o *LogDrilldownConfigDto) HasEntityPropertyToLogLabelMapping() bool {
	if o != nil && !IsNil(o.EntityPropertyToLogLabelMapping) {
		return true
	}

	return false
}

// SetEntityPropertyToLogLabelMapping gets a reference to the given map[string]string and assigns it to the EntityPropertyToLogLabelMapping field.
func (o *LogDrilldownConfigDto) SetEntityPropertyToLogLabelMapping(v map[string]string) {
	o.EntityPropertyToLogLabelMapping = v
}

// GetFilterBySpanId returns the FilterBySpanId field value if set, zero value otherwise.
func (o *LogDrilldownConfigDto) GetFilterBySpanId() bool {
	if o == nil || IsNil(o.FilterBySpanId) {
		var ret bool
		return ret
	}
	return *o.FilterBySpanId
}

// GetFilterBySpanIdOk returns a tuple with the FilterBySpanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogDrilldownConfigDto) GetFilterBySpanIdOk() (*bool, bool) {
	if o == nil || IsNil(o.FilterBySpanId) {
		return nil, false
	}
	return o.FilterBySpanId, true
}

// HasFilterBySpanId returns a boolean if a field has been set.
func (o *LogDrilldownConfigDto) HasFilterBySpanId() bool {
	if o != nil && !IsNil(o.FilterBySpanId) {
		return true
	}

	return false
}

// SetFilterBySpanId gets a reference to the given bool and assigns it to the FilterBySpanId field.
func (o *LogDrilldownConfigDto) SetFilterBySpanId(v bool) {
	o.FilterBySpanId = &v
}

// GetFilterByTraceId returns the FilterByTraceId field value if set, zero value otherwise.
func (o *LogDrilldownConfigDto) GetFilterByTraceId() bool {
	if o == nil || IsNil(o.FilterByTraceId) {
		var ret bool
		return ret
	}
	return *o.FilterByTraceId
}

// GetFilterByTraceIdOk returns a tuple with the FilterByTraceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogDrilldownConfigDto) GetFilterByTraceIdOk() (*bool, bool) {
	if o == nil || IsNil(o.FilterByTraceId) {
		return nil, false
	}
	return o.FilterByTraceId, true
}

// HasFilterByTraceId returns a boolean if a field has been set.
func (o *LogDrilldownConfigDto) HasFilterByTraceId() bool {
	if o != nil && !IsNil(o.FilterByTraceId) {
		return true
	}

	return false
}

// SetFilterByTraceId gets a reference to the given bool and assigns it to the FilterByTraceId field.
func (o *LogDrilldownConfigDto) SetFilterByTraceId(v bool) {
	o.FilterByTraceId = &v
}

func (o LogDrilldownConfigDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogDrilldownConfigDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Match) {
		toSerialize["match"] = o.Match
	}
	if !IsNil(o.DefaultConfig) {
		toSerialize["defaultConfig"] = o.DefaultConfig
	}
	if !IsNil(o.DataSourceUid) {
		toSerialize["dataSourceUid"] = o.DataSourceUid
	}
	if !IsNil(o.ErrorLabel) {
		toSerialize["errorLabel"] = o.ErrorLabel
	}
	if !IsNil(o.EntityPropertyToLogLabelMapping) {
		toSerialize["entityPropertyToLogLabelMapping"] = o.EntityPropertyToLogLabelMapping
	}
	if !IsNil(o.FilterBySpanId) {
		toSerialize["filterBySpanId"] = o.FilterBySpanId
	}
	if !IsNil(o.FilterByTraceId) {
		toSerialize["filterByTraceId"] = o.FilterByTraceId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LogDrilldownConfigDto) UnmarshalJSON(data []byte) (err error) {
	varLogDrilldownConfigDto := _LogDrilldownConfigDto{}

	err = json.Unmarshal(data, &varLogDrilldownConfigDto)

	if err != nil {
		return err
	}

	*o = LogDrilldownConfigDto(varLogDrilldownConfigDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "match")
		delete(additionalProperties, "defaultConfig")
		delete(additionalProperties, "dataSourceUid")
		delete(additionalProperties, "errorLabel")
		delete(additionalProperties, "entityPropertyToLogLabelMapping")
		delete(additionalProperties, "filterBySpanId")
		delete(additionalProperties, "filterByTraceId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLogDrilldownConfigDto struct {
	value *LogDrilldownConfigDto
	isSet bool
}

func (v NullableLogDrilldownConfigDto) Get() *LogDrilldownConfigDto {
	return v.value
}

func (v *NullableLogDrilldownConfigDto) Set(val *LogDrilldownConfigDto) {
	v.value = val
	v.isSet = true
}

func (v NullableLogDrilldownConfigDto) IsSet() bool {
	return v.isSet
}

func (v *NullableLogDrilldownConfigDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogDrilldownConfigDto(val *LogDrilldownConfigDto) *NullableLogDrilldownConfigDto {
	return &NullableLogDrilldownConfigDto{value: val, isSet: true}
}

func (v NullableLogDrilldownConfigDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogDrilldownConfigDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
