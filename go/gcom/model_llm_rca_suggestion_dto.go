/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-055054
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the LlmRcaSuggestionDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LlmRcaSuggestionDto{}

// LlmRcaSuggestionDto struct for LlmRcaSuggestionDto
type LlmRcaSuggestionDto struct {
	Type                 *string                `json:"type,omitempty"`
	Name                 *string                `json:"name,omitempty"`
	Scope                map[string]interface{} `json:"scope,omitempty"`
	Reason               *string                `json:"reason,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LlmRcaSuggestionDto LlmRcaSuggestionDto

// NewLlmRcaSuggestionDto instantiates a new LlmRcaSuggestionDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLlmRcaSuggestionDto() *LlmRcaSuggestionDto {
	this := LlmRcaSuggestionDto{}
	return &this
}

// NewLlmRcaSuggestionDtoWithDefaults instantiates a new LlmRcaSuggestionDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLlmRcaSuggestionDtoWithDefaults() *LlmRcaSuggestionDto {
	this := LlmRcaSuggestionDto{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *LlmRcaSuggestionDto) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LlmRcaSuggestionDto) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *LlmRcaSuggestionDto) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *LlmRcaSuggestionDto) SetType(v string) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LlmRcaSuggestionDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LlmRcaSuggestionDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LlmRcaSuggestionDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LlmRcaSuggestionDto) SetName(v string) {
	o.Name = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *LlmRcaSuggestionDto) GetScope() map[string]interface{} {
	if o == nil || IsNil(o.Scope) {
		var ret map[string]interface{}
		return ret
	}
	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LlmRcaSuggestionDto) GetScopeOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Scope) {
		return map[string]interface{}{}, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *LlmRcaSuggestionDto) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given map[string]interface{} and assigns it to the Scope field.
func (o *LlmRcaSuggestionDto) SetScope(v map[string]interface{}) {
	o.Scope = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *LlmRcaSuggestionDto) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LlmRcaSuggestionDto) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *LlmRcaSuggestionDto) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *LlmRcaSuggestionDto) SetReason(v string) {
	o.Reason = &v
}

func (o LlmRcaSuggestionDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LlmRcaSuggestionDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LlmRcaSuggestionDto) UnmarshalJSON(data []byte) (err error) {
	varLlmRcaSuggestionDto := _LlmRcaSuggestionDto{}

	err = json.Unmarshal(data, &varLlmRcaSuggestionDto)

	if err != nil {
		return err
	}

	*o = LlmRcaSuggestionDto(varLlmRcaSuggestionDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "scope")
		delete(additionalProperties, "reason")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLlmRcaSuggestionDto struct {
	value *LlmRcaSuggestionDto
	isSet bool
}

func (v NullableLlmRcaSuggestionDto) Get() *LlmRcaSuggestionDto {
	return v.value
}

func (v *NullableLlmRcaSuggestionDto) Set(val *LlmRcaSuggestionDto) {
	v.value = val
	v.isSet = true
}

func (v NullableLlmRcaSuggestionDto) IsSet() bool {
	return v.isSet
}

func (v *NullableLlmRcaSuggestionDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLlmRcaSuggestionDto(val *LlmRcaSuggestionDto) *NullableLlmRcaSuggestionDto {
	return &NullableLlmRcaSuggestionDto{value: val, isSet: true}
}

func (v NullableLlmRcaSuggestionDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLlmRcaSuggestionDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
