/*
Asserts, Inc

Asserts Public API

API version: 2025.09.16-110859
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the LlmRcaAssertionTimelineItemDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LlmRcaAssertionTimelineItemDto{}

// LlmRcaAssertionTimelineItemDto struct for LlmRcaAssertionTimelineItemDto
type LlmRcaAssertionTimelineItemDto struct {
	AssertionName        *string                   `json:"assertionName,omitempty"`
	Category             *string                   `json:"category,omitempty"`
	AlertName            *string                   `json:"alertName,omitempty"`
	HealthStates         []LlmRcaAssertionStateDto `json:"healthStates,omitempty"`
	Labels               []map[string]string       `json:"labels,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LlmRcaAssertionTimelineItemDto LlmRcaAssertionTimelineItemDto

// NewLlmRcaAssertionTimelineItemDto instantiates a new LlmRcaAssertionTimelineItemDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLlmRcaAssertionTimelineItemDto() *LlmRcaAssertionTimelineItemDto {
	this := LlmRcaAssertionTimelineItemDto{}
	return &this
}

// NewLlmRcaAssertionTimelineItemDtoWithDefaults instantiates a new LlmRcaAssertionTimelineItemDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLlmRcaAssertionTimelineItemDtoWithDefaults() *LlmRcaAssertionTimelineItemDto {
	this := LlmRcaAssertionTimelineItemDto{}
	return &this
}

// GetAssertionName returns the AssertionName field value if set, zero value otherwise.
func (o *LlmRcaAssertionTimelineItemDto) GetAssertionName() string {
	if o == nil || IsNil(o.AssertionName) {
		var ret string
		return ret
	}
	return *o.AssertionName
}

// GetAssertionNameOk returns a tuple with the AssertionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LlmRcaAssertionTimelineItemDto) GetAssertionNameOk() (*string, bool) {
	if o == nil || IsNil(o.AssertionName) {
		return nil, false
	}
	return o.AssertionName, true
}

// HasAssertionName returns a boolean if a field has been set.
func (o *LlmRcaAssertionTimelineItemDto) HasAssertionName() bool {
	if o != nil && !IsNil(o.AssertionName) {
		return true
	}

	return false
}

// SetAssertionName gets a reference to the given string and assigns it to the AssertionName field.
func (o *LlmRcaAssertionTimelineItemDto) SetAssertionName(v string) {
	o.AssertionName = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *LlmRcaAssertionTimelineItemDto) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LlmRcaAssertionTimelineItemDto) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *LlmRcaAssertionTimelineItemDto) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *LlmRcaAssertionTimelineItemDto) SetCategory(v string) {
	o.Category = &v
}

// GetAlertName returns the AlertName field value if set, zero value otherwise.
func (o *LlmRcaAssertionTimelineItemDto) GetAlertName() string {
	if o == nil || IsNil(o.AlertName) {
		var ret string
		return ret
	}
	return *o.AlertName
}

// GetAlertNameOk returns a tuple with the AlertName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LlmRcaAssertionTimelineItemDto) GetAlertNameOk() (*string, bool) {
	if o == nil || IsNil(o.AlertName) {
		return nil, false
	}
	return o.AlertName, true
}

// HasAlertName returns a boolean if a field has been set.
func (o *LlmRcaAssertionTimelineItemDto) HasAlertName() bool {
	if o != nil && !IsNil(o.AlertName) {
		return true
	}

	return false
}

// SetAlertName gets a reference to the given string and assigns it to the AlertName field.
func (o *LlmRcaAssertionTimelineItemDto) SetAlertName(v string) {
	o.AlertName = &v
}

// GetHealthStates returns the HealthStates field value if set, zero value otherwise.
func (o *LlmRcaAssertionTimelineItemDto) GetHealthStates() []LlmRcaAssertionStateDto {
	if o == nil || IsNil(o.HealthStates) {
		var ret []LlmRcaAssertionStateDto
		return ret
	}
	return o.HealthStates
}

// GetHealthStatesOk returns a tuple with the HealthStates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LlmRcaAssertionTimelineItemDto) GetHealthStatesOk() ([]LlmRcaAssertionStateDto, bool) {
	if o == nil || IsNil(o.HealthStates) {
		return nil, false
	}
	return o.HealthStates, true
}

// HasHealthStates returns a boolean if a field has been set.
func (o *LlmRcaAssertionTimelineItemDto) HasHealthStates() bool {
	if o != nil && !IsNil(o.HealthStates) {
		return true
	}

	return false
}

// SetHealthStates gets a reference to the given []LlmRcaAssertionStateDto and assigns it to the HealthStates field.
func (o *LlmRcaAssertionTimelineItemDto) SetHealthStates(v []LlmRcaAssertionStateDto) {
	o.HealthStates = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *LlmRcaAssertionTimelineItemDto) GetLabels() []map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret []map[string]string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LlmRcaAssertionTimelineItemDto) GetLabelsOk() ([]map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *LlmRcaAssertionTimelineItemDto) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []map[string]string and assigns it to the Labels field.
func (o *LlmRcaAssertionTimelineItemDto) SetLabels(v []map[string]string) {
	o.Labels = v
}

func (o LlmRcaAssertionTimelineItemDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LlmRcaAssertionTimelineItemDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AssertionName) {
		toSerialize["assertionName"] = o.AssertionName
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.AlertName) {
		toSerialize["alertName"] = o.AlertName
	}
	if !IsNil(o.HealthStates) {
		toSerialize["healthStates"] = o.HealthStates
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LlmRcaAssertionTimelineItemDto) UnmarshalJSON(data []byte) (err error) {
	varLlmRcaAssertionTimelineItemDto := _LlmRcaAssertionTimelineItemDto{}

	err = json.Unmarshal(data, &varLlmRcaAssertionTimelineItemDto)

	if err != nil {
		return err
	}

	*o = LlmRcaAssertionTimelineItemDto(varLlmRcaAssertionTimelineItemDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "assertionName")
		delete(additionalProperties, "category")
		delete(additionalProperties, "alertName")
		delete(additionalProperties, "healthStates")
		delete(additionalProperties, "labels")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLlmRcaAssertionTimelineItemDto struct {
	value *LlmRcaAssertionTimelineItemDto
	isSet bool
}

func (v NullableLlmRcaAssertionTimelineItemDto) Get() *LlmRcaAssertionTimelineItemDto {
	return v.value
}

func (v *NullableLlmRcaAssertionTimelineItemDto) Set(val *LlmRcaAssertionTimelineItemDto) {
	v.value = val
	v.isSet = true
}

func (v NullableLlmRcaAssertionTimelineItemDto) IsSet() bool {
	return v.isSet
}

func (v *NullableLlmRcaAssertionTimelineItemDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLlmRcaAssertionTimelineItemDto(val *LlmRcaAssertionTimelineItemDto) *NullableLlmRcaAssertionTimelineItemDto {
	return &NullableLlmRcaAssertionTimelineItemDto{value: val, isSet: true}
}

func (v NullableLlmRcaAssertionTimelineItemDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLlmRcaAssertionTimelineItemDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
