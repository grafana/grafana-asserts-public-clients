/*
Asserts, Inc

Asserts Public API

API version: 2025.08.11-062139
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the TenantEnvConfigResponseDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TenantEnvConfigResponseDto{}

// TenantEnvConfigResponseDto struct for TenantEnvConfigResponseDto
type TenantEnvConfigResponseDto struct {
	Environments         []EnvironmentDto `json:"environments,omitempty"`
	SupportedLogTools    []string         `json:"supportedLogTools,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TenantEnvConfigResponseDto TenantEnvConfigResponseDto

// NewTenantEnvConfigResponseDto instantiates a new TenantEnvConfigResponseDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantEnvConfigResponseDto() *TenantEnvConfigResponseDto {
	this := TenantEnvConfigResponseDto{}
	return &this
}

// NewTenantEnvConfigResponseDtoWithDefaults instantiates a new TenantEnvConfigResponseDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantEnvConfigResponseDtoWithDefaults() *TenantEnvConfigResponseDto {
	this := TenantEnvConfigResponseDto{}
	return &this
}

// GetEnvironments returns the Environments field value if set, zero value otherwise.
func (o *TenantEnvConfigResponseDto) GetEnvironments() []EnvironmentDto {
	if o == nil || IsNil(o.Environments) {
		var ret []EnvironmentDto
		return ret
	}
	return o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantEnvConfigResponseDto) GetEnvironmentsOk() ([]EnvironmentDto, bool) {
	if o == nil || IsNil(o.Environments) {
		return nil, false
	}
	return o.Environments, true
}

// HasEnvironments returns a boolean if a field has been set.
func (o *TenantEnvConfigResponseDto) HasEnvironments() bool {
	if o != nil && !IsNil(o.Environments) {
		return true
	}

	return false
}

// SetEnvironments gets a reference to the given []EnvironmentDto and assigns it to the Environments field.
func (o *TenantEnvConfigResponseDto) SetEnvironments(v []EnvironmentDto) {
	o.Environments = v
}

// GetSupportedLogTools returns the SupportedLogTools field value if set, zero value otherwise.
func (o *TenantEnvConfigResponseDto) GetSupportedLogTools() []string {
	if o == nil || IsNil(o.SupportedLogTools) {
		var ret []string
		return ret
	}
	return o.SupportedLogTools
}

// GetSupportedLogToolsOk returns a tuple with the SupportedLogTools field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantEnvConfigResponseDto) GetSupportedLogToolsOk() ([]string, bool) {
	if o == nil || IsNil(o.SupportedLogTools) {
		return nil, false
	}
	return o.SupportedLogTools, true
}

// HasSupportedLogTools returns a boolean if a field has been set.
func (o *TenantEnvConfigResponseDto) HasSupportedLogTools() bool {
	if o != nil && !IsNil(o.SupportedLogTools) {
		return true
	}

	return false
}

// SetSupportedLogTools gets a reference to the given []string and assigns it to the SupportedLogTools field.
func (o *TenantEnvConfigResponseDto) SetSupportedLogTools(v []string) {
	o.SupportedLogTools = v
}

func (o TenantEnvConfigResponseDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TenantEnvConfigResponseDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Environments) {
		toSerialize["environments"] = o.Environments
	}
	if !IsNil(o.SupportedLogTools) {
		toSerialize["supportedLogTools"] = o.SupportedLogTools
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TenantEnvConfigResponseDto) UnmarshalJSON(data []byte) (err error) {
	varTenantEnvConfigResponseDto := _TenantEnvConfigResponseDto{}

	err = json.Unmarshal(data, &varTenantEnvConfigResponseDto)

	if err != nil {
		return err
	}

	*o = TenantEnvConfigResponseDto(varTenantEnvConfigResponseDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "environments")
		delete(additionalProperties, "supportedLogTools")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTenantEnvConfigResponseDto struct {
	value *TenantEnvConfigResponseDto
	isSet bool
}

func (v NullableTenantEnvConfigResponseDto) Get() *TenantEnvConfigResponseDto {
	return v.value
}

func (v *NullableTenantEnvConfigResponseDto) Set(val *TenantEnvConfigResponseDto) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantEnvConfigResponseDto) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantEnvConfigResponseDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantEnvConfigResponseDto(val *TenantEnvConfigResponseDto) *NullableTenantEnvConfigResponseDto {
	return &NullableTenantEnvConfigResponseDto{value: val, isSet: true}
}

func (v NullableTenantEnvConfigResponseDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantEnvConfigResponseDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
