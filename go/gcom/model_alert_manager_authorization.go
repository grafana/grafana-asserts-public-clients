/*
Asserts, Inc

Asserts Public API

API version: 2025.09.11-132913
Contact: support@asserts.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the AlertManagerAuthorization type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertManagerAuthorization{}

// AlertManagerAuthorization struct for AlertManagerAuthorization
type AlertManagerAuthorization struct {
	Type                 *string `json:"type,omitempty"`
	Credentials          *string `json:"credentials,omitempty"`
	CredentialsFile      *string `json:"credentials_file,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AlertManagerAuthorization AlertManagerAuthorization

// NewAlertManagerAuthorization instantiates a new AlertManagerAuthorization object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertManagerAuthorization() *AlertManagerAuthorization {
	this := AlertManagerAuthorization{}
	return &this
}

// NewAlertManagerAuthorizationWithDefaults instantiates a new AlertManagerAuthorization object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertManagerAuthorizationWithDefaults() *AlertManagerAuthorization {
	this := AlertManagerAuthorization{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AlertManagerAuthorization) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerAuthorization) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AlertManagerAuthorization) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AlertManagerAuthorization) SetType(v string) {
	o.Type = &v
}

// GetCredentials returns the Credentials field value if set, zero value otherwise.
func (o *AlertManagerAuthorization) GetCredentials() string {
	if o == nil || IsNil(o.Credentials) {
		var ret string
		return ret
	}
	return *o.Credentials
}

// GetCredentialsOk returns a tuple with the Credentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerAuthorization) GetCredentialsOk() (*string, bool) {
	if o == nil || IsNil(o.Credentials) {
		return nil, false
	}
	return o.Credentials, true
}

// HasCredentials returns a boolean if a field has been set.
func (o *AlertManagerAuthorization) HasCredentials() bool {
	if o != nil && !IsNil(o.Credentials) {
		return true
	}

	return false
}

// SetCredentials gets a reference to the given string and assigns it to the Credentials field.
func (o *AlertManagerAuthorization) SetCredentials(v string) {
	o.Credentials = &v
}

// GetCredentialsFile returns the CredentialsFile field value if set, zero value otherwise.
func (o *AlertManagerAuthorization) GetCredentialsFile() string {
	if o == nil || IsNil(o.CredentialsFile) {
		var ret string
		return ret
	}
	return *o.CredentialsFile
}

// GetCredentialsFileOk returns a tuple with the CredentialsFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertManagerAuthorization) GetCredentialsFileOk() (*string, bool) {
	if o == nil || IsNil(o.CredentialsFile) {
		return nil, false
	}
	return o.CredentialsFile, true
}

// HasCredentialsFile returns a boolean if a field has been set.
func (o *AlertManagerAuthorization) HasCredentialsFile() bool {
	if o != nil && !IsNil(o.CredentialsFile) {
		return true
	}

	return false
}

// SetCredentialsFile gets a reference to the given string and assigns it to the CredentialsFile field.
func (o *AlertManagerAuthorization) SetCredentialsFile(v string) {
	o.CredentialsFile = &v
}

func (o AlertManagerAuthorization) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertManagerAuthorization) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Credentials) {
		toSerialize["credentials"] = o.Credentials
	}
	if !IsNil(o.CredentialsFile) {
		toSerialize["credentials_file"] = o.CredentialsFile
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AlertManagerAuthorization) UnmarshalJSON(data []byte) (err error) {
	varAlertManagerAuthorization := _AlertManagerAuthorization{}

	err = json.Unmarshal(data, &varAlertManagerAuthorization)

	if err != nil {
		return err
	}

	*o = AlertManagerAuthorization(varAlertManagerAuthorization)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "credentials")
		delete(additionalProperties, "credentials_file")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAlertManagerAuthorization struct {
	value *AlertManagerAuthorization
	isSet bool
}

func (v NullableAlertManagerAuthorization) Get() *AlertManagerAuthorization {
	return v.value
}

func (v *NullableAlertManagerAuthorization) Set(val *AlertManagerAuthorization) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertManagerAuthorization) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertManagerAuthorization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertManagerAuthorization(val *AlertManagerAuthorization) *NullableAlertManagerAuthorization {
	return &NullableAlertManagerAuthorization{value: val, isSet: true}
}

func (v NullableAlertManagerAuthorization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertManagerAuthorization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
